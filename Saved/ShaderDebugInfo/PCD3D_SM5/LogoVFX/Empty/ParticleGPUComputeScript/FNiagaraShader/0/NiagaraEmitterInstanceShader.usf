// #define ALLOW_STATIC_LIGHTING 1
// #define CLEAR_COAT_BOTTOM_NORMAL 0
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1
// #define COMPILER_DEFINE #define
// #define COMPUTESHADER 1
// #define DISKELMESH_BONE_INFLUENCES 0
// #define DOMAINSHADER 0
// #define DXT5_NORMALMAPS 0
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0
// #define EIGHT_BIT_MESH_DISTANCE_FIELDS 0
// #define FORWARD_SHADING 0
// #define GBUFFER_HAS_TANGENT 0
// #define GBUFFER_HAS_VELOCITY 0
// #define GEOMETRYSHADER 0
// #define GPU_SIMULATION 1
// #define GPU_SIMULATION_SHADER 1
// #define HAS_INVERTED_Z_BUFFER 1
// #define HULLSHADER 0
// #define INSTANCED_STEREO 0
// #define IRIS_NORMAL 0
// #define MOBILE_MULTI_VIEW 0
// #define MULTI_VIEW 0
// #define NIAGARA_MAX_GPU_SPAWN_INFOS 8
// #define ODS_CAPTURE 0
// #define PIXELSHADER 0
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0
// #define PLATFORM_SUPPORTS_SRV_UB 1
// #define POST_PROCESS_ALPHA 0
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1
// #define PROJECT_MOBILE_USE_LEGACY_SHADING 0
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 0
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0
// #define RAYCALLABLESHADER 0
// #define RAYGENSHADER 0
// #define RAYHITGROUPSHADER 0
// #define RAYMISSSHADER 0
// #define SELECTIVE_BASEPASS_OUTPUTS 0
// #define SHADING_PATH_DEFERRED 1
// #define THREADGROUP_SIZE 32
// #define USE_DBUFFER 1
// #define USE_PREEXPOSURE 1
// #define USE_SIMULATION_STAGES 0
// #define VERTEXSHADER 0
// #define VIRTUAL_TEXTURE_FEEDBACK_FACTOR 16
#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 37 "/Engine/Public/Platform.ush"
#line 1 "Platform/D3D/D3DCommon.ush"
#line 7 "/Engine/Public/Platform/D3D/D3DCommon.ush"
precise float MakePrecise(precise float v) { return v; }
precise float2 MakePrecise(precise float2 v) { return v; }
precise float3 MakePrecise(precise float3 v) { return v; }
precise float4 MakePrecise(precise float4 v) { return v; }
#line 38 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 11 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Common.ush"
#line 61 "/Engine/Private/Common.ush"
#line 1 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"


cbuffer View
{
	float4x4 View_TranslatedWorldToClip;
	float4x4 View_WorldToClip;
	float4x4 View_ClipToWorld;
	float4x4 View_TranslatedWorldToView;
	float4x4 View_ViewToTranslatedWorld;
	float4x4 View_TranslatedWorldToCameraView;
	float4x4 View_CameraViewToTranslatedWorld;
	float4x4 View_ViewToClip;
	float4x4 View_ViewToClipNoAA;
	float4x4 View_ClipToView;
	float4x4 View_ClipToTranslatedWorld;
	float4x4 View_SVPositionToTranslatedWorld;
	float4x4 View_ScreenToWorld;
	float4x4 View_ScreenToTranslatedWorld;
	float4x4 View_MobileMultiviewShadowTransform;
	float3  View_ViewForward;
	float  PrePadding_View_972;
	float3  View_ViewUp;
	float  PrePadding_View_988;
	float3  View_ViewRight;
	float  PrePadding_View_1004;
	float3  View_HMDViewNoRollUp;
	float  PrePadding_View_1020;
	float3  View_HMDViewNoRollRight;
	float  PrePadding_View_1036;
	float4 View_InvDeviceZToWorldZTransform;
	float4  View_ScreenPositionScaleBias;
	float3 View_WorldCameraOrigin;
	float PrePadding_View_1084;
	float3 View_TranslatedWorldCameraOrigin;
	float PrePadding_View_1100;
	float3 View_WorldViewOrigin;
	float PrePadding_View_1116;
	float3 View_PreViewTranslation;
	float PrePadding_View_1132;
	float4x4 View_PrevProjection;
	float4x4 View_PrevViewProj;
	float4x4 View_PrevViewRotationProj;
	float4x4 View_PrevViewToClip;
	float4x4 View_PrevClipToView;
	float4x4 View_PrevTranslatedWorldToClip;
	float4x4 View_PrevTranslatedWorldToView;
	float4x4 View_PrevViewToTranslatedWorld;
	float4x4 View_PrevTranslatedWorldToCameraView;
	float4x4 View_PrevCameraViewToTranslatedWorld;
	float3 View_PrevWorldCameraOrigin;
	float PrePadding_View_1788;
	float3 View_PrevWorldViewOrigin;
	float PrePadding_View_1804;
	float3 View_PrevPreViewTranslation;
	float PrePadding_View_1820;
	float4x4 View_PrevInvViewProj;
	float4x4 View_PrevScreenToTranslatedWorld;
	float4x4 View_ClipToPrevClip;
	float4 View_TemporalAAJitter;
	float4 View_GlobalClippingPlane;
	float2 View_FieldOfViewWideAngles;
	float2 View_PrevFieldOfViewWideAngles;
	float4  View_ViewRectMin;
	float4 View_ViewSizeAndInvSize;
	float4 View_BufferSizeAndInvSize;
	float4 View_BufferBilinearUVMinMax;
	float4 View_ScreenToViewSpace;
	int View_NumSceneColorMSAASamples;
	float  View_PreExposure;
	float  View_OneOverPreExposure;
	float  PrePadding_View_2156;
	float4  View_DiffuseOverrideParameter;
	float4  View_SpecularOverrideParameter;
	float4  View_NormalOverrideParameter;
	float2  View_RoughnessOverrideParameter;
	float View_PrevFrameGameTime;
	float View_PrevFrameRealTime;
	float  View_OutOfBoundsMask;
	float  PrePadding_View_2228;
	float  PrePadding_View_2232;
	float  PrePadding_View_2236;
	float3 View_WorldCameraMovementSinceLastFrame;
	float View_CullingSign;
	float  View_NearPlane;
	float View_AdaptiveTessellationFactor;
	float View_GameTime;
	float View_RealTime;
	float View_DeltaTime;
	float View_MaterialTextureMipBias;
	float View_MaterialTextureDerivativeMultiply;
	uint View_Random;
	uint View_FrameNumber;
	uint View_StateFrameIndexMod8;
	uint View_StateFrameIndex;
	uint View_DebugViewModeMask;
	float  View_CameraCut;
	float  View_UnlitViewmodeMask;
	float  PrePadding_View_2312;
	float  PrePadding_View_2316;
	float4  View_DirectionalLightColor;
	float3  View_DirectionalLightDirection;
	float  PrePadding_View_2348;
	float4 View_TranslucencyLightingVolumeMin[2];
	float4 View_TranslucencyLightingVolumeInvSize[2];
	float4 View_TemporalAAParams;
	float4 View_CircleDOFParams;
	float View_DepthOfFieldSensorWidth;
	float View_DepthOfFieldFocalDistance;
	float View_DepthOfFieldScale;
	float View_DepthOfFieldFocalLength;
	float View_DepthOfFieldFocalRegion;
	float View_DepthOfFieldNearTransitionRegion;
	float View_DepthOfFieldFarTransitionRegion;
	float View_MotionBlurNormalizedToPixel;
	float View_bSubsurfacePostprocessEnabled;
	float View_GeneralPurposeTweak;
	float  View_DemosaicVposOffset;
	float  PrePadding_View_2492;
	float3 View_IndirectLightingColorScale;
	float  View_AtmosphericFogSunPower;
	float  View_AtmosphericFogPower;
	float  View_AtmosphericFogDensityScale;
	float  View_AtmosphericFogDensityOffset;
	float  View_AtmosphericFogGroundOffset;
	float  View_AtmosphericFogDistanceScale;
	float  View_AtmosphericFogAltitudeScale;
	float  View_AtmosphericFogHeightScaleRayleigh;
	float  View_AtmosphericFogStartDistance;
	float  View_AtmosphericFogDistanceOffset;
	float  View_AtmosphericFogSunDiscScale;
	float  PrePadding_View_2552;
	float  PrePadding_View_2556;
	float4 View_AtmosphereLightDirection[2];
	float4 View_AtmosphereLightColor[2];
	float4 View_AtmosphereLightColorGlobalPostTransmittance[2];
	float4 View_AtmosphereLightDiscLuminance[2];
	float4 View_AtmosphereLightDiscCosHalfApexAngle[2];
	float4 View_SkyViewLutSizeAndInvSize;
	float3 View_SkyWorldCameraOrigin;
	float PrePadding_View_2748;
	float4 View_SkyPlanetCenterAndViewHeight;
	float4 View_SkyAtmosphereSkyLuminanceFactor;
	float View_SkyAtmosphereHeightFogContribution;
	float View_SkyAtmosphereBottomRadiusKm;
	float View_SkyAtmosphereTopRadiusKm;
	float View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint View_AtmosphericFogRenderMask;
	uint View_AtmosphericFogInscatterAltitudeSampleNum;
	uint PrePadding_View_2828;
	float3 View_NormalCurvatureToRoughnessScaleBias;
	float View_RenderingReflectionCaptureMask;
	float4 View_AmbientCubemapTint;
	float View_AmbientCubemapIntensity;
	float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float View_SkyLightAffectReflectionFlag;
	float View_SkyLightAffectGlobalIlluminationFlag;
	float4 View_SkyLightColor;
	float4 View_SkyIrradianceEnvironmentMap[7];
	float View_MobilePreviewMode;
	float View_HMDEyePaddingOffset;
	float  View_ReflectionCubemapMaxMip;
	float View_ShowDecalsMask;
	uint View_DistanceFieldAOSpecularOcclusionMode;
	float View_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_View_3032;
	float PrePadding_View_3036;
	float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int View_StereoPassIndex;
	float4 View_GlobalVolumeCenterAndExtent[4];
	float4 View_GlobalVolumeWorldToUVAddAndMul[4];
	float View_GlobalVolumeDimension;
	float View_GlobalVolumeTexelSize;
	float View_MaxGlobalDistance;
	float PrePadding_View_3196;
	int2 View_CursorPosition;
	float View_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_View_3212;
	float3 View_VolumetricFogInvGridSize;
	float PrePadding_View_3228;
	float3 View_VolumetricFogGridZParams;
	float PrePadding_View_3244;
	float2 View_VolumetricFogSVPosToVolumeUV;
	float View_VolumetricFogMaxDistance;
	float PrePadding_View_3260;
	float3 View_VolumetricLightmapWorldToUVScale;
	float PrePadding_View_3276;
	float3 View_VolumetricLightmapWorldToUVAdd;
	float PrePadding_View_3292;
	float3 View_VolumetricLightmapIndirectionTextureSize;
	float View_VolumetricLightmapBrickSize;
	float3 View_VolumetricLightmapBrickTexelSize;
	float View_StereoIPD;
	float View_IndirectLightingCacheShowFlag;
	float View_EyeToPixelSpreadAngle;
	float PrePadding_View_3336;
	float PrePadding_View_3340;
	float4x4 View_WorldToVirtualTexture;
	float4 View_XRPassthroughCameraUVs[2];
	uint View_VirtualTextureFeedbackStride;
	uint PrePadding_View_3444;
	uint PrePadding_View_3448;
	uint PrePadding_View_3452;
	float4 View_RuntimeVirtualTextureMipLevel;
	float2 View_RuntimeVirtualTexturePackHeight;
	float PrePadding_View_3480;
	float PrePadding_View_3484;
	float4 View_RuntimeVirtualTextureDebugParams;
	int View_FarShadowStaticMeshLODBias;
	float View_MinRoughness;
	float PrePadding_View_3512;
	float PrePadding_View_3516;
	float4 View_HairRenderInfo;
	uint View_HairRenderInfoBits;
}
SamplerState View_MaterialTextureBilinearWrapedSampler;
SamplerState View_MaterialTextureBilinearClampedSampler;
Texture3D<uint4> View_VolumetricLightmapIndirectionTexture;
Texture3D View_VolumetricLightmapBrickAmbientVector;
Texture3D View_VolumetricLightmapBrickSHCoefficients0;
Texture3D View_VolumetricLightmapBrickSHCoefficients1;
Texture3D View_VolumetricLightmapBrickSHCoefficients2;
Texture3D View_VolumetricLightmapBrickSHCoefficients3;
Texture3D View_VolumetricLightmapBrickSHCoefficients4;
Texture3D View_VolumetricLightmapBrickSHCoefficients5;
Texture3D View_SkyBentNormalBrickTexture;
Texture3D View_DirectionalLightShadowingBrickTexture;
SamplerState View_VolumetricLightmapBrickAmbientVectorSampler;
SamplerState View_VolumetricLightmapTextureSampler0;
SamplerState View_VolumetricLightmapTextureSampler1;
SamplerState View_VolumetricLightmapTextureSampler2;
SamplerState View_VolumetricLightmapTextureSampler3;
SamplerState View_VolumetricLightmapTextureSampler4;
SamplerState View_VolumetricLightmapTextureSampler5;
SamplerState View_SkyBentNormalTextureSampler;
SamplerState View_DirectionalLightShadowingTextureSampler;
Texture3D View_GlobalDistanceFieldTexture0;
SamplerState View_GlobalDistanceFieldSampler0;
Texture3D View_GlobalDistanceFieldTexture1;
SamplerState View_GlobalDistanceFieldSampler1;
Texture3D View_GlobalDistanceFieldTexture2;
SamplerState View_GlobalDistanceFieldSampler2;
Texture3D View_GlobalDistanceFieldTexture3;
SamplerState View_GlobalDistanceFieldSampler3;
Texture2D View_AtmosphereTransmittanceTexture;
SamplerState View_AtmosphereTransmittanceTextureSampler;
Texture2D View_AtmosphereIrradianceTexture;
SamplerState View_AtmosphereIrradianceTextureSampler;
Texture3D View_AtmosphereInscatterTexture;
SamplerState View_AtmosphereInscatterTextureSampler;
Texture2D View_PerlinNoiseGradientTexture;
SamplerState View_PerlinNoiseGradientTextureSampler;
Texture3D View_PerlinNoise3DTexture;
SamplerState View_PerlinNoise3DTextureSampler;
Texture2D<uint> View_SobolSamplingTexture;
SamplerState View_SharedPointWrappedSampler;
SamplerState View_SharedPointClampedSampler;
SamplerState View_SharedBilinearWrappedSampler;
SamplerState View_SharedBilinearClampedSampler;
SamplerState View_SharedTrilinearWrappedSampler;
SamplerState View_SharedTrilinearClampedSampler;
Texture2D View_PreIntegratedBRDF;
SamplerState View_PreIntegratedBRDFSampler;
StructuredBuffer<float4> View_PrimitiveSceneData;
Texture2D<float4> View_PrimitiveSceneDataTexture;
StructuredBuffer<float4> View_LightmapSceneData;
Texture2D View_TransmittanceLutTexture;
SamplerState View_TransmittanceLutTextureSampler;
Texture2D View_SkyViewLutTexture;
SamplerState View_SkyViewLutTextureSampler;
Texture2D View_DistantSkyLightLutTexture;
SamplerState View_DistantSkyLightLutTextureSampler;
Texture3D View_CameraAerialPerspectiveVolume;
SamplerState View_CameraAerialPerspectiveVolumeSampler;
RWBuffer<uint> View_VTFeedbackBuffer;
RWTexture2D<uint> View_QuadOverdraw;
/*atic const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 WorldToClip;
	float4x4 ClipToWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3  ViewForward;
	float3  ViewUp;
	float3  ViewRight;
	float3  HMDViewNoRollUp;
	float3  HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4  ScreenPositionScaleBias;
	float3 WorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOrigin;
	float3 PreViewTranslation;
	float4x4 PrevProjection;
	float4x4 PrevViewProj;
	float4x4 PrevViewRotationProj;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevWorldCameraOrigin;
	float3 PrevWorldViewOrigin;
	float3 PrevPreViewTranslation;
	float4x4 PrevInvViewProj;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4  ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float  PreExposure;
	float  OneOverPreExposure;
	float4  DiffuseOverrideParameter;
	float4  SpecularOverrideParameter;
	float4  NormalOverrideParameter;
	float2  RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float  OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float  NearPlane;
	float AdaptiveTessellationFactor;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float  CameraCut;
	float  UnlitViewmodeMask;
	float4  DirectionalLightColor;
	float3  DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float bSubsurfacePostprocessEnabled;
	float GeneralPurposeTweak;
	float  DemosaicVposOffset;
	float3 IndirectLightingColorScale;
	float  AtmosphericFogSunPower;
	float  AtmosphericFogPower;
	float  AtmosphericFogDensityScale;
	float  AtmosphericFogDensityOffset;
	float  AtmosphericFogGroundOffset;
	float  AtmosphericFogDistanceScale;
	float  AtmosphericFogAltitudeScale;
	float  AtmosphericFogHeightScaleRayleigh;
	float  AtmosphericFogStartDistance;
	float  AtmosphericFogDistanceOffset;
	float  AtmosphericFogSunDiscScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightColor[2];
	float4 AtmosphereLightColorGlobalPostTransmittance[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyWorldCameraOrigin;
	float4 SkyPlanetCenterAndViewHeight;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint AtmosphericFogRenderMask;
	uint AtmosphericFogInscatterAltitudeSampleNum;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 SkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float  ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[4];
	float4 GlobalVolumeWorldToUVAddAndMul[4];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDistance;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4x4 WorldToVirtualTexture;
	float4 XRPassthroughCameraUVs[2];
	uint VirtualTextureFeedbackStride;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint HairRenderInfoBits;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldTexture0;
	SamplerState GlobalDistanceFieldSampler0;
	Texture3D GlobalDistanceFieldTexture1;
	SamplerState GlobalDistanceFieldSampler1;
	Texture3D GlobalDistanceFieldTexture2;
	SamplerState GlobalDistanceFieldSampler2;
	Texture3D GlobalDistanceFieldTexture3;
	SamplerState GlobalDistanceFieldSampler3;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> PrimitiveSceneData;
	Texture2D<float4> PrimitiveSceneDataTexture;
	StructuredBuffer<float4> LightmapSceneData;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
	RWBuffer<uint> VTFeedbackBuffer;
	RWTexture2D<uint> QuadOverdraw;
} View = {View_TranslatedWorldToClip,View_WorldToClip,View_ClipToWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_WorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_WorldViewOrigin,View_PreViewTranslation,View_PrevProjection,View_PrevViewProj,View_PrevViewRotationProj,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevWorldCameraOrigin,View_PrevWorldViewOrigin,View_PrevPreViewTranslation,View_PrevInvViewProj,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_NumSceneColorMSAASamples,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_AdaptiveTessellationFactor,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_StateFrameIndexMod8,View_StateFrameIndex,View_DebugViewModeMask,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_bSubsurfacePostprocessEnabled,View_GeneralPurposeTweak,View_DemosaicVposOffset,View_IndirectLightingColorScale,View_AtmosphericFogSunPower,View_AtmosphericFogPower,View_AtmosphericFogDensityScale,View_AtmosphericFogDensityOffset,View_AtmosphericFogGroundOffset,View_AtmosphericFogDistanceScale,View_AtmosphericFogAltitudeScale,View_AtmosphericFogHeightScaleRayleigh,View_AtmosphericFogStartDistance,View_AtmosphericFogDistanceOffset,View_AtmosphericFogSunDiscScale,View_AtmosphereLightDirection,View_AtmosphereLightColor,View_AtmosphereLightColorGlobalPostTransmittance,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle,View_SkyViewLutSizeAndInvSize,View_SkyWorldCameraOrigin,View_SkyPlanetCenterAndViewHeight,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadiusKm,View_SkyAtmosphereTopRadiusKm,View_SkyAtmosphereAerialPerspectiveStartDepthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_AtmosphericFogRenderMask,View_AtmosphericFogInscatterAltitudeSampleNum,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_SkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeCenterAndExtent,View_GlobalVolumeWorldToUVAddAndMul,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDistance,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_StereoIPD,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_WorldToVirtualTexture,View_XRPassthroughCameraUVs,View_VirtualTextureFeedbackStride,View_RuntimeVirtualTextureMipLevel,View_RuntimeVirtualTexturePackHeight,View_RuntimeVirtualTextureDebugParams,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_HairRenderInfo,View_HairRenderInfoBits,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldTexture0,View_GlobalDistanceFieldSampler0,View_GlobalDistanceFieldTexture1,View_GlobalDistanceFieldSampler1,View_GlobalDistanceFieldTexture2,View_GlobalDistanceFieldSampler2,View_GlobalDistanceFieldTexture3,View_GlobalDistanceFieldSampler3,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,  View_PrimitiveSceneData,  View_PrimitiveSceneDataTexture,  View_LightmapSceneData,  View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,View_VTFeedbackBuffer,View_QuadOverdraw,*/
#line 2 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"


cbuffer DrawRectangleParameters
{
	float4 DrawRectangleParameters_PosScaleBias;
	float4 DrawRectangleParameters_UVScaleBias;
	float4 DrawRectangleParameters_InvTargetSizeAndTextureSize;
}
/*atic const struct
{
	float4 PosScaleBias;
	float4 UVScaleBias;
	float4 InvTargetSizeAndTextureSize;
} DrawRectangleParameters = {DrawRectangleParameters_PosScaleBias,DrawRectangleParameters_UVScaleBias,DrawRectangleParameters_InvTargetSizeAndTextureSize,*/
#line 3 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"


cbuffer InstancedView
{
	float4x4 InstancedView_TranslatedWorldToClip;
	float4x4 InstancedView_WorldToClip;
	float4x4 InstancedView_ClipToWorld;
	float4x4 InstancedView_TranslatedWorldToView;
	float4x4 InstancedView_ViewToTranslatedWorld;
	float4x4 InstancedView_TranslatedWorldToCameraView;
	float4x4 InstancedView_CameraViewToTranslatedWorld;
	float4x4 InstancedView_ViewToClip;
	float4x4 InstancedView_ViewToClipNoAA;
	float4x4 InstancedView_ClipToView;
	float4x4 InstancedView_ClipToTranslatedWorld;
	float4x4 InstancedView_SVPositionToTranslatedWorld;
	float4x4 InstancedView_ScreenToWorld;
	float4x4 InstancedView_ScreenToTranslatedWorld;
	float4x4 InstancedView_MobileMultiviewShadowTransform;
	float3  InstancedView_ViewForward;
	float  PrePadding_InstancedView_972;
	float3  InstancedView_ViewUp;
	float  PrePadding_InstancedView_988;
	float3  InstancedView_ViewRight;
	float  PrePadding_InstancedView_1004;
	float3  InstancedView_HMDViewNoRollUp;
	float  PrePadding_InstancedView_1020;
	float3  InstancedView_HMDViewNoRollRight;
	float  PrePadding_InstancedView_1036;
	float4 InstancedView_InvDeviceZToWorldZTransform;
	float4  InstancedView_ScreenPositionScaleBias;
	float3 InstancedView_WorldCameraOrigin;
	float PrePadding_InstancedView_1084;
	float3 InstancedView_TranslatedWorldCameraOrigin;
	float PrePadding_InstancedView_1100;
	float3 InstancedView_WorldViewOrigin;
	float PrePadding_InstancedView_1116;
	float3 InstancedView_PreViewTranslation;
	float PrePadding_InstancedView_1132;
	float4x4 InstancedView_PrevProjection;
	float4x4 InstancedView_PrevViewProj;
	float4x4 InstancedView_PrevViewRotationProj;
	float4x4 InstancedView_PrevViewToClip;
	float4x4 InstancedView_PrevClipToView;
	float4x4 InstancedView_PrevTranslatedWorldToClip;
	float4x4 InstancedView_PrevTranslatedWorldToView;
	float4x4 InstancedView_PrevViewToTranslatedWorld;
	float4x4 InstancedView_PrevTranslatedWorldToCameraView;
	float4x4 InstancedView_PrevCameraViewToTranslatedWorld;
	float3 InstancedView_PrevWorldCameraOrigin;
	float PrePadding_InstancedView_1788;
	float3 InstancedView_PrevWorldViewOrigin;
	float PrePadding_InstancedView_1804;
	float3 InstancedView_PrevPreViewTranslation;
	float PrePadding_InstancedView_1820;
	float4x4 InstancedView_PrevInvViewProj;
	float4x4 InstancedView_PrevScreenToTranslatedWorld;
	float4x4 InstancedView_ClipToPrevClip;
	float4 InstancedView_TemporalAAJitter;
	float4 InstancedView_GlobalClippingPlane;
	float2 InstancedView_FieldOfViewWideAngles;
	float2 InstancedView_PrevFieldOfViewWideAngles;
	float4  InstancedView_ViewRectMin;
	float4 InstancedView_ViewSizeAndInvSize;
	float4 InstancedView_BufferSizeAndInvSize;
	float4 InstancedView_BufferBilinearUVMinMax;
	float4 InstancedView_ScreenToViewSpace;
	int InstancedView_NumSceneColorMSAASamples;
	float  InstancedView_PreExposure;
	float  InstancedView_OneOverPreExposure;
	float  PrePadding_InstancedView_2156;
	float4  InstancedView_DiffuseOverrideParameter;
	float4  InstancedView_SpecularOverrideParameter;
	float4  InstancedView_NormalOverrideParameter;
	float2  InstancedView_RoughnessOverrideParameter;
	float InstancedView_PrevFrameGameTime;
	float InstancedView_PrevFrameRealTime;
	float  InstancedView_OutOfBoundsMask;
	float  PrePadding_InstancedView_2228;
	float  PrePadding_InstancedView_2232;
	float  PrePadding_InstancedView_2236;
	float3 InstancedView_WorldCameraMovementSinceLastFrame;
	float InstancedView_CullingSign;
	float  InstancedView_NearPlane;
	float InstancedView_AdaptiveTessellationFactor;
	float InstancedView_GameTime;
	float InstancedView_RealTime;
	float InstancedView_DeltaTime;
	float InstancedView_MaterialTextureMipBias;
	float InstancedView_MaterialTextureDerivativeMultiply;
	uint InstancedView_Random;
	uint InstancedView_FrameNumber;
	uint InstancedView_StateFrameIndexMod8;
	uint InstancedView_StateFrameIndex;
	uint InstancedView_DebugViewModeMask;
	float  InstancedView_CameraCut;
	float  InstancedView_UnlitViewmodeMask;
	float  PrePadding_InstancedView_2312;
	float  PrePadding_InstancedView_2316;
	float4  InstancedView_DirectionalLightColor;
	float3  InstancedView_DirectionalLightDirection;
	float  PrePadding_InstancedView_2348;
	float4 InstancedView_TranslucencyLightingVolumeMin[2];
	float4 InstancedView_TranslucencyLightingVolumeInvSize[2];
	float4 InstancedView_TemporalAAParams;
	float4 InstancedView_CircleDOFParams;
	float InstancedView_DepthOfFieldSensorWidth;
	float InstancedView_DepthOfFieldFocalDistance;
	float InstancedView_DepthOfFieldScale;
	float InstancedView_DepthOfFieldFocalLength;
	float InstancedView_DepthOfFieldFocalRegion;
	float InstancedView_DepthOfFieldNearTransitionRegion;
	float InstancedView_DepthOfFieldFarTransitionRegion;
	float InstancedView_MotionBlurNormalizedToPixel;
	float InstancedView_bSubsurfacePostprocessEnabled;
	float InstancedView_GeneralPurposeTweak;
	float  InstancedView_DemosaicVposOffset;
	float  PrePadding_InstancedView_2492;
	float3 InstancedView_IndirectLightingColorScale;
	float  InstancedView_AtmosphericFogSunPower;
	float  InstancedView_AtmosphericFogPower;
	float  InstancedView_AtmosphericFogDensityScale;
	float  InstancedView_AtmosphericFogDensityOffset;
	float  InstancedView_AtmosphericFogGroundOffset;
	float  InstancedView_AtmosphericFogDistanceScale;
	float  InstancedView_AtmosphericFogAltitudeScale;
	float  InstancedView_AtmosphericFogHeightScaleRayleigh;
	float  InstancedView_AtmosphericFogStartDistance;
	float  InstancedView_AtmosphericFogDistanceOffset;
	float  InstancedView_AtmosphericFogSunDiscScale;
	float  PrePadding_InstancedView_2552;
	float  PrePadding_InstancedView_2556;
	float4 InstancedView_AtmosphereLightDirection[2];
	float4 InstancedView_AtmosphereLightColor[2];
	float4 InstancedView_AtmosphereLightColorGlobalPostTransmittance[2];
	float4 InstancedView_AtmosphereLightDiscLuminance[2];
	float4 InstancedView_AtmosphereLightDiscCosHalfApexAngle[2];
	float4 InstancedView_SkyViewLutSizeAndInvSize;
	float3 InstancedView_SkyWorldCameraOrigin;
	float PrePadding_InstancedView_2748;
	float4 InstancedView_SkyPlanetCenterAndViewHeight;
	float4 InstancedView_SkyAtmosphereSkyLuminanceFactor;
	float InstancedView_SkyAtmosphereHeightFogContribution;
	float InstancedView_SkyAtmosphereBottomRadiusKm;
	float InstancedView_SkyAtmosphereTopRadiusKm;
	float InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint InstancedView_AtmosphericFogRenderMask;
	uint InstancedView_AtmosphericFogInscatterAltitudeSampleNum;
	uint PrePadding_InstancedView_2828;
	float3 InstancedView_NormalCurvatureToRoughnessScaleBias;
	float InstancedView_RenderingReflectionCaptureMask;
	float4 InstancedView_AmbientCubemapTint;
	float InstancedView_AmbientCubemapIntensity;
	float InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float InstancedView_SkyLightAffectReflectionFlag;
	float InstancedView_SkyLightAffectGlobalIlluminationFlag;
	float4 InstancedView_SkyLightColor;
	float4 InstancedView_SkyIrradianceEnvironmentMap[7];
	float InstancedView_MobilePreviewMode;
	float InstancedView_HMDEyePaddingOffset;
	float  InstancedView_ReflectionCubemapMaxMip;
	float InstancedView_ShowDecalsMask;
	uint InstancedView_DistanceFieldAOSpecularOcclusionMode;
	float InstancedView_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_InstancedView_3032;
	float PrePadding_InstancedView_3036;
	float3 InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int InstancedView_StereoPassIndex;
	float4 InstancedView_GlobalVolumeCenterAndExtent[4];
	float4 InstancedView_GlobalVolumeWorldToUVAddAndMul[4];
	float InstancedView_GlobalVolumeDimension;
	float InstancedView_GlobalVolumeTexelSize;
	float InstancedView_MaxGlobalDistance;
	float PrePadding_InstancedView_3196;
	int2 InstancedView_CursorPosition;
	float InstancedView_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_InstancedView_3212;
	float3 InstancedView_VolumetricFogInvGridSize;
	float PrePadding_InstancedView_3228;
	float3 InstancedView_VolumetricFogGridZParams;
	float PrePadding_InstancedView_3244;
	float2 InstancedView_VolumetricFogSVPosToVolumeUV;
	float InstancedView_VolumetricFogMaxDistance;
	float PrePadding_InstancedView_3260;
	float3 InstancedView_VolumetricLightmapWorldToUVScale;
	float PrePadding_InstancedView_3276;
	float3 InstancedView_VolumetricLightmapWorldToUVAdd;
	float PrePadding_InstancedView_3292;
	float3 InstancedView_VolumetricLightmapIndirectionTextureSize;
	float InstancedView_VolumetricLightmapBrickSize;
	float3 InstancedView_VolumetricLightmapBrickTexelSize;
	float InstancedView_StereoIPD;
	float InstancedView_IndirectLightingCacheShowFlag;
	float InstancedView_EyeToPixelSpreadAngle;
	float PrePadding_InstancedView_3336;
	float PrePadding_InstancedView_3340;
	float4x4 InstancedView_WorldToVirtualTexture;
	float4 InstancedView_XRPassthroughCameraUVs[2];
	uint InstancedView_VirtualTextureFeedbackStride;
	uint PrePadding_InstancedView_3444;
	uint PrePadding_InstancedView_3448;
	uint PrePadding_InstancedView_3452;
	float4 InstancedView_RuntimeVirtualTextureMipLevel;
	float2 InstancedView_RuntimeVirtualTexturePackHeight;
	float PrePadding_InstancedView_3480;
	float PrePadding_InstancedView_3484;
	float4 InstancedView_RuntimeVirtualTextureDebugParams;
	int InstancedView_FarShadowStaticMeshLODBias;
	float InstancedView_MinRoughness;
	float PrePadding_InstancedView_3512;
	float PrePadding_InstancedView_3516;
	float4 InstancedView_HairRenderInfo;
	uint InstancedView_HairRenderInfoBits;
}
/*atic const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 WorldToClip;
	float4x4 ClipToWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3  ViewForward;
	float3  ViewUp;
	float3  ViewRight;
	float3  HMDViewNoRollUp;
	float3  HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4  ScreenPositionScaleBias;
	float3 WorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOrigin;
	float3 PreViewTranslation;
	float4x4 PrevProjection;
	float4x4 PrevViewProj;
	float4x4 PrevViewRotationProj;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevWorldCameraOrigin;
	float3 PrevWorldViewOrigin;
	float3 PrevPreViewTranslation;
	float4x4 PrevInvViewProj;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4  ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float  PreExposure;
	float  OneOverPreExposure;
	float4  DiffuseOverrideParameter;
	float4  SpecularOverrideParameter;
	float4  NormalOverrideParameter;
	float2  RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float  OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float  NearPlane;
	float AdaptiveTessellationFactor;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float  CameraCut;
	float  UnlitViewmodeMask;
	float4  DirectionalLightColor;
	float3  DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float bSubsurfacePostprocessEnabled;
	float GeneralPurposeTweak;
	float  DemosaicVposOffset;
	float3 IndirectLightingColorScale;
	float  AtmosphericFogSunPower;
	float  AtmosphericFogPower;
	float  AtmosphericFogDensityScale;
	float  AtmosphericFogDensityOffset;
	float  AtmosphericFogGroundOffset;
	float  AtmosphericFogDistanceScale;
	float  AtmosphericFogAltitudeScale;
	float  AtmosphericFogHeightScaleRayleigh;
	float  AtmosphericFogStartDistance;
	float  AtmosphericFogDistanceOffset;
	float  AtmosphericFogSunDiscScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightColor[2];
	float4 AtmosphereLightColorGlobalPostTransmittance[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyWorldCameraOrigin;
	float4 SkyPlanetCenterAndViewHeight;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint AtmosphericFogRenderMask;
	uint AtmosphericFogInscatterAltitudeSampleNum;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 SkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float  ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[4];
	float4 GlobalVolumeWorldToUVAddAndMul[4];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDistance;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4x4 WorldToVirtualTexture;
	float4 XRPassthroughCameraUVs[2];
	uint VirtualTextureFeedbackStride;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint HairRenderInfoBits;
} InstancedView = {InstancedView_TranslatedWorldToClip,InstancedView_WorldToClip,InstancedView_ClipToWorld,InstancedView_TranslatedWorldToView,InstancedView_ViewToTranslatedWorld,InstancedView_TranslatedWorldToCameraView,InstancedView_CameraViewToTranslatedWorld,InstancedView_ViewToClip,InstancedView_ViewToClipNoAA,InstancedView_ClipToView,InstancedView_ClipToTranslatedWorld,InstancedView_SVPositionToTranslatedWorld,InstancedView_ScreenToWorld,InstancedView_ScreenToTranslatedWorld,InstancedView_MobileMultiviewShadowTransform,InstancedView_ViewForward,InstancedView_ViewUp,InstancedView_ViewRight,InstancedView_HMDViewNoRollUp,InstancedView_HMDViewNoRollRight,InstancedView_InvDeviceZToWorldZTransform,InstancedView_ScreenPositionScaleBias,InstancedView_WorldCameraOrigin,InstancedView_TranslatedWorldCameraOrigin,InstancedView_WorldViewOrigin,InstancedView_PreViewTranslation,InstancedView_PrevProjection,InstancedView_PrevViewProj,InstancedView_PrevViewRotationProj,InstancedView_PrevViewToClip,InstancedView_PrevClipToView,InstancedView_PrevTranslatedWorldToClip,InstancedView_PrevTranslatedWorldToView,InstancedView_PrevViewToTranslatedWorld,InstancedView_PrevTranslatedWorldToCameraView,InstancedView_PrevCameraViewToTranslatedWorld,InstancedView_PrevWorldCameraOrigin,InstancedView_PrevWorldViewOrigin,InstancedView_PrevPreViewTranslation,InstancedView_PrevInvViewProj,InstancedView_PrevScreenToTranslatedWorld,InstancedView_ClipToPrevClip,InstancedView_TemporalAAJitter,InstancedView_GlobalClippingPlane,InstancedView_FieldOfViewWideAngles,InstancedView_PrevFieldOfViewWideAngles,InstancedView_ViewRectMin,InstancedView_ViewSizeAndInvSize,InstancedView_BufferSizeAndInvSize,InstancedView_BufferBilinearUVMinMax,InstancedView_ScreenToViewSpace,InstancedView_NumSceneColorMSAASamples,InstancedView_PreExposure,InstancedView_OneOverPreExposure,InstancedView_DiffuseOverrideParameter,InstancedView_SpecularOverrideParameter,InstancedView_NormalOverrideParameter,InstancedView_RoughnessOverrideParameter,InstancedView_PrevFrameGameTime,InstancedView_PrevFrameRealTime,InstancedView_OutOfBoundsMask,InstancedView_WorldCameraMovementSinceLastFrame,InstancedView_CullingSign,InstancedView_NearPlane,InstancedView_AdaptiveTessellationFactor,InstancedView_GameTime,InstancedView_RealTime,InstancedView_DeltaTime,InstancedView_MaterialTextureMipBias,InstancedView_MaterialTextureDerivativeMultiply,InstancedView_Random,InstancedView_FrameNumber,InstancedView_StateFrameIndexMod8,InstancedView_StateFrameIndex,InstancedView_DebugViewModeMask,InstancedView_CameraCut,InstancedView_UnlitViewmodeMask,InstancedView_DirectionalLightColor,InstancedView_DirectionalLightDirection,InstancedView_TranslucencyLightingVolumeMin,InstancedView_TranslucencyLightingVolumeInvSize,InstancedView_TemporalAAParams,InstancedView_CircleDOFParams,InstancedView_DepthOfFieldSensorWidth,InstancedView_DepthOfFieldFocalDistance,InstancedView_DepthOfFieldScale,InstancedView_DepthOfFieldFocalLength,InstancedView_DepthOfFieldFocalRegion,InstancedView_DepthOfFieldNearTransitionRegion,InstancedView_DepthOfFieldFarTransitionRegion,InstancedView_MotionBlurNormalizedToPixel,InstancedView_bSubsurfacePostprocessEnabled,InstancedView_GeneralPurposeTweak,InstancedView_DemosaicVposOffset,InstancedView_IndirectLightingColorScale,InstancedView_AtmosphericFogSunPower,InstancedView_AtmosphericFogPower,InstancedView_AtmosphericFogDensityScale,InstancedView_AtmosphericFogDensityOffset,InstancedView_AtmosphericFogGroundOffset,InstancedView_AtmosphericFogDistanceScale,InstancedView_AtmosphericFogAltitudeScale,InstancedView_AtmosphericFogHeightScaleRayleigh,InstancedView_AtmosphericFogStartDistance,InstancedView_AtmosphericFogDistanceOffset,InstancedView_AtmosphericFogSunDiscScale,InstancedView_AtmosphereLightDirection,InstancedView_AtmosphereLightColor,InstancedView_AtmosphereLightColorGlobalPostTransmittance,InstancedView_AtmosphereLightDiscLuminance,InstancedView_AtmosphereLightDiscCosHalfApexAngle,InstancedView_SkyViewLutSizeAndInvSize,InstancedView_SkyWorldCameraOrigin,InstancedView_SkyPlanetCenterAndViewHeight,InstancedView_SkyAtmosphereSkyLuminanceFactor,InstancedView_SkyAtmosphereHeightFogContribution,InstancedView_SkyAtmosphereBottomRadiusKm,InstancedView_SkyAtmosphereTopRadiusKm,InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume,InstancedView_AtmosphericFogRenderMask,InstancedView_AtmosphericFogInscatterAltitudeSampleNum,InstancedView_NormalCurvatureToRoughnessScaleBias,InstancedView_RenderingReflectionCaptureMask,InstancedView_AmbientCubemapTint,InstancedView_AmbientCubemapIntensity,InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag,InstancedView_SkyLightAffectReflectionFlag,InstancedView_SkyLightAffectGlobalIlluminationFlag,InstancedView_SkyLightColor,InstancedView_SkyIrradianceEnvironmentMap,InstancedView_MobilePreviewMode,InstancedView_HMDEyePaddingOffset,InstancedView_ReflectionCubemapMaxMip,InstancedView_ShowDecalsMask,InstancedView_DistanceFieldAOSpecularOcclusionMode,InstancedView_IndirectCapsuleSelfShadowingIntensity,InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,InstancedView_StereoPassIndex,InstancedView_GlobalVolumeCenterAndExtent,InstancedView_GlobalVolumeWorldToUVAddAndMul,InstancedView_GlobalVolumeDimension,InstancedView_GlobalVolumeTexelSize,InstancedView_MaxGlobalDistance,InstancedView_CursorPosition,InstancedView_bCheckerboardSubsurfaceProfileRendering,InstancedView_VolumetricFogInvGridSize,InstancedView_VolumetricFogGridZParams,InstancedView_VolumetricFogSVPosToVolumeUV,InstancedView_VolumetricFogMaxDistance,InstancedView_VolumetricLightmapWorldToUVScale,InstancedView_VolumetricLightmapWorldToUVAdd,InstancedView_VolumetricLightmapIndirectionTextureSize,InstancedView_VolumetricLightmapBrickSize,InstancedView_VolumetricLightmapBrickTexelSize,InstancedView_StereoIPD,InstancedView_IndirectLightingCacheShowFlag,InstancedView_EyeToPixelSpreadAngle,InstancedView_WorldToVirtualTexture,InstancedView_XRPassthroughCameraUVs,InstancedView_VirtualTextureFeedbackStride,InstancedView_RuntimeVirtualTextureMipLevel,InstancedView_RuntimeVirtualTexturePackHeight,InstancedView_RuntimeVirtualTextureDebugParams,InstancedView_FarShadowStaticMeshLODBias,InstancedView_MinRoughness,InstancedView_HairRenderInfo,InstancedView_HairRenderInfoBits,*/
#line 4 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"


cbuffer MobileSceneTextures
{
}
Texture2D MobileSceneTextures_SceneColorTexture;
SamplerState MobileSceneTextures_SceneColorTextureSampler;
Texture2D MobileSceneTextures_SceneDepthTexture;
SamplerState MobileSceneTextures_SceneDepthTextureSampler;
Texture2D MobileSceneTextures_SceneAlphaCopyTexture;
SamplerState MobileSceneTextures_SceneAlphaCopyTextureSampler;
Texture2D MobileSceneTextures_CustomDepthTexture;
SamplerState MobileSceneTextures_CustomDepthTextureSampler;
Texture2D MobileSceneTextures_MobileCustomStencilTexture;
SamplerState MobileSceneTextures_MobileCustomStencilTextureSampler;
RWBuffer<uint> MobileSceneTextures_VirtualTextureFeedbackUAV;
Buffer<float4> MobileSceneTextures_EyeAdaptationBuffer;
/*atic const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D SceneAlphaCopyTexture;
	SamplerState SceneAlphaCopyTextureSampler;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D MobileCustomStencilTexture;
	SamplerState MobileCustomStencilTextureSampler;
	RWBuffer<uint> VirtualTextureFeedbackUAV;
	Buffer<float4> EyeAdaptationBuffer;
} MobileSceneTextures = {MobileSceneTextures_SceneColorTexture,MobileSceneTextures_SceneColorTextureSampler,MobileSceneTextures_SceneDepthTexture,MobileSceneTextures_SceneDepthTextureSampler,MobileSceneTextures_SceneAlphaCopyTexture,MobileSceneTextures_SceneAlphaCopyTextureSampler,MobileSceneTextures_CustomDepthTexture,MobileSceneTextures_CustomDepthTextureSampler,MobileSceneTextures_MobileCustomStencilTexture,MobileSceneTextures_MobileCustomStencilTextureSampler,MobileSceneTextures_VirtualTextureFeedbackUAV,  MobileSceneTextures_EyeAdaptationBuffer,  */
#line 5 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"


cbuffer SceneTexturesStruct
{
}
Texture2D SceneTexturesStruct_SceneColorTexture;
SamplerState SceneTexturesStruct_SceneColorTextureSampler;
Texture2D SceneTexturesStruct_SceneDepthTexture;
SamplerState SceneTexturesStruct_SceneDepthTextureSampler;
Texture2D<float> SceneTexturesStruct_SceneDepthTextureNonMS;
Texture2D SceneTexturesStruct_GBufferATexture;
Texture2D SceneTexturesStruct_GBufferBTexture;
Texture2D SceneTexturesStruct_GBufferCTexture;
Texture2D SceneTexturesStruct_GBufferDTexture;
Texture2D SceneTexturesStruct_GBufferETexture;
Texture2D SceneTexturesStruct_GBufferFTexture;
Texture2D SceneTexturesStruct_GBufferVelocityTexture;
Texture2D<float4> SceneTexturesStruct_GBufferATextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferBTextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferCTextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferDTextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferETextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferFTextureNonMS;
Texture2D<float4> SceneTexturesStruct_GBufferVelocityTextureNonMS;
SamplerState SceneTexturesStruct_GBufferATextureSampler;
SamplerState SceneTexturesStruct_GBufferBTextureSampler;
SamplerState SceneTexturesStruct_GBufferCTextureSampler;
SamplerState SceneTexturesStruct_GBufferDTextureSampler;
SamplerState SceneTexturesStruct_GBufferETextureSampler;
SamplerState SceneTexturesStruct_GBufferFTextureSampler;
SamplerState SceneTexturesStruct_GBufferVelocityTextureSampler;
Texture2D SceneTexturesStruct_ScreenSpaceAOTexture;
SamplerState SceneTexturesStruct_ScreenSpaceAOTextureSampler;
Texture2D<float> SceneTexturesStruct_CustomDepthTextureNonMS;
Texture2D SceneTexturesStruct_CustomDepthTexture;
SamplerState SceneTexturesStruct_CustomDepthTextureSampler;
Texture2D<uint2> SceneTexturesStruct_CustomStencilTexture;
Texture2D<uint2> SceneTexturesStruct_SceneStencilTexture;
Texture2D SceneTexturesStruct_EyeAdaptation;
Texture2D SceneTexturesStruct_SceneColorCopyTexture;
SamplerState SceneTexturesStruct_SceneColorCopyTextureSampler;
/*atic const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D<float> SceneDepthTextureNonMS;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferFTexture;
	Texture2D GBufferVelocityTexture;
	Texture2D<float4> GBufferATextureNonMS;
	Texture2D<float4> GBufferBTextureNonMS;
	Texture2D<float4> GBufferCTextureNonMS;
	Texture2D<float4> GBufferDTextureNonMS;
	Texture2D<float4> GBufferETextureNonMS;
	Texture2D<float4> GBufferFTextureNonMS;
	Texture2D<float4> GBufferVelocityTextureNonMS;
	SamplerState GBufferATextureSampler;
	SamplerState GBufferBTextureSampler;
	SamplerState GBufferCTextureSampler;
	SamplerState GBufferDTextureSampler;
	SamplerState GBufferETextureSampler;
	SamplerState GBufferFTextureSampler;
	SamplerState GBufferVelocityTextureSampler;
	Texture2D ScreenSpaceAOTexture;
	SamplerState ScreenSpaceAOTextureSampler;
	Texture2D<float> CustomDepthTextureNonMS;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D<uint2> CustomStencilTexture;
	Texture2D<uint2> SceneStencilTexture;
	Texture2D EyeAdaptation;
	Texture2D SceneColorCopyTexture;
	SamplerState SceneColorCopyTextureSampler;
} SceneTexturesStruct = {SceneTexturesStruct_SceneColorTexture,SceneTexturesStruct_SceneColorTextureSampler,SceneTexturesStruct_SceneDepthTexture,SceneTexturesStruct_SceneDepthTextureSampler,SceneTexturesStruct_SceneDepthTextureNonMS,SceneTexturesStruct_GBufferATexture,SceneTexturesStruct_GBufferBTexture,SceneTexturesStruct_GBufferCTexture,SceneTexturesStruct_GBufferDTexture,SceneTexturesStruct_GBufferETexture,SceneTexturesStruct_GBufferFTexture,SceneTexturesStruct_GBufferVelocityTexture,SceneTexturesStruct_GBufferATextureNonMS,SceneTexturesStruct_GBufferBTextureNonMS,SceneTexturesStruct_GBufferCTextureNonMS,SceneTexturesStruct_GBufferDTextureNonMS,SceneTexturesStruct_GBufferETextureNonMS,SceneTexturesStruct_GBufferFTextureNonMS,SceneTexturesStruct_GBufferVelocityTextureNonMS,SceneTexturesStruct_GBufferATextureSampler,SceneTexturesStruct_GBufferBTextureSampler,SceneTexturesStruct_GBufferCTextureSampler,SceneTexturesStruct_GBufferDTextureSampler,SceneTexturesStruct_GBufferETextureSampler,SceneTexturesStruct_GBufferFTextureSampler,SceneTexturesStruct_GBufferVelocityTextureSampler,SceneTexturesStruct_ScreenSpaceAOTexture,SceneTexturesStruct_ScreenSpaceAOTextureSampler,SceneTexturesStruct_CustomDepthTextureNonMS,SceneTexturesStruct_CustomDepthTexture,SceneTexturesStruct_CustomDepthTextureSampler,  SceneTexturesStruct_CustomStencilTexture,   SceneTexturesStruct_SceneStencilTexture,  SceneTexturesStruct_EyeAdaptation,SceneTexturesStruct_SceneColorCopyTexture,SceneTexturesStruct_SceneColorCopyTextureSampler,*/
#line 6 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 7 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"
#line 8 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 9 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"
#line 10 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"
#line 11 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 62 "/Engine/Private/Common.ush"
#line 64 "/Engine/Private/Common.ush"
#line 1 "CommonViewUniformBuffer.ush"
#line 12 "/Engine/Private/CommonViewUniformBuffer.ush"
float2 GetTanHalfFieldOfView()
{
	return float2(View_ClipToView[0][0], View_ClipToView[1][1]);
}

float2 GetPrevTanHalfFieldOfView()
{
	return float2(View_PrevClipToView[0][0], View_PrevClipToView[1][1]);
}



float2 GetCotanHalfFieldOfView()
{
	return float2(View_ViewToClip[0][0], View_ViewToClip[1][1]);
}



float2 GetPrevCotanHalfFieldOfView()
{
	return float2(View_PrevViewToClip[0][0], View_PrevViewToClip[1][1]);
}


uint GetPowerOfTwoModulatedFrameIndex(uint Pow2Modulus)
{

	return View_StateFrameIndex & uint(Pow2Modulus - 1);
}
#line 65 "/Engine/Private/Common.ush"
#line 66 "/Engine/Private/Common.ush"
#line 1 "InstancedStereo.ush"
#line 10 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 11 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 12 "/Engine/Private/InstancedStereo.ush"
#line 15 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 WorldToClip;
	float4x4 ClipToWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3  ViewForward;
	float3  ViewUp;
	float3  ViewRight;
	float3  HMDViewNoRollUp;
	float3  HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4  ScreenPositionScaleBias;
	float3 WorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOrigin;
	float3 PreViewTranslation;
	float4x4 PrevProjection;
	float4x4 PrevViewProj;
	float4x4 PrevViewRotationProj;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevWorldCameraOrigin;
	float3 PrevWorldViewOrigin;
	float3 PrevPreViewTranslation;
	float4x4 PrevInvViewProj;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4  ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float  PreExposure;
	float  OneOverPreExposure;
	float4  DiffuseOverrideParameter;
	float4  SpecularOverrideParameter;
	float4  NormalOverrideParameter;
	float2  RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float  OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float  NearPlane;
	float AdaptiveTessellationFactor;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float  CameraCut;
	float  UnlitViewmodeMask;
	float4  DirectionalLightColor;
	float3  DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float bSubsurfacePostprocessEnabled;
	float GeneralPurposeTweak;
	float  DemosaicVposOffset;
	float3 IndirectLightingColorScale;
	float  AtmosphericFogSunPower;
	float  AtmosphericFogPower;
	float  AtmosphericFogDensityScale;
	float  AtmosphericFogDensityOffset;
	float  AtmosphericFogGroundOffset;
	float  AtmosphericFogDistanceScale;
	float  AtmosphericFogAltitudeScale;
	float  AtmosphericFogHeightScaleRayleigh;
	float  AtmosphericFogStartDistance;
	float  AtmosphericFogDistanceOffset;
	float  AtmosphericFogSunDiscScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightColor[2];
	float4 AtmosphereLightColorGlobalPostTransmittance[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyWorldCameraOrigin;
	float4 SkyPlanetCenterAndViewHeight;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	uint AtmosphericFogRenderMask;
	uint AtmosphericFogInscatterAltitudeSampleNum;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 SkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float  ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[4];
	float4 GlobalVolumeWorldToUVAddAndMul[4];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDistance;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4x4 WorldToVirtualTexture;
	float4 XRPassthroughCameraUVs[2];
	uint VirtualTextureFeedbackStride;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint HairRenderInfoBits;
};
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.WorldToClip = View_WorldToClip;
	Result.ClipToWorld = View_ClipToWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToWorld = View_ScreenToWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.WorldCameraOrigin = View_WorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.WorldViewOrigin = View_WorldViewOrigin;
	Result.PreViewTranslation = View_PreViewTranslation;
	Result.PrevProjection = View_PrevProjection;
	Result.PrevViewProj = View_PrevViewProj;
	Result.PrevViewRotationProj = View_PrevViewRotationProj;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevWorldCameraOrigin = View_PrevWorldCameraOrigin;
	Result.PrevWorldViewOrigin = View_PrevWorldViewOrigin;
	Result.PrevPreViewTranslation = View_PrevPreViewTranslation;
	Result.PrevInvViewProj = View_PrevInvViewProj;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.AdaptiveTessellationFactor = View_AdaptiveTessellationFactor;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.AtmosphericFogSunPower = View_AtmosphericFogSunPower;
	Result.AtmosphericFogPower = View_AtmosphericFogPower;
	Result.AtmosphericFogDensityScale = View_AtmosphericFogDensityScale;
	Result.AtmosphericFogDensityOffset = View_AtmosphericFogDensityOffset;
	Result.AtmosphericFogGroundOffset = View_AtmosphericFogGroundOffset;
	Result.AtmosphericFogDistanceScale = View_AtmosphericFogDistanceScale;
	Result.AtmosphericFogAltitudeScale = View_AtmosphericFogAltitudeScale;
	Result.AtmosphericFogHeightScaleRayleigh = View_AtmosphericFogHeightScaleRayleigh;
	Result.AtmosphericFogStartDistance = View_AtmosphericFogStartDistance;
	Result.AtmosphericFogDistanceOffset = View_AtmosphericFogDistanceOffset;
	Result.AtmosphericFogSunDiscScale = View_AtmosphericFogSunDiscScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightColor = View_AtmosphereLightColor;
	Result.AtmosphereLightColorGlobalPostTransmittance = View_AtmosphereLightColorGlobalPostTransmittance;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle = View_AtmosphereLightDiscCosHalfApexAngle;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyWorldCameraOrigin = View_SkyWorldCameraOrigin;
	Result.SkyPlanetCenterAndViewHeight = View_SkyPlanetCenterAndViewHeight;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.AtmosphericFogRenderMask = View_AtmosphericFogRenderMask;
	Result.AtmosphericFogInscatterAltitudeSampleNum = View_AtmosphericFogInscatterAltitudeSampleNum;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.SkyIrradianceEnvironmentMap = View_SkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = View_GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = View_GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDistance = View_MaxGlobalDistance;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = View_StereoIPD;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.WorldToVirtualTexture = View_WorldToVirtualTexture;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	return Result;
}
ViewState GetInstancedView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = InstancedView_TranslatedWorldToClip;
	Result.WorldToClip = InstancedView_WorldToClip;
	Result.ClipToWorld = InstancedView_ClipToWorld;
	Result.TranslatedWorldToView = InstancedView_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = InstancedView_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = InstancedView_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = InstancedView_CameraViewToTranslatedWorld;
	Result.ViewToClip = InstancedView_ViewToClip;
	Result.ViewToClipNoAA = InstancedView_ViewToClipNoAA;
	Result.ClipToView = InstancedView_ClipToView;
	Result.ClipToTranslatedWorld = InstancedView_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = InstancedView_SVPositionToTranslatedWorld;
	Result.ScreenToWorld = InstancedView_ScreenToWorld;
	Result.ScreenToTranslatedWorld = InstancedView_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = InstancedView_MobileMultiviewShadowTransform;
	Result.ViewForward = InstancedView_ViewForward;
	Result.ViewUp = InstancedView_ViewUp;
	Result.ViewRight = InstancedView_ViewRight;
	Result.HMDViewNoRollUp = InstancedView_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = InstancedView_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = InstancedView_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = InstancedView_ScreenPositionScaleBias;
	Result.WorldCameraOrigin = InstancedView_WorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = InstancedView_TranslatedWorldCameraOrigin;
	Result.WorldViewOrigin = InstancedView_WorldViewOrigin;
	Result.PreViewTranslation = InstancedView_PreViewTranslation;
	Result.PrevProjection = InstancedView_PrevProjection;
	Result.PrevViewProj = InstancedView_PrevViewProj;
	Result.PrevViewRotationProj = InstancedView_PrevViewRotationProj;
	Result.PrevViewToClip = InstancedView_PrevViewToClip;
	Result.PrevClipToView = InstancedView_PrevClipToView;
	Result.PrevTranslatedWorldToClip = InstancedView_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = InstancedView_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = InstancedView_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = InstancedView_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = InstancedView_PrevCameraViewToTranslatedWorld;
	Result.PrevWorldCameraOrigin = InstancedView_PrevWorldCameraOrigin;
	Result.PrevWorldViewOrigin = InstancedView_PrevWorldViewOrigin;
	Result.PrevPreViewTranslation = InstancedView_PrevPreViewTranslation;
	Result.PrevInvViewProj = InstancedView_PrevInvViewProj;
	Result.PrevScreenToTranslatedWorld = InstancedView_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = InstancedView_ClipToPrevClip;
	Result.TemporalAAJitter = InstancedView_TemporalAAJitter;
	Result.GlobalClippingPlane = InstancedView_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = InstancedView_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = InstancedView_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = InstancedView_ViewRectMin;
	Result.ViewSizeAndInvSize = InstancedView_ViewSizeAndInvSize;
	Result.BufferSizeAndInvSize = InstancedView_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = InstancedView_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = InstancedView_ScreenToViewSpace;
	Result.NumSceneColorMSAASamples = InstancedView_NumSceneColorMSAASamples;
	Result.PreExposure = InstancedView_PreExposure;
	Result.OneOverPreExposure = InstancedView_OneOverPreExposure;
	Result.DiffuseOverrideParameter = InstancedView_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = InstancedView_SpecularOverrideParameter;
	Result.NormalOverrideParameter = InstancedView_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = InstancedView_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = InstancedView_PrevFrameGameTime;
	Result.PrevFrameRealTime = InstancedView_PrevFrameRealTime;
	Result.OutOfBoundsMask = InstancedView_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = InstancedView_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = InstancedView_CullingSign;
	Result.NearPlane = InstancedView_NearPlane;
	Result.AdaptiveTessellationFactor = InstancedView_AdaptiveTessellationFactor;
	Result.GameTime = InstancedView_GameTime;
	Result.RealTime = InstancedView_RealTime;
	Result.DeltaTime = InstancedView_DeltaTime;
	Result.MaterialTextureMipBias = InstancedView_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = InstancedView_MaterialTextureDerivativeMultiply;
	Result.Random = InstancedView_Random;
	Result.FrameNumber = InstancedView_FrameNumber;
	Result.StateFrameIndexMod8 = InstancedView_StateFrameIndexMod8;
	Result.StateFrameIndex = InstancedView_StateFrameIndex;
	Result.DebugViewModeMask = InstancedView_DebugViewModeMask;
	Result.CameraCut = InstancedView_CameraCut;
	Result.UnlitViewmodeMask = InstancedView_UnlitViewmodeMask;
	Result.DirectionalLightColor = InstancedView_DirectionalLightColor;
	Result.DirectionalLightDirection = InstancedView_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = InstancedView_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = InstancedView_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = InstancedView_TemporalAAParams;
	Result.CircleDOFParams = InstancedView_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = InstancedView_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = InstancedView_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = InstancedView_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = InstancedView_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = InstancedView_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = InstancedView_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = InstancedView_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = InstancedView_MotionBlurNormalizedToPixel;
	Result.bSubsurfacePostprocessEnabled = InstancedView_bSubsurfacePostprocessEnabled;
	Result.GeneralPurposeTweak = InstancedView_GeneralPurposeTweak;
	Result.DemosaicVposOffset = InstancedView_DemosaicVposOffset;
	Result.IndirectLightingColorScale = InstancedView_IndirectLightingColorScale;
	Result.AtmosphericFogSunPower = InstancedView_AtmosphericFogSunPower;
	Result.AtmosphericFogPower = InstancedView_AtmosphericFogPower;
	Result.AtmosphericFogDensityScale = InstancedView_AtmosphericFogDensityScale;
	Result.AtmosphericFogDensityOffset = InstancedView_AtmosphericFogDensityOffset;
	Result.AtmosphericFogGroundOffset = InstancedView_AtmosphericFogGroundOffset;
	Result.AtmosphericFogDistanceScale = InstancedView_AtmosphericFogDistanceScale;
	Result.AtmosphericFogAltitudeScale = InstancedView_AtmosphericFogAltitudeScale;
	Result.AtmosphericFogHeightScaleRayleigh = InstancedView_AtmosphericFogHeightScaleRayleigh;
	Result.AtmosphericFogStartDistance = InstancedView_AtmosphericFogStartDistance;
	Result.AtmosphericFogDistanceOffset = InstancedView_AtmosphericFogDistanceOffset;
	Result.AtmosphericFogSunDiscScale = InstancedView_AtmosphericFogSunDiscScale;
	Result.AtmosphereLightDirection = InstancedView_AtmosphereLightDirection;
	Result.AtmosphereLightColor = InstancedView_AtmosphereLightColor;
	Result.AtmosphereLightColorGlobalPostTransmittance = InstancedView_AtmosphereLightColorGlobalPostTransmittance;
	Result.AtmosphereLightDiscLuminance = InstancedView_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle = InstancedView_AtmosphereLightDiscCosHalfApexAngle;
	Result.SkyViewLutSizeAndInvSize = InstancedView_SkyViewLutSizeAndInvSize;
	Result.SkyWorldCameraOrigin = InstancedView_SkyWorldCameraOrigin;
	Result.SkyPlanetCenterAndViewHeight = InstancedView_SkyPlanetCenterAndViewHeight;
	Result.SkyAtmosphereSkyLuminanceFactor = InstancedView_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmosphereHeightFogContribution = InstancedView_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = InstancedView_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = InstancedView_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.AtmosphericFogRenderMask = InstancedView_AtmosphericFogRenderMask;
	Result.AtmosphericFogInscatterAltitudeSampleNum = InstancedView_AtmosphericFogInscatterAltitudeSampleNum;
	Result.NormalCurvatureToRoughnessScaleBias = InstancedView_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = InstancedView_RenderingReflectionCaptureMask;
	Result.AmbientCubemapTint = InstancedView_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = InstancedView_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = InstancedView_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = InstancedView_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = InstancedView_SkyLightColor;
	Result.SkyIrradianceEnvironmentMap = InstancedView_SkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = InstancedView_MobilePreviewMode;
	Result.HMDEyePaddingOffset = InstancedView_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = InstancedView_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = InstancedView_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = InstancedView_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = InstancedView_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = InstancedView_StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = InstancedView_GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = InstancedView_GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalVolumeDimension = InstancedView_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = InstancedView_GlobalVolumeTexelSize;
	Result.MaxGlobalDistance = InstancedView_MaxGlobalDistance;
	Result.CursorPosition = InstancedView_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = InstancedView_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = InstancedView_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = InstancedView_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = InstancedView_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = InstancedView_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = InstancedView_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = InstancedView_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = InstancedView_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = InstancedView_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = InstancedView_VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = InstancedView_StereoIPD;
	Result.IndirectLightingCacheShowFlag = InstancedView_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = InstancedView_EyeToPixelSpreadAngle;
	Result.WorldToVirtualTexture = InstancedView_WorldToVirtualTexture;
	Result.XRPassthroughCameraUVs = InstancedView_XRPassthroughCameraUVs;
	Result.VirtualTextureFeedbackStride = InstancedView_VirtualTextureFeedbackStride;
	Result.RuntimeVirtualTextureMipLevel = InstancedView_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = InstancedView_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = InstancedView_RuntimeVirtualTextureDebugParams;
	Result.FarShadowStaticMeshLODBias = InstancedView_FarShadowStaticMeshLODBias;
	Result.MinRoughness = InstancedView_MinRoughness;
	Result.HairRenderInfo = InstancedView_HairRenderInfo;
	Result.HairRenderInfoBits = InstancedView_HairRenderInfoBits;
	return Result;
}
#line 16 "/Engine/Private/InstancedStereo.ush"

static ViewState ResolvedView;

ViewState ResolveView()
{
	return GetPrimaryView();
}
#line 44 "/Engine/Private/InstancedStereo.ush"
bool IsInstancedStereo()
{



	return false;

}

uint GetEyeIndex(uint InstanceId)
{



	return 0;

}

uint GetInstanceId(uint InstanceId)
{



	return InstanceId;

}
#line 67 "/Engine/Private/Common.ush"
#line 68 "/Engine/Private/Common.ush"
#line 1 "Definitions.usf"
#line 69 "/Engine/Private/Common.ush"
#line 82 "/Engine/Private/Common.ush"
const static  float  PI = 3.1415926535897932f;
const static float MaxHalfFloat = 65504.0f;
const static float Max10BitsFloat = 64512.0f;
#line 107 "/Engine/Private/Common.ush"
static float GlobalRayCone_TexArea;
float ComputeRayConeLod(Texture2D Tex)
{






    return  0.0f ;

}

float ClampToHalfFloatRange(float X) { return clamp(X, float(0), MaxHalfFloat); }
float2 ClampToHalfFloatRange(float2 X) { return clamp(X, float(0).xx, MaxHalfFloat.xx); }
float3 ClampToHalfFloatRange(float3 X) { return clamp(X, float(0).xxx, MaxHalfFloat.xxx); }
float4 ClampToHalfFloatRange(float4 X) { return clamp(X, float(0).xxxx, MaxHalfFloat.xxxx); }



float4  Texture1DSample(Texture1D Tex, SamplerState Sampler, float UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 134 "/Engine/Private/Common.ush"
}
float4  Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex));
#line 142 "/Engine/Private/Common.ush"
}
float  Texture2DSample_A8(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex))  .a ;
#line 150 "/Engine/Private/Common.ush"
}
float4  Texture3DSample(Texture3D Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 158 "/Engine/Private/Common.ush"
}
float4  TextureCubeSample(TextureCube Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 166 "/Engine/Private/Common.ush"
}
float4  Texture2DArraySample(Texture2DArray Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 174 "/Engine/Private/Common.ush"
}
float4  Texture1DSampleLevel(Texture1D Tex, SamplerState Sampler, float UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + MipBias);
#line 190 "/Engine/Private/Common.ush"
}
float4  Texture2DSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture3DSampleBias(Texture3D Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleBias(Sampler, UV, 0);
#line 206 "/Engine/Private/Common.ush"
}
float4  Texture3DSampleGrad(Texture3D Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float  TextureCubeSampleDepthLevel(TextureCube TexDepth, SamplerState Sampler, float3 UV,  float  Mip)
{
	return TexDepth.SampleLevel(Sampler, UV, Mip).x;
}
float4  TextureCubeSampleBias(TextureCube Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 226 "/Engine/Private/Common.ush"
}
float4  TextureCubeSampleGrad(TextureCube Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSample( Texture2D  Tex, SamplerState Sampler, float2 UV)
{




		return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex));
#line 242 "/Engine/Private/Common.ush"
}
float4  TextureExternalSampleGrad( Texture2D  Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSampleLevel( Texture2D  Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}




float4  Texture1DSample_Decal(Texture1D Tex, SamplerState Sampler, float UV)
{
	return Texture1DSample(Tex, Sampler, UV);
}
float4  Texture2DSample_Decal(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Texture2DSample(Tex, Sampler, UV);

}
float4  Texture3DSample_Decal(Texture3D Tex, SamplerState Sampler, float3 UV)
{



	return Texture3DSample(Tex, Sampler, UV);

}
float4  TextureCubeSample_Decal(TextureCube Tex, SamplerState Sampler, float3 UV)
{



	return TextureCubeSample(Tex, Sampler, UV);

}
float4  TextureExternalSample_Decal( Texture2D  Tex, SamplerState Sampler, float2 UV)
{



	return TextureExternalSample(Tex, Sampler, UV);

}

float4  Texture2DArraySampleLevel(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DArraySampleBias(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 303 "/Engine/Private/Common.ush"
}
float4  Texture2DArraySampleGrad(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float2 Tile1Dto2D(float xsize, float idx)
{
	float2 xyidx = 0;
	xyidx.y = floor(idx / xsize);
	xyidx.x = idx - xsize * xyidx.y;

	return xyidx;
}
#line 330 "/Engine/Private/Common.ush"
float4 PseudoVolumeTexture(Texture2D Tex, SamplerState TexSampler, float3 inPos, float2 xysize, float numframes,
	uint mipmode = 0, float miplevel = 0, float2 InDDX = 0, float2 InDDY = 0)
{
	float z = inPos.z - 0.5f / numframes;
	float zframe = floor(z * numframes);
	float zphase = frac(z * numframes);

	float2 uv = frac(inPos.xy) / xysize;

	float2 curframe = Tile1Dto2D(xysize.x, zframe) / xysize;
	float2 nextframe = Tile1Dto2D(xysize.x, zframe + 1) / xysize;

	float2 uvCurFrame = uv + curframe;
	float2 uvNextFrame = uv + nextframe;
#line 350 "/Engine/Private/Common.ush"
	float4 sampleA = 0, sampleB = 0;
	switch (mipmode)
	{
	case 0:
		sampleA = Tex.SampleLevel(TexSampler, uvCurFrame, miplevel);
		sampleB = Tex.SampleLevel(TexSampler, uvNextFrame, miplevel);
		break;
	case 1:
		sampleA = Texture2DSample(Tex, TexSampler, uvCurFrame);
		sampleB = Texture2DSample(Tex, TexSampler, uvNextFrame);
		break;
	case 2:
		sampleA = Tex.SampleGrad(TexSampler, uvCurFrame, InDDX, InDDY);
		sampleB = Tex.SampleGrad(TexSampler, uvNextFrame, InDDX, InDDY);
		break;
	default:
		break;
	}

	return lerp(sampleA, sampleB, zphase);
}


	float4  TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float3 UV, float ArrayIndex,  float  Mip)
	{
		return Tex.SampleLevel(Sampler, float4(UV, ArrayIndex), Mip);
	}
#line 416 "/Engine/Private/Common.ush"
float  Luminance(  float3  LinearColor )
{
	return dot( LinearColor,  float3 ( 0.3, 0.59, 0.11 ) );
}

float  length2( float2  v)
{
	return dot(v, v);
}
float  length2( float3  v)
{
	return dot(v, v);
}
float  length2( float4  v)
{
	return dot(v, v);
}

uint Mod(uint a, uint b)
{

	return a % b;
#line 441 "/Engine/Private/Common.ush"
}

uint2 Mod(uint2 a, uint2 b)
{

	return a % b;
#line 450 "/Engine/Private/Common.ush"
}

uint3 Mod(uint3 a, uint3 b)
{

	return a % b;
#line 459 "/Engine/Private/Common.ush"
}

float  UnClampedPow( float  X,  float  Y)
{
	return pow(X,  Y );
}
float2  UnClampedPow( float2  X,  float2  Y)
{
	return pow(X,  Y );
}
float3  UnClampedPow( float3  X,  float3  Y)
{
	return pow(X,  Y );
}
float4  UnClampedPow( float4  X,  float4  Y)
{
	return pow(X,  Y );
}




float  ClampedPow( float  X, float  Y)
{
	return pow(max(abs(X), 0.000001f ),Y);
}
float2  ClampedPow( float2  X, float2  Y)
{
	return pow(max(abs(X), float2 ( 0.000001f , 0.000001f )),Y);
}
float3  ClampedPow( float3  X, float3  Y)
{
	return pow(max(abs(X), float3 ( 0.000001f , 0.000001f , 0.000001f )),Y);
}
float4  ClampedPow( float4  X, float4  Y)
{
	return pow(max(abs(X), float4 ( 0.000001f , 0.000001f , 0.000001f , 0.000001f )),Y);
}

float  PositiveClampedPow( float  X, float  Y)
{
	return pow(max(X, 0.000001f ),Y);
}
float2  PositiveClampedPow( float2  X, float2  Y)
{
	return pow(max(X, float2 ( 0.000001f , 0.000001f )),Y);
}
float3  PositiveClampedPow( float3  X, float3  Y)
{
	return pow(max(X, float3 ( 0.000001f , 0.000001f , 0.000001f )),Y);
}
float4  PositiveClampedPow( float4  X, float4  Y)
{
	return pow(max(X, float4 ( 0.000001f , 0.000001f , 0.000001f , 0.000001f )),Y);
}

float DDX(float Input)
{

	return 0;
#line 522 "/Engine/Private/Common.ush"
}

float2 DDX(float2 Input)
{

	return 0;
#line 531 "/Engine/Private/Common.ush"
}

float3 DDX(float3 Input)
{

	return 0;
#line 540 "/Engine/Private/Common.ush"
}

float4 DDX(float4 Input)
{

	return 0;
#line 549 "/Engine/Private/Common.ush"
}

float DDY(float Input)
{

	return 0;
#line 558 "/Engine/Private/Common.ush"
}

float2 DDY(float2 Input)
{

	return 0;
#line 567 "/Engine/Private/Common.ush"
}

float3 DDY(float3 Input)
{

	return 0;
#line 576 "/Engine/Private/Common.ush"
}

float4 DDY(float4 Input)
{

	return 0;
#line 585 "/Engine/Private/Common.ush"
}
#line 587 "/Engine/Private/Common.ush"
#line 1 "FastMath.ush"
#line 46 "/Engine/Private/FastMath.ush"
float rsqrtFast( float x )
{
	int i = asint(x);
	i = 0x5f3759df - (i >> 1);
	return asfloat(i);
}




float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}




float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}





float rcpFastNR1( float x )
{
	int i = asint(x);
	i = 0x7EF311C3 - i;
	float xRcp = asfloat(i);
	xRcp = xRcp * (-xRcp * x + 2.0f);
	return xRcp;
}

float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

float3 normalizeFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return v * rsqrtFast( LengthSqr );
}

float4 fastClamp(float4 x, float4 Min, float4 Max)
{




	return clamp(x, Min, Max);

}

float3 fastClamp(float3 x, float3 Min, float3 Max)
{




	return clamp(x, Min, Max);

}

float2 fastClamp(float2 x, float2 Min, float2 Max)
{




	return clamp(x, Min, Max);

}

float fastClamp(float x, float Min, float Max)
{




	return clamp(x, Min, Max);

}









float acosFast(float inX)
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}




float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}





float atanFastPos( float x )
{
    float t0 = (x < 1.0f) ? x : 1.0f / x;
    float t1 = t0 * t0;
    float poly = 0.0872929f;
    poly = -0.301895f + poly * t1;
    poly = 1.0f + poly * t1;
    poly = poly * t0;
    return (x < 1.0f) ? poly : (0.5 * PI) - poly;
}



float atanFast( float x )
{
    float t0 = atanFastPos( abs(x) );
    return (x < 0) ? -t0: t0;
}

float atan2Fast( float y, float x )
{
	float t0 = max( abs(x), abs(y) );
	float t1 = min( abs(x), abs(y) );
	float t3 = t1 / t0;
	float t4 = t3 * t3;


	t0 = + 0.0872929;
	t0 = t0 * t4 - 0.301895;
	t0 = t0 * t4 + 1.0;
	t3 = t0 * t3;

	t3 = abs(y) > abs(x) ? (0.5 * PI) - t3 : t3;
	t3 = x < 0 ? PI - t3 : t3;
	t3 = y < 0 ? -t3 : t3;

	return t3;
}





float acosFast4(float inX)
{
	float x1 = abs(inX);
	float x2 = x1 * x1;
	float x3 = x2 * x1;
	float s;

	s = -0.2121144f * x1 + 1.5707288f;
	s = 0.0742610f * x2 + s;
	s = -0.0187293f * x3 + s;
	s = sqrt(1.0f - x1) * s;



	return inX >= 0.0f ? s : PI - s;
}




float asinFast4( float x )
{
	return (0.5 * PI) - acosFast4(x);
}




float CosBetweenVectors(float3 A, float3 B)
{

	return dot(A, B) * rsqrt(length2(A) * length2(B));
}



float AngleBetweenVectors(float3 A, float3 B)
{
	return acos(CosBetweenVectors(A, B));
}


float AngleBetweenVectorsFast(float3 A, float3 B)
{
	return acosFast(CosBetweenVectors(A, B));
}


int SignFastInt(float v)
{
	return 1 - int((asuint(v) & 0x7fffffff) >> 30);
}

int2 SignFastInt(float2 v)
{
	return int2(SignFastInt(v.x), SignFastInt(v.y));
}
#line 588 "/Engine/Private/Common.ush"
#line 1 "Random.ush"
#line 12 "/Engine/Private/Random.ush"
float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);


	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}







float InterleavedGradientNoise( float2 uv, float FrameId )
{

	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}



float RandFast( uint2 PixelPos, float Magic = 3571.0 )
{
	float2 Random2 = ( 1.0 / 4320.0 ) * PixelPos + float2( 0.25, 0.0 );
	float Random = frac( dot( Random2 * Random2, Magic ) );
	Random = frac( Random * Random * (2 * Magic) );
	return Random;
}
#line 56 "/Engine/Private/Random.ush"
float RandBBSfloat(float seed)
{
	float s = frac(seed /  4093 );
	s = frac(s * s *  4093 );
	s = frac(s * s *  4093 );
	return s;
}








uint3 Rand3DPCG16(int3 p)
{

	uint3 v = uint3(p);




	v = v * 1664525u + 1013904223u;
#line 94 "/Engine/Private/Random.ush"
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	return v >> 16u;
}








uint3 Rand3DPCG32(int3 p)
{

	uint3 v = uint3(p);


	v = v * 1664525u + 1013904223u;


	v = v * (1u << 16u) + (v >> 16u);


	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return v;
}










uint4 Rand4DPCG32(int4 p)
{

	uint4 v = uint4(p);


	v = v * 1664525u + 1013904223u;


	v = v * (1u << 16u) + (v >> 16u);


	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	return v;
}
#line 174 "/Engine/Private/Random.ush"
void FindBestAxisVectors(float3 In, out float3 Axis1, out float3 Axis2 )
{
	const float3 N = abs(In);


	if( N.z > N.x && N.z > N.y )
	{
		Axis1 = float3(1, 0, 0);
	}
	else
	{
		Axis1 = float3(0, 0, 1);
	}

	Axis1 = normalize(Axis1 - In * dot(Axis1, In));
	Axis2 = cross(Axis1, In);
}
#line 215 "/Engine/Private/Random.ush"
uint2 ScrambleTEA(uint2 v, uint IterationCount = 3)
{

	uint k[4] ={ 0xA341316Cu , 0xC8013EA4u , 0xAD90777Du , 0x7E95761Eu };

	uint y = v[0];
	uint z = v[1];
	uint sum = 0;

	[unroll]  for(uint i = 0; i < IterationCount; ++i)
	{
		sum += 0x9e3779b9;
		y += ((z << 4u) + k[0]) ^ (z + sum) ^ ((z >> 5u) + k[1]);
		z += ((y << 4u) + k[2]) ^ (y + sum) ^ ((y >> 5u) + k[3]);
	}

	return uint2(y, z);
}






float3 NoiseTileWrap(float3 v, bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}




float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10);
}




float4 PerlinRampDerivative(float4 t)
{
	return t * t * (t * (t * 30 - 60) + 30);
}







float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	return float4(direction, dot(direction, offset));
}







float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}







float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}





float4x3 SimplexCorners(float3 v)
{

	float3 tet = floor(v + v.x/3 + v.y/3 + v.z/3);
	float3 base = tet - tet.x/6 - tet.y/6 - tet.z/6;
	float3 f = v - base;



	float3 g = step(f.yzx, f.xyz), h = 1 - g.zxy;
	float3 a1 = min(g, h) - 1. / 6., a2 = max(g, h) - 1. / 3.;


	return float4x3(base, base + a1, base + a2, base + 0.5);
}




float4 SimplexSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	return (1 * scale + s*(-3 * scale + s*(3 * scale - s*scale)));
}




float3x4 SimplexDSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	s = -12 * scale + s*(24 * scale - s * 12 * scale);

	return float3x4(
		s * float4(f[0][0], f[1][0], f[2][0], f[3][0]),
		s * float4(f[0][1], f[1][1], f[2][1], f[3][1]),
		s * float4(f[0][2], f[1][2], f[2][2], f[3][2]));
}
#line 403 "/Engine/Private/Random.ush"
float3x4 JacobianSimplex_ALU(float3 v, bool bTiling, float RepeatSize)
{

	float4x3 T = SimplexCorners(v);
	uint3 rand;
	float4x3 gvec[3], fv;
	float3x4 grad;



	fv[0] = v - T[0];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[0] + 0.5, bTiling, RepeatSize))));
	gvec[0][0] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][0] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][0] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][0] = dot(gvec[0][0], fv[0]);
	grad[1][0] = dot(gvec[1][0], fv[0]);
	grad[2][0] = dot(gvec[2][0], fv[0]);

	fv[1] = v - T[1];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[1] + 0.5, bTiling, RepeatSize))));
	gvec[0][1] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][1] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][1] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][1] = dot(gvec[0][1], fv[1]);
	grad[1][1] = dot(gvec[1][1], fv[1]);
	grad[2][1] = dot(gvec[2][1], fv[1]);

	fv[2] = v - T[2];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[2] + 0.5, bTiling, RepeatSize))));
	gvec[0][2] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][2] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][2] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][2] = dot(gvec[0][2], fv[2]);
	grad[1][2] = dot(gvec[1][2], fv[2]);
	grad[2][2] = dot(gvec[2][2], fv[2]);

	fv[3] = v - T[3];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[3] + 0.5, bTiling, RepeatSize))));
	gvec[0][3] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][3] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][3] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][3] = dot(gvec[0][3], fv[3]);
	grad[1][3] = dot(gvec[1][3], fv[3]);
	grad[2][3] = dot(gvec[2][3], fv[3]);


	float4 sv = SimplexSmooth(fv);
	float3x4 ds = SimplexDSmooth(fv);

	float3x4 jacobian;
	jacobian[0] = float4(mul(sv, gvec[0]) + mul(ds, grad[0]), dot(sv, grad[0]));
	jacobian[1] = float4(mul(sv, gvec[1]) + mul(ds, grad[1]), dot(sv, grad[1]));
	jacobian[2] = float4(mul(sv, gvec[2]) + mul(ds, grad[2]), dot(sv, grad[2]));

	return jacobian;
}






float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}









float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);

	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;
	if (bTiling)
	{
		OffsetB = iv1.z * ZShear;
	}


	float ts = 1 / 128.0f;


	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;


	float2 TexA1 = TexA0 + ts;
	float2 TexB1 = TexB0 + ts;
	if (bTiling)
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}



	float3 A = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;

	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}



float FastGradientPerlinNoise3D_TEX(float3 xyz)
{

	float Extent = 16;



	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);


	float3 uvw = frac(xyz);


	float3 p0 = xyz - uvw;


	float3 f = PerlinRamp(float4(uvw, 0)).xyz;

	float3 p = p0 + f;

	float4 NoiseSample = Texture3DSampleLevel(View_PerlinNoise3DTexture, View_PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);



	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}





float3 VoronoiCornerSample(float3 pos, int Quality)
{

	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;



	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}



	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}


	return noise;
}








float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}


float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v), fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);


	float4 mindist = float4(0,0,0,100);
	float3 p, offset;


	if (Quality == 3)
	{
		[unroll]  for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			[unroll]  for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				[unroll]  for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}


	else
	{
		[unroll(3)]  for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			[unroll(3)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(3)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					if (Quality == 2)
					{

						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}


	if (Quality >= 4)
	{
		[unroll(3)]  for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			[unroll(3)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(3)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{

					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}


	return float4(mindist.xyz, sqrt(mindist.w));
}







float3 ComputeSimplexWeights2D(float2 OrthogonalPos, out float2 PosA, out float2 PosB, out float2 PosC)
{
	float2 OrthogonalPosFloor = floor(OrthogonalPos);
	PosA = OrthogonalPosFloor;
	PosB = PosA + float2(1, 1);

	float2 LocalPos = OrthogonalPos - OrthogonalPosFloor;

	PosC = PosA + ((LocalPos.x > LocalPos.y) ? float2(1,0) : float2(0,1));

	float b = min(LocalPos.x, LocalPos.y);
	float c = abs(LocalPos.y - LocalPos.x);
	float a = 1.0f - b - c;

	return float3(a, b, c);
}



float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b =
		  min(max(0, RG), max(0, RB))
		+ min(max(0, -RG), max(0, GB))
		+ min(max(0, -RB), max(0, -GB));

	ret.a =
		  min(max(0, -RG), max(0, -RB))
		+ min(max(0, RG), max(0, -GB))
		+ min(max(0, RB), max(0, GB));

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;


	float3 p = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}




float GradientSimplexNoise2D_TEX(float2 EvalPos)
{
	float2 OrthogonalPos = SkewSimplex(EvalPos);

	float2 PosA, PosB, PosC, PosD;
	float3 Weights = ComputeSimplexWeights2D(OrthogonalPos, PosA, PosB, PosC);


	float2 A = GetPerlinNoiseGradientTextureAt(PosA);
	float2 B = GetPerlinNoiseGradientTextureAt(PosB);
	float2 C = GetPerlinNoiseGradientTextureAt(PosC);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);

	float DistanceWeight;

	DistanceWeight = saturate(0.5f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;

	return 70 * (a + b + c);
}






float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);


	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}


float VolumeRaymarch(float3 posPixelWS, float3 posCameraWS)
{
	float ret = 0;
	int cnt = 60;

	[loop]  for(int i=0; i < cnt; ++i)
	{
		ret += saturate(FastGradientPerlinNoise3D_TEX(lerp(posPixelWS, posCameraWS, i/(float)cnt) * 0.01) - 0.2f);
	}

	return ret / cnt * (length(posPixelWS - posCameraWS) * 0.001f );
}
#line 589 "/Engine/Private/Common.ush"
#line 594 "/Engine/Private/Common.ush"
float  PhongShadingPow( float  X,  float  Y)
{
#line 612 "/Engine/Private/Common.ush"
	return ClampedPow(X, Y);
}
#line 646 "/Engine/Private/Common.ush"
Texture2D LightAttenuationTexture;
SamplerState LightAttenuationTextureSampler;





float ConvertTangentUnormToSnorm8(float Input)
{
	int IntVal = int(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float2 ConvertTangentUnormToSnorm8(float2 Input)
{
	int2 IntVal = int2(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float3 ConvertTangentUnormToSnorm8(float3 Input)
{
	int3 IntVal = int3(round(Input * 255.0f));
	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float4 ConvertTangentUnormToSnorm8(float4 Input)
{
	int4 IntVal = int4(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float ConvertTangentUnormToSnorm16(float Input)
{
	int IntVal = int(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFF8000) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float2 ConvertTangentUnormToSnorm16(float2 Input)
{
	int2 IntVal = int2(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float3 ConvertTangentUnormToSnorm16(float3 Input)
{
	int3 IntVal = int3(round(Input * 65535.0f));
	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float4 ConvertTangentUnormToSnorm16(float4 Input)
{
	int4 IntVal = int4(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float ConvertTangentSnormToUnorm8(float Input)
{
	float Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float2 ConvertTangentSnormToUnorm8(float2 Input)
{
	float2 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float3 ConvertTangentSnormToUnorm8(float3 Input)
{
	float3 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float4 ConvertTangentSnormToUnorm8(float4 Input)
{
	float4 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float ConvertTangentSnormToUnorm16(float Input)
{
	float Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float2 ConvertTangentSnormToUnorm16(float2 Input)
{
	float2 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float3 ConvertTangentSnormToUnorm16(float3 Input)
{
	float3 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float4 ConvertTangentSnormToUnorm16(float4 Input)
{
	float4 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}






float Square( float x )
{
	return x*x;
}

float2 Square( float2 x )
{
	return x*x;
}

float3 Square( float3 x )
{
	return x*x;
}

float4 Square( float4 x )
{
	return x*x;
}

float Pow2( float x )
{
	return x*x;
}

float2 Pow2( float2 x )
{
	return x*x;
}

float3 Pow2( float3 x )
{
	return x*x;
}

float4 Pow2( float4 x )
{
	return x*x;
}

float Pow3( float x )
{
	return x*x*x;
}

float2 Pow3( float2 x )
{
	return x*x*x;
}

float3 Pow3( float3 x )
{
	return x*x*x;
}

float4 Pow3( float4 x )
{
	return x*x*x;
}

float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

float Pow6( float x )
{
	float xx = x*x;
	return xx * xx * xx;
}

float2 Pow6( float2 x )
{
	float2 xx = x*x;
	return xx * xx * xx;
}

float3 Pow6( float3 x )
{
	float3 xx = x*x;
	return xx * xx * xx;
}

float4 Pow6( float4 x )
{
	float4 xx = x*x;
	return xx * xx * xx;
}


float  AtanFast(  float  x )
{

	float3  A = x < 1 ?  float3 ( x, 0, 1 ) :  float3 ( 1/x, 0.5 * PI, -1 );
	return A.y + A.z * ( ( ( -0.130234 * A.x - 0.0954105 ) * A.x + 1.00712 ) * A.x - 0.00001203333 );
}


float  EncodeLightAttenuation( float  InColor)
{


	return sqrt(InColor);
}


float4  EncodeLightAttenuation( float4  InColor)
{
	return sqrt(InColor);
}


float4  RGBTEncode( float3  Color)
{
	float4  RGBT;
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	RGBT.a = Max * rcp(1.0 + Max);
	return RGBT;
}

float3  RGBTDecode( float4  RGBT)
{
	RGBT.a = RGBT.a * rcp(1.0 - RGBT.a);
	return RGBT.rgb * RGBT.a;
}



float4  RGBMEncode(  float3  Color )
{
	Color *= 1.0 / 64.0;

	float4 rgbm;
	rgbm.a = saturate( max( max( Color.r, Color.g ), max( Color.b, 1e-6 ) ) );
	rgbm.a = ceil( rgbm.a * 255.0 ) / 255.0;
	rgbm.rgb = Color / rgbm.a;
	return rgbm;
}

float4  RGBMEncodeFast(  float3  Color )
{

	float4  rgbm;
	rgbm.a = dot( Color, 255.0 / 64.0 );
	rgbm.a = ceil( rgbm.a );
	rgbm.rgb = Color / rgbm.a;
	rgbm *=  float4 ( 255.0 / 64.0, 255.0 / 64.0, 255.0 / 64.0, 1.0 / 255.0 );
	return rgbm;
}

float3  RGBMDecode(  float4  rgbm,  float  MaxValue )
{
	return rgbm.rgb * (rgbm.a * MaxValue);
}

float3  RGBMDecode(  float4  rgbm )
{
	return rgbm.rgb * (rgbm.a * 64.0f);
}

float4  RGBTEncode8BPC( float3  Color,  float  Range)
{
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	Max = min(Max, Range);

	float4  RGBT;
	RGBT.a = (Range + 1) / Range * Max / (1 + Max);


	RGBT.a = ceil(RGBT.a*255.0) / 255.0;
	Max = RGBT.a / (1 + 1 / Range - RGBT.a);

	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	return RGBT;
}

float3  RGBTDecode8BPC( float4  RGBT,  float  Range)
{
	RGBT.a = RGBT.a / (1 + 1 / Range - RGBT.a);
	return RGBT.rgb * RGBT.a;
}
#line 1015 "/Engine/Private/Common.ush"
float2 CalcScreenUVFromOffsetFraction(float4 ScreenPosition, float2 OffsetFraction)
{
	float2 NDC = ScreenPosition.xy / ScreenPosition.w;



	float2 OffsetNDC = clamp(NDC + OffsetFraction * float2(2, -2), -.999f, .999f);
	return float2(OffsetNDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float4 GetPerPixelLightAttenuation(float2 UV)
{
	return Square(Texture2DSampleLevel(LightAttenuationTexture, LightAttenuationTextureSampler, UV, 0));
}




float ConvertFromDeviceZ(float DeviceZ)
{

	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}




float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{

		return 1.0f / ((SceneDepth + View_InvDeviceZToWorldZTransform[3]) * View_InvDeviceZToWorldZTransform[2]);
	}
	else
	{

		return SceneDepth * View_ViewToClip[2][2] + View_ViewToClip[3][2];
	}
}

float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View_BufferSizeAndInvSize.zw;
}


float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View_SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToWorld(float4 SvPosition)
{
	return SvPositionToTranslatedWorld(SvPosition) - View_PreViewTranslation;
}


float4 SvPositionToScreenPosition(float4 SvPosition)
{



	float2 PixelPos = SvPosition.xy - View_ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * View_ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}


float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

float2 SvPositionToViewportUV(float4 SvPosition)
{

	float2 PixelPos = SvPosition.xy - View_ViewRectMin.xy;

	return PixelPos.xy * View_ViewSizeAndInvSize.zw;
}

float2 BufferUVToViewportUV(float2 BufferUV)
{
	float2 PixelPos = BufferUV.xy * View_BufferSizeAndInvSize.xy - View_ViewRectMin.xy;
	return PixelPos.xy * View_ViewSizeAndInvSize.zw;
}

float2 ViewportUVToBufferUV(float2 ViewportUV)
{
	float2 PixelPos = ViewportUV * View_ViewSizeAndInvSize.xy;
	return (PixelPos + View_ViewRectMin.xy) * View_BufferSizeAndInvSize.zw;
}


float2 ViewportUVToScreenPos(float2 ViewportUV)
{
	return float2(2 * ViewportUV.x - 1, 1 - 2 * ViewportUV.y);
}

float2 ScreenPosToViewportUV(float2 ScreenPos)
{
	return float2(0.5 + 0.5 * ScreenPos.x, 0.5 - 0.5 * ScreenPos.y);
}



float3 ScreenToViewPos(float2 ViewportUV, float SceneDepth)
{
	float2 ProjViewPos;

	ProjViewPos.x = ViewportUV.x * View_ScreenToViewSpace.x + View_ScreenToViewSpace.z;
	ProjViewPos.y = ViewportUV.y * View_ScreenToViewSpace.y + View_ScreenToViewSpace.w;
	return float3(ProjViewPos * SceneDepth, SceneDepth);
}
#line 1164 "/Engine/Private/Common.ush"
float2  ScreenAlignedPosition( float4 ScreenPosition )
{
	return  float2 (ScreenPositionToBufferUV(ScreenPosition));
}
#line 1172 "/Engine/Private/Common.ush"
float2  ScreenAlignedUV(  float2  UV )
{
	return (UV* float2 (2,-2) +  float2 (-1,1))*View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz;
}
#line 1180 "/Engine/Private/Common.ush"
float2  GetViewportCoordinates( float2  InFragmentCoordinates)
{
	return InFragmentCoordinates;
}
#line 1188 "/Engine/Private/Common.ush"
float4  UnpackNormalMap(  float4  TextureSample )
{



		float2  NormalXY = TextureSample.rg;


	NormalXY = NormalXY *  float2 (2.0f,2.0f) -  float2 (1.0f,1.0f);
	float  NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return  float4 ( NormalXY.xy, NormalZ, 1.0f );
}


float AntialiasedTextureMask( Texture2D Tex, SamplerState Sampler, float2 UV, float ThresholdConst, int Channel )
{

	float4  MaskConst =  float4 (Channel == 0, Channel == 1, Channel == 2, Channel == 3);


	const float WidthConst = 1.0f;
	float InvWidthConst = 1 / WidthConst;
#line 1232 "/Engine/Private/Common.ush"
	float Result;
	{

		float Sample1 = dot(MaskConst, Texture2DSample(Tex, Sampler, UV));


		float2 TexDD = float2(DDX(Sample1), DDY(Sample1));

		float TexDDLength = max(abs(TexDD.x), abs(TexDD.y));
		float Top = InvWidthConst * (Sample1 - ThresholdConst);
		Result = Top / TexDDLength + ThresholdConst;
	}

	Result = saturate(Result);

	return Result;
}



float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{

	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}



float  MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;

	[loop]  for(uint i = 0; i < Levels; ++i)
	{

		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{

		Out = Out * 0.5f + 0.5f;
	}


	return lerp(OutputMin, OutputMax, Out);
}





float4  MaterialExpressionVectorNoise( float3  Position, int Quality, int Function, bool bTiling, float TileSize)
{
	float4 result = float4(0,0,0,1);
	float3x4 Jacobian = JacobianSimplex_ALU(Position, bTiling, TileSize);


	switch (Function)
	{
	case 0:
		result.xyz = float3(Rand3DPCG16(int3(floor(NoiseTileWrap(Position, bTiling, TileSize))))) / 0xffff;
		break;
	case 1:
		result.xyz = float3(Jacobian[0].w, Jacobian[1].w, Jacobian[2].w);
		break;
	case 2:
		result = Jacobian[0];
		break;
	case 3:
		result.xyz = float3(Jacobian[2][1] - Jacobian[1][2], Jacobian[0][2] - Jacobian[2][0], Jacobian[1][0] - Jacobian[0][1]);
		break;
	default:
		result = VoronoiNoise3D_ALU(Position, Quality, bTiling, TileSize, false);
		break;
	}
	return result;
}
#line 1359 "/Engine/Private/Common.ush"
float2 LineBoxIntersect(float3 RayOrigin, float3 RayEnd, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0f / (RayEnd - RayOrigin);


	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;

	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;

	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);

	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;

	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));

	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));

	return saturate(BoxIntersections);
}


float  ComputeDistanceFromBoxToPoint( float3  Mins,  float3  Maxs,  float3  InPoint)
{
	float3  DistancesToMin = InPoint < Mins ? abs(InPoint - Mins) : 0;
	float3  DistancesToMax = InPoint > Maxs ? abs(InPoint - Maxs) : 0;


	float  Distance = dot(DistancesToMin, 1);
	Distance += dot(DistancesToMax, 1);
	return Distance;
}


float  ComputeSquaredDistanceFromBoxToPoint( float3  BoxCenter,  float3  BoxExtent,  float3  InPoint)
{
	float3  AxisDistances = max(abs(InPoint - BoxCenter) - BoxExtent, 0);
	return dot(AxisDistances, AxisDistances);
}


float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

bool RayHitSphere(float3 RayOrigin, float3 UnitRayDirection, float3 SphereCenter, float SphereRadius)
{
	float3 ClosestPointOnRay = max(0, dot(SphereCenter - RayOrigin, UnitRayDirection)) * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius);
}

bool RaySegmentHitSphere(float3 RayOrigin, float3 UnitRayDirection, float RayLength, float3 SphereCenter, float SphereRadius)
{
	float DistanceAlongRay = dot(SphereCenter - RayOrigin, UnitRayDirection);
	float3 ClosestPointOnRay = DistanceAlongRay * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius) && DistanceAlongRay > -SphereRadius && DistanceAlongRay - SphereRadius < RayLength;
}
#line 1428 "/Engine/Private/Common.ush"
float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;


	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}


float3  TransformTangentVectorToWorld( float3x3  TangentToWorld,  float3  InTangentVector)
{


	return mul(InTangentVector, TangentToWorld);
}


float3  TransformWorldVectorToTangent( float3x3  TangentToWorld,  float3  InWorldVector)
{


	return mul(TangentToWorld, InWorldVector);
}

float3 TransformWorldVectorToView(float3 InTangentVector)
{

	return mul(InTangentVector, (float3x3)ResolvedView.TranslatedWorldToView);
}


float  GetBoxPushout( float3  Normal, float3  Extent)
{
	return dot(abs(Normal * Extent),  float3 (1.0f, 1.0f, 1.0f));
}


void GenerateCoordinateSystem(float3 ZAxis, out float3 XAxis, out float3 YAxis)
{
	if (abs(ZAxis.x) > abs(ZAxis.y))
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.xz, ZAxis.xz));
		XAxis = float3(-ZAxis.z * InverseLength, 0.0f, ZAxis.x * InverseLength);
	}
	else
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.yz, ZAxis.yz));
		XAxis = float3(0.0f, ZAxis.z * InverseLength, -ZAxis.y * InverseLength);
	}

	YAxis = cross(ZAxis, XAxis);
}
#line 1507 "/Engine/Private/Common.ush"
struct FScreenVertexOutput
{




	noperspective  float2  UV : TEXCOORD0;

	float4 Position : SV_POSITION;
};





float2 EncodeVelocityToTexture(float2 In)
{


	return In * (0.499f * 0.5f) + 32767.0f / 65535.0f;
}

float2 DecodeVelocityFromTexture(float2 In)
{
	const float InvDiv = 1.0f / (0.499f * 0.5f);



	return In * InvDiv - 32767.0f / 65535.0f * InvDiv;
}


bool GetGIReplaceState()
{



	return false;

}

bool GetRayTracingQualitySwitch()
{



	return false;

}



bool GetRuntimeVirtualTextureOutputSwitch()
{



	return false;

}


struct FWriteToSliceGeometryOutput
{
	FScreenVertexOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};







void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float2 OutTexCoord)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters_PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters_PosScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
	OutTexCoord.xy = (DrawRectangleParameters_UVScaleBias.zw + (InTexCoord.xy * DrawRectangleParameters_UVScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.zw;
}


void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float4 OutUVAndScreenPos)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutUVAndScreenPos.xy);
	OutUVAndScreenPos.zw = OutPosition.xy;
}


void DrawRectangle(in float4 InPosition, out float4 OutPosition)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters_PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters_PosScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
}
#line 1623 "/Engine/Private/Common.ush"
float SafeSaturate(float In) { return saturate(In);}
float2 SafeSaturate(float2 In) { return saturate(In);}
float3 SafeSaturate(float3 In) { return saturate(In);}
float4 SafeSaturate(float4 In) { return saturate(In);}
#line 1652 "/Engine/Private/Common.ush"
bool IsFinite(float In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool IsPositiveFinite(float In) { return asuint(In) < 0x7F800000; }float MakeFinite(float In) { return !IsFinite(In)? 0 : In; }float MakePositiveFinite(float In) { return !IsPositiveFinite(In)? 0 : In; }
bool2 IsFinite(float2 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool2 IsPositiveFinite(float2 In) { return asuint(In) < 0x7F800000; }float2 MakeFinite(float2 In) { return !IsFinite(In)? 0 : In; }float2 MakePositiveFinite(float2 In) { return !IsPositiveFinite(In)? 0 : In; }
bool3 IsFinite(float3 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool3 IsPositiveFinite(float3 In) { return asuint(In) < 0x7F800000; }float3 MakeFinite(float3 In) { return !IsFinite(In)? 0 : In; }float3 MakePositiveFinite(float3 In) { return !IsPositiveFinite(In)? 0 : In; }
bool4 IsFinite(float4 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool4 IsPositiveFinite(float4 In) { return asuint(In) < 0x7F800000; }float4 MakeFinite(float4 In) { return !IsFinite(In)? 0 : In; }float4 MakePositiveFinite(float4 In) { return !IsPositiveFinite(In)? 0 : In; }





bool GetShadowReplaceState()
{



	return false;

}

float IsShadowDepthShader()
{
	return GetShadowReplaceState() ? 1.0f : 0.0f;
}




float DecodePackedTwoChannelValue(float2 PackedHeight)
{
	return PackedHeight.x * 255.0 * 256.0 + PackedHeight.y * 255.0;
}

float DecodeHeightValue(float InValue)
{
	return (InValue - 32768.0) *  (1.0f/128.0f) ;
}

float DecodePackedHeight(float2 PackedHeight)
{
	return DecodeHeightValue(DecodePackedTwoChannelValue(PackedHeight));
}


uint ReverseBits32( uint bits )
{

	return reversebits( bits );
#line 1706 "/Engine/Private/Common.ush"
}


uint ReverseBitsN(uint Bitfield, const uint BitCount)
{
	return ReverseBits32(Bitfield) >> (32 - BitCount);
}


struct FPixelShaderIn
{

	float4 SvPosition;


	uint Coverage;


	bool bIsFrontFace;
};

struct FPixelShaderOut
{

	float4 MRT[8];


	uint Coverage;


	float Depth;
};
#line 12 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/GlobalDistanceFieldShared.ush"
#line 12 "/Engine/Private/GlobalDistanceFieldShared.ush"
float MaxGlobalDistance;
#line 37 "/Engine/Private/GlobalDistanceFieldShared.ush"
	Texture3D GlobalDistanceFieldTexture0;
	Texture3D GlobalDistanceFieldTexture1;
	Texture3D GlobalDistanceFieldTexture2;
	Texture3D GlobalDistanceFieldTexture3;
	SamplerState GlobalDistanceFieldSampler0;
	SamplerState GlobalDistanceFieldSampler1;
	SamplerState GlobalDistanceFieldSampler2;
	SamplerState GlobalDistanceFieldSampler3;
	float4 GlobalVolumeCenterAndExtent[ 4 ];
	float4 GlobalVolumeWorldToUVAddAndMul[ 4 ];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
#line 63 "/Engine/Private/GlobalDistanceFieldShared.ush"
float4 SampleGlobalDistanceField(int ClipmapIndex, float3 UV)
{
	if (ClipmapIndex == 0)
	{
		return Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , UV, 0);
	}
	else if (ClipmapIndex == 1)
	{
		return Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , UV, 0);
	}
	else if (ClipmapIndex == 2)
	{
		return Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , UV, 0);
	}
	else
	{
		return Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , UV, 0);
	}
}

float3 ComputeGlobalUV(float3 WorldPosition, uint ClipmapIndex)
{

	float4 WorldToUVAddAndMul = GlobalVolumeWorldToUVAddAndMul[ClipmapIndex];
	return WorldPosition * WorldToUVAddAndMul.www + WorldToUVAddAndMul.xyz;
}

float GetDistanceToNearestSurfaceGlobalClipmap(float3 WorldPosition, uint ClipmapIndex, float OuterClipmapFade)
{
	float3 GlobalUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);
	float DistanceToSurface = 0;
	if (ClipmapIndex == 0)
	{
		DistanceToSurface = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , GlobalUV, 0).x;
	}
	else if (ClipmapIndex == 1)
	{
		DistanceToSurface = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , GlobalUV, 0).x;
	}
	else if (ClipmapIndex == 2)
	{
		DistanceToSurface = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , GlobalUV, 0).x;
	}
	else if (ClipmapIndex == 3)
	{
		DistanceToSurface = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , GlobalUV, 0).x;
		DistanceToSurface = lerp(MaxGlobalDistance, DistanceToSurface, OuterClipmapFade);
	}
	return DistanceToSurface;
}

float GetDistanceToNearestSurfaceGlobal(float3 WorldPosition)
{
	float DistanceToSurface = MaxGlobalDistance;
	float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[0].xyz, GlobalVolumeCenterAndExtent[0].www, WorldPosition);


	[branch]
	if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[0].w * GlobalVolumeTexelSize)
	{
		DistanceToSurface = GetDistanceToNearestSurfaceGlobalClipmap(WorldPosition, 0, 0);
	}
	else
	{
		DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[1].xyz, GlobalVolumeCenterAndExtent[1].www, WorldPosition);

		[branch]
		if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[1].w * GlobalVolumeTexelSize)
		{
			DistanceToSurface = GetDistanceToNearestSurfaceGlobalClipmap(WorldPosition, 1, 0);
		}
		else
		{
			DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[2].xyz, GlobalVolumeCenterAndExtent[2].www, WorldPosition);
			float DistanceFromLastClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[3].xyz, GlobalVolumeCenterAndExtent[3].www, WorldPosition);

			[branch]
			if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[2].w * GlobalVolumeTexelSize)
			{
				DistanceToSurface = GetDistanceToNearestSurfaceGlobalClipmap(WorldPosition, 2, 0);
			}
			else if (DistanceFromLastClipmap > GlobalVolumeCenterAndExtent[3].w * GlobalVolumeTexelSize)
			{

				float OuterClipmapFade = saturate(DistanceFromLastClipmap * 10 * GlobalVolumeWorldToUVAddAndMul[3].w);
				DistanceToSurface = GetDistanceToNearestSurfaceGlobalClipmap(WorldPosition, 3, OuterClipmapFade);
			}
		}
	}

	return DistanceToSurface;
}

float3 GetDistanceFieldGradientGlobalClipmap(float3 WorldPosition, uint ClipmapIndex)
{
	float3 GlobalUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);

	float R = 0;
	float L = 0;
	float F = 0;
	float B = 0;
	float U = 0;
	float D = 0;

	if (ClipmapIndex == 0)
	{
		R = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x + GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		L = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x - GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		F = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y + GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		B = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y - GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		U = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z + GlobalVolumeTexelSize), 0).x;
		D = Texture3DSampleLevel(GlobalDistanceFieldTexture0,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z - GlobalVolumeTexelSize), 0).x;
	}
	else if (ClipmapIndex == 1)
	{
		R = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x + GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		L = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x - GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		F = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y + GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		B = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y - GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		U = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z + GlobalVolumeTexelSize), 0).x;
		D = Texture3DSampleLevel(GlobalDistanceFieldTexture1,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z - GlobalVolumeTexelSize), 0).x;
	}
	else if (ClipmapIndex == 2)
	{
		R = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x + GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		L = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x - GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		F = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y + GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		B = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y - GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		U = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z + GlobalVolumeTexelSize), 0).x;
		D = Texture3DSampleLevel(GlobalDistanceFieldTexture2,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z - GlobalVolumeTexelSize), 0).x;
	}
	else if (ClipmapIndex == 3)
	{
		R = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x + GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		L = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x - GlobalVolumeTexelSize, GlobalUV.y, GlobalUV.z), 0).x;
		F = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y + GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		B = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y - GlobalVolumeTexelSize, GlobalUV.z), 0).x;
		U = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z + GlobalVolumeTexelSize), 0).x;
		D = Texture3DSampleLevel(GlobalDistanceFieldTexture3,  GlobalDistanceFieldSampler0 , float3(GlobalUV.x, GlobalUV.y, GlobalUV.z - GlobalVolumeTexelSize), 0).x;
	}

	float Extent = GlobalVolumeCenterAndExtent[ClipmapIndex].w;
	float3 Gradient = .5f * float3(R - L, F - B, U - D) / Extent;
	return Gradient;
}

float3 GetDistanceFieldGradientGlobal(float3 WorldPosition)
{
	float3 Gradient = float3(0, 0, .001f);
	float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[0].xyz, GlobalVolumeCenterAndExtent[0].www, WorldPosition);

	float BorderTexels = GlobalVolumeTexelSize * 4;

	[branch]
	if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[0].w * BorderTexels)
	{
		Gradient = GetDistanceFieldGradientGlobalClipmap(WorldPosition, 0);
	}
	else
	{
		DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[1].xyz, GlobalVolumeCenterAndExtent[1].www, WorldPosition);

		[branch]
		if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[1].w * BorderTexels)
		{
			Gradient = GetDistanceFieldGradientGlobalClipmap(WorldPosition, 1);
		}
		else
		{
			DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[2].xyz, GlobalVolumeCenterAndExtent[2].www, WorldPosition);
			float DistanceFromLastClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[3].xyz, GlobalVolumeCenterAndExtent[3].www, WorldPosition);

			[branch]
			if (DistanceFromClipmap > GlobalVolumeCenterAndExtent[2].w * BorderTexels)
			{
				Gradient = GetDistanceFieldGradientGlobalClipmap(WorldPosition, 2);
			}
			else if (DistanceFromLastClipmap > GlobalVolumeCenterAndExtent[3].w * BorderTexels)
			{
				Gradient = GetDistanceFieldGradientGlobalClipmap(WorldPosition, 3);
			}
		}
	}

	return Gradient;
}
#line 13 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 16 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	const static float TWO_PI = 3.1415926535897932f*2.0f;




float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }

bool NiagaraAll(bool2 b) { return all(b); }
bool NiagaraAll(bool3 b) { return all(b); }
bool NiagaraAll(bool4 b) { return all(b); }
bool NiagaraAny(bool2 b) { return any(b); }
bool NiagaraAny(bool3 b) { return any(b); }
bool NiagaraAny(bool4 b) { return any(b); }
#line 62 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	static uint3 GDispatchThreadId;
	static uint3 GGroupThreadId;
	static uint GCurrentPhase;
	static uint GEmitterTickCounter;
	static uint GSimStart;
	static uint GRandomSeedOffset = 0;
	static bool GStageWritesAlive = false;

	const static uint GSpawnPhase = 0;
	const static uint GUpdatePhase = 1;
#line 74 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/SceneTexturesCommon.ush"
#line 19 "/Engine/Private/SceneTexturesCommon.ush"
float3 CalcSceneColor(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct_SceneColorTextureSampler, ScreenUV, 0).rgb;

}


float4 CalcFullSceneColor(float2 ScreenUV)
{



	return Texture2DSample(SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct_SceneColorTextureSampler,ScreenUV);

}

float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct_SceneDepthTextureSampler, ScreenUV, 0).r);

}
#line 50 "/Engine/Private/SceneTexturesCommon.ush"
float4 CalcSceneColorAndDepth( float2 ScreenUV )
{
	return float4(CalcSceneColor(ScreenUV), CalcSceneDepth(ScreenUV));
}


float LookupDeviceZ( float2 ScreenUV )
{




	return Texture2DSampleLevel(SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct_SceneDepthTextureSampler, ScreenUV, 0).r;

}


float CalcSceneDepth(uint2 PixelPos)
{



	float DeviceZ = SceneTexturesStruct_SceneDepthTextureNonMS.Load(int3(PixelPos, 0));


	return ConvertFromDeviceZ(DeviceZ);

}
#line 75 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 81 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	uint EmitterTickCounter;



	float4 Modulo(float4 x, float4 y){ return fmod(x,y); }
	float3 Modulo(float3 x, float3 y){ return fmod(x,y); }
	float2 Modulo(float2 x, float2 y){ return fmod(x,y); }
	float Modulo(float x, float y){ return fmod(x,y); }


	float3 WorldPositionFromSceneDepth(float2 ScreenPosition, float SceneDepth)
	{
		float4 HomogeneousWorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), View_ScreenToWorld);
		return HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;
	}





	float NiagaraInternalNoise(uint u, uint v, uint s)
	{
		uint Seed = (u * 1664525u + v) + s + GRandomSeedOffset;
		GRandomSeedOffset += Seed;
		return float(Rand3DPCG32(int3(u,v,Seed)).x) / 4294967296.0f;
	}




	int4 EmitterSpawnInfoOffsets[ (( 8 + 3) / 4) ];
	float4 EmitterSpawnInfoParams[ 8 ];

	static int GInterpSpawnIndex;
	static float Emitter_SpawnInterval;
	static float Emitter_InterpSpawnStartDt;
	static int Emitter_SpawnGroup;

	static int Engine_ExecutionCount;
	static int GGPUExecIndex;

	static uint GSpawnStartInstance;
	uint SpawnedInstances;
	uint UpdateStartInstance;

	void SetupExecIndexForGPU()
	{
		GGPUExecIndex = UpdateStartInstance + GDispatchThreadId.x;
		Engine_ExecutionCount = GSpawnStartInstance;
	}

	void SetupExecIndexAndSpawnInfoForGPU()
	{
		GGPUExecIndex = UpdateStartInstance + GDispatchThreadId.x - GSpawnStartInstance;

		int SpawnInfoIndex = 0;
		[unroll]
		for (int i = 0; i <  (( 8 + 3) / 4) ; ++i)
		{


			int4 CompareResults = GGPUExecIndex >= EmitterSpawnInfoOffsets[i];
			CompareResults = CompareResults & int4(1, 1, 1, 1);
			SpawnInfoIndex += CompareResults.x + CompareResults.y + CompareResults.z + CompareResults.w;
		}

		Emitter_SpawnInterval = EmitterSpawnInfoParams[SpawnInfoIndex].x;
		Emitter_InterpSpawnStartDt = EmitterSpawnInfoParams[SpawnInfoIndex].y;
		Emitter_SpawnGroup = asint(EmitterSpawnInfoParams[SpawnInfoIndex].z);

		int GroupSpawnStartIndex = asint(EmitterSpawnInfoParams[SpawnInfoIndex].w);
		GGPUExecIndex = GGPUExecIndex - GroupSpawnStartIndex;
		if ( SpawnInfoIndex == ( 8  - 1) )
		{
			Engine_ExecutionCount = int(SpawnedInstances) - GroupSpawnStartIndex;
		}
		else
		{
			int NextGroupSpawnStartIndex = asint(EmitterSpawnInfoParams[SpawnInfoIndex + 1].w);
			Engine_ExecutionCount = NextGroupSpawnStartIndex - GroupSpawnStartIndex;
		}
	}
#line 166 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int ExecIndex()
	{
		return GGPUExecIndex;
	}
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 288 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	static int RandomCounterNonDeterministic = -1;

	float rand(float x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).x * x;
	}

	float2 rand(float2 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).xy * x;
	}

	float3 rand(float3 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).xyz * x;
	}

	float4 rand(float4 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).xyzw * x;
	}


	int rand(int x)
	{
		RandomCounterNonDeterministic -= 1;
		return int(rand4(GDispatchThreadId.x, EmitterTickCounter, GDispatchThreadId.x, RandomCounterNonDeterministic).x * (x+1));
	}
#line 344 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 451 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int DefaultSimulationStageIndex;
	int SimulationStageIndex;

	int IterationInterfaceCount;

	uint ComponentBufferSizeRead;
	uint ComponentBufferSizeWrite;
	int NumEventsPerParticle;
	int NumParticlesPerEvent;
	uint CopyInstancesBeforeStart;

	uint SimStart;
#line 466 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	Buffer<float> InputFloat;
	Buffer<int> InputInt;
	RWBuffer<int> RWOutputInt;
	RWBuffer<float> RWOutputFloat;

	RWBuffer<uint> RWInstanceCounts;
	uint ReadInstanceCountOffset;
	uint WriteInstanceCountOffset;

	Buffer<int> FreeIDList;
	RWBuffer<int> RWIDToIndexTable;

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag)
	{

		int MustBe0[1];
		MustBe0[DataSetID] = 0;




		int SpawnIndex = UpdateStartInstance + GDispatchThreadId.x - GSpawnStartInstance;
		IDIndex = FreeIDList[SpawnIndex];
		IDAcquireTag = EmitterTickCounter;
	}

 	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex)
	{

		int MustBe0[1];
		MustBe0[DataSetID] = 0;


		RWIDToIndexTable[IDIndex] = InstanceIndex;
	}
#line 512 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
		groupshared uint GroupSharedIndex[32];
		groupshared uint GroupSharedIndex4[8];
		groupshared uint GroupSharedIndex16[2];
		groupshared uint GroupSharedIndex64;
#line 522 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int AcquireIndex(uniform int DataSetID, bool bDoAcquire)
	{

		int MustBe0[1];
		MustBe0[DataSetID] = 0;


		int PrevIdx = GSpawnStartInstance + SpawnedInstances;
#line 553 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			GroupSharedIndex[GGroupThreadId.x] = bDoAcquire ? 1 : 0;
			GroupMemoryBarrierWithGroupSync();


			if ((GGroupThreadId.x & 0x3) == 0)
			{
				const uint Index = GGroupThreadId.x;

				const uint ActiveCount1 = GroupSharedIndex[Index];
				const uint ActiveCount2 = ActiveCount1 + GroupSharedIndex[Index + 1];
				const uint ActiveCount3 = ActiveCount2 + GroupSharedIndex[Index + 2];
				const uint ActiveCount4 = ActiveCount3 + GroupSharedIndex[Index + 3];

				GroupSharedIndex[Index] = 0;
				GroupSharedIndex[Index + 1] = ActiveCount1;
				GroupSharedIndex[Index + 2] = ActiveCount2;
				GroupSharedIndex[Index + 3] = ActiveCount3;
				GroupSharedIndex4[Index / 4] = ActiveCount4;
			}
			GroupMemoryBarrierWithGroupSync();


			if ((GGroupThreadId.x & 0xF) == 0)
			{
				const uint Index = GGroupThreadId.x / 4;

				const uint ActiveCount1 = GroupSharedIndex4[Index];
				const uint ActiveCount2 = ActiveCount1 + GroupSharedIndex4[Index + 1];
				const uint ActiveCount3 = ActiveCount2 + GroupSharedIndex4[Index + 2];
				const uint ActiveCount4 = ActiveCount3 + GroupSharedIndex4[Index + 3];

				GroupSharedIndex4[Index] = 0;
				GroupSharedIndex4[Index + 1] = ActiveCount1;
				GroupSharedIndex4[Index + 2] = ActiveCount2;
				GroupSharedIndex4[Index + 3] = ActiveCount3;
				GroupSharedIndex16[Index / 4] = ActiveCount4;
			}
			GroupMemoryBarrierWithGroupSync();


			if ((GGroupThreadId.x & 0x3F) == 0)
			{
				const uint Index = GGroupThreadId.x / 16;
				uint RetPrevIdx = 0;

				const uint ActiveCount1 = GroupSharedIndex16[Index];
				const uint ActiveCount2 = ActiveCount1 + GroupSharedIndex16[Index + 1];
#line 605 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
				GroupSharedIndex16[Index] = 0;
				GroupSharedIndex16[Index + 1] = ActiveCount1;






				InterlockedAdd(RWInstanceCounts[WriteInstanceCountOffset], ActiveCount2, RetPrevIdx);

				GroupSharedIndex64 = RetPrevIdx;
			}
			GroupMemoryBarrierWithGroupSync();

			PrevIdx = GroupSharedIndex64 + GroupSharedIndex16[GGroupThreadId.x / 16] + GroupSharedIndex4[GGroupThreadId.x / 4] + GroupSharedIndex[GGroupThreadId.x];
#line 634 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
		return PrevIdx;
	}
#line 641 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float InputDataFloat(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputFloat[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];
	}

	int InputDataInt(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];
	}

	bool InputDataBool(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{
		return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx] == -1;
	}
#line 661 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value)
	{
		RWOutputFloat[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value;
	}

	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value;
	}

	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex + UpdateStartInstance] = Value ? -1 : 0;
	}

	void EnterStatScope(int ID) {}
	void ExitStatScope() {}
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct MeshTriCoordinate
{
	int Tri;
	float3 BaryCoord;
};

struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_Initialize_MeshReproductionSprite_MaxParticleSize;
	float Constants_Emitter_Initialize_MeshReproductionSprite_ParticleScale;
	float Constants_Emitter_Initialize_MeshReproductionSprite_KillParticlesBelowXWidth;
	float Constants_Emitter_InitializeParticle_Lifetime;
	float4 Constants_Emitter_InitializeParticle_Color;
	float Constants_Emitter_InitializeParticle_Mass;
	float4 Constants_Emitter_InitializeParticle_SpriteSize;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float4 Constants_Emitter_InitializeParticle_MeshScale;
	float Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float4 Constants_Emitter_GravityForce_Gravity;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float4 Constants_Emitter_Update_MeshReproductionSprite_SpriteSize;
	float Emitter_SpawnRate;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Constants_Emitter_Initialize_MeshReproductionSprite_MaxParticleSize;
	float PREV_Constants_Emitter_Initialize_MeshReproductionSprite_ParticleScale;
	float PREV_Constants_Emitter_Initialize_MeshReproductionSprite_KillParticlesBelowXWidth;
	float PREV_Constants_Emitter_InitializeParticle_Lifetime;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float4 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float4 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	float PREV_Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float4 PREV_Constants_Emitter_GravityForce_Gravity;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float4 PREV_Constants_Emitter_Update_MeshReproductionSprite_SpriteSize;
	float PREV_Emitter_SpawnRate;
}

struct FParamMap0_Update_MeshReproductionSprite
{
	MeshTriCoordinate MeshTriCoordinate;
	bool OverwriteIntrinsicVariables;
	float2 SpriteSize;
	float UVWidth;
};

struct FParamMap0_Transient
{
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float3 PhysicsRotationalForce;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initialize_MeshReproductionSprite
{
	MeshTriCoordinate MeshTriCoordinate;
	float2 SpriteSize;
	float TriangleUVArea;
	float TriangleWorldSpaceArea;
	float UVWidth;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float4 DynamicMaterialParameter3;
	FParamMap0_Particles_Initialize_MeshReproductionSprite Initialize_MeshReproductionSprite;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float RotationalInertia;
	float3 RotationalVelocity;
	float3 Scale;
	float3 SpriteAlignment;
	float3 SpriteFacing;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_Update_MeshReproductionSprite
{
	float4 DynamicMaterialParameter3;
	float3 MeshPosition;
	float3 MeshSpriteAlignment;
	float3 MeshSpriteFacing;
	float3 MeshTriangleVelocity;
	float3 Normals;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_Initialize_MeshReproductionSprite
{
	float CalculatedSpriteSize;
	float4 MeshVertexColor;
	float3 Position;
};

struct FParamMap0_OUTPUT_VAR_ApplyInitialForces
{
	float3 IncomingPhysicsForce;
	float3 IncomingPhysicsRotationalForce;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ApplyInitialForces ApplyInitialForces;
	FParamMap0_OUTPUT_VAR_Initialize_MeshReproductionSprite Initialize_MeshReproductionSprite;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_Update_MeshReproductionSprite Update_MeshReproductionSprite;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_Initialize_MeshReproductionSprite
{
	float3 MeshBinormal;
	float3 MeshNormal;
	float3 MeshTangent;
	float2 MeshUV;
	float ScaleModulationValue;
	float3 Velocity;
};

struct FParamMap0_Local
{
	FParamMap0_Local_Initialize_MeshReproductionSprite Initialize_MeshReproductionSprite;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_Initialize_MeshReproductionSprite
{
	bool KillParticlesBasedontheMinParticleSizeRestriction;
	float KillParticlesBelowXWidth;
	float MaxParticleSize;
	bool OverwriteIntrinsicVariables;
	float ParticleScale;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	bool LocalSpace;
	int RandomSeed;
	float SpawnRate;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_Update_MeshReproductionSprite
{
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float3 MeshScale;
	float SpriteRotation;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_Initialize_MeshReproductionSprite
{
	float KillParticlesBelowXWidth;
	float MaxParticleSize;
	float ParticleScale;
};

struct FParamMap0_Constants_Emitter_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter_ApplyInitialForces
{
	float PositionalForceWarmupTime;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_ApplyInitialForces ApplyInitialForces;
	FParamMap0_Constants_Emitter_GravityForce GravityForce;
	FParamMap0_Constants_Emitter_Initialize_MeshReproductionSprite Initialize_MeshReproductionSprite;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_Update_MeshReproductionSprite Update_MeshReproductionSprite;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_ApplyInitialForces
{
	bool ApplyForcetoPosition;
	bool ApplyForcetoVelocity;
	bool ApplyRotationalForcetoRotationalVelocity;
	float PositionalForceWarmupTime;
};

struct FParamMap0
{
	FParamMap0_ApplyInitialForces ApplyInitialForces;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_Initialize_MeshReproductionSprite Initialize_MeshReproductionSprite;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_Update_MeshReproductionSprite Update_MeshReproductionSprite;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomTriCoord_EmitterMesh001(NiagaraRandInfo In_RandomInfo, out MeshTriCoordinate Out_Coord);
void GetTriColor_EmitterMesh001(MeshTriCoordinate In_Coord, out float4 Out_Color);
void GetSkinnedTriangleDataWS_EmitterMesh001(MeshTriCoordinate In_Coord, out float3 Out_Position, out float3 Out_Velocity, out float3 Out_Normal, out float3 Out_Binormal, out float3 Out_Tangent);
void GetTriUV_EmitterMesh001(MeshTriCoordinate In_Coord, int In_UVSet, out float2 Out_UV);
void CalculateTriangleArea_Func_(float In_SideALength, float In_SideBLength, float In_SideCLength, out float Out_Area, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void Initialize_MeshReproductionSprite_Emitter_Func_(inout FSimulationContext Context);
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void ApplyInitialForces_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void GetSkinnedTriangleDataWS_EmitterMesh(MeshTriCoordinate In_Coord, out float3 Out_Position, out float3 Out_Velocity, out float3 Out_Normal, out float3 Out_Binormal, out float3 Out_Tangent);
void GetTriUV_EmitterMesh(MeshTriCoordinate In_Coord, int In_UVSet, out float2 Out_UV);
void Update_MeshReproductionSprite_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant39 = false;
	int Constant40 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant40);
	bool Result1 = Constant39 && Result;
	int Constant41 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant41);
	bool Result3 = Result1 || Result2;
	bool Constant42 = false;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant43 = 0;
	int Constant44 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(Constant42)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant43;
	Seed3_IfResult = Constant44;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant45 = -1;
	int Constant46 = -1;
	int Constant47 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant45;
	Seed2_IfResult1 = Constant46;
	Seed3_IfResult1 = Constant47;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void CalculateTriangleArea_Func_(float In_SideALength, float In_SideBLength, float In_SideCLength, out float Out_Area, inout FSimulationContext Context)
{
	float Result10 = In_SideALength + In_SideBLength;
	float Result11 = Result10 + In_SideCLength;
	float Constant52 = 0.5;
	float Result12 = Result11 * Constant52;
	float Result13 = Result12 - In_SideALength;
	float Result14 = Result12 * Result13;
	float Result15 = Result12 - In_SideBLength;
	float Result16 = Result14 * Result15;
	float Result17 = Result12 - In_SideCLength;
	float Result18 = Result16 * Result17;
	float Result19 = sqrt(Result18);
	Out_Area = Result19;
}

void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant70 = false;
	int Constant71 = 0;
	bool Result44 = NiagaraAll(In_RandomnessMode == Constant71);
	bool Result45 = Constant70 && Result44;
	int Constant72 = 1;
	bool Result46 = NiagaraAll(In_RandomnessMode == Constant72);
	bool Result47 = Result45 || Result46;
	int Seed_IfResult1;
	if(In_OverrideSeed)
	{
	Seed_IfResult1 = In_Seed;
	}
	else
	{
	Seed_IfResult1 = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant73 = 0;
	int Constant74 = 0;
	int Seed1_IfResult2;
	int Seed2_IfResult2;
	int Seed3_IfResult2;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult2 = Seed_IfResult1;
	Seed2_IfResult2 = Constant73;
	Seed3_IfResult2 = Constant74;
	}
	else
	{
	Seed1_IfResult2 = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult2 = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult2 = Seed_IfResult1;
	}
	int Constant75 = -1;
	int Constant76 = -1;
	int Constant77 = -1;
	int Seed1_IfResult3;
	int Seed2_IfResult3;
	int Seed3_IfResult3;
	if(Result47)
	{
	Seed1_IfResult3 = Seed1_IfResult2;
	Seed2_IfResult3 = Seed2_IfResult2;
	Seed3_IfResult3 = Seed3_IfResult2;
	}
	else
	{
	Seed1_IfResult3 = Constant75;
	Seed2_IfResult3 = Constant76;
	Seed3_IfResult3 = Constant77;
	}
	NiagaraRandInfo Output15;
	Output15.Seed1 = Seed1_IfResult3;
	Output15.Seed2 = Seed2_IfResult3;
	Output15.Seed3 = Seed3_IfResult3;
	Out_RandomInfo = Output15;
	Out_UseDeterministicRandoms = Result47;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant65 = (0);
	bool Constant66 = false;
	int Constant67 = 0;
	int Constant68 = (0);
	bool Constant69 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant65, In_OverrideSeed, Constant67, Constant68, Constant69, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1, Context);
	float Result48 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed3;
	float Result49 = rand_float(Result48, Seed1, Seed2, Seed3);
	float Result50 = rand_float(Result48);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult = Result49;
	}
	else
	{
	Random_IfResult = Result50;
	}
	float Result51 = In_Min + Random_IfResult;
	Out_Result = Result51;
}

void Initialize_MeshReproductionSprite_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant32 = -1;
	int Constant33 = (0);
	bool Constant34 = false;
	bool Constant35 = false;
	int Constant36 = 0;
	int Constant37 = (0);
	int Constant38 = 0;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(Constant32, Constant33, Constant35, Constant36, Constant37, Constant38, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms, Context);
	MeshTriCoordinate RandomTriCoord_EmitterMesh001Output_Coord;
	RandomTriCoord_EmitterMesh001(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo, RandomTriCoord_EmitterMesh001Output_Coord);
	float4 GetTriColor_EmitterMesh001Output_Color;
	GetTriColor_EmitterMesh001(RandomTriCoord_EmitterMesh001Output_Coord, GetTriColor_EmitterMesh001Output_Color);
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate = RandomTriCoord_EmitterMesh001Output_Coord;
	Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.MeshVertexColor = GetTriColor_EmitterMesh001Output_Color;
	int Tri;
	float3 BaryCoord;
	Tri = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.Tri;
	BaryCoord = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord;
	MeshTriCoordinate Output11;
	Output11.Tri = Tri;
	Output11.BaryCoord = BaryCoord;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Position;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent;
	GetSkinnedTriangleDataWS_EmitterMesh001(Output11, GetSkinnedTriangleDataWS_EmitterMesh001Output_Position, GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity, GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal, GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal, GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent);
	int Constant48 = 0;
	float2 GetTriUV_EmitterMesh001Output_UV;
	GetTriUV_EmitterMesh001(Output11, Constant48, GetTriUV_EmitterMesh001Output_UV);
	Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.Position = GetSkinnedTriangleDataWS_EmitterMesh001Output_Position;
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.Velocity = GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity;
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshNormal = GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal;
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshBinormal = GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal;
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshTangent = GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent;
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshUV = GetTriUV_EmitterMesh001Output_UV;
	int Tri1;
	float3 BaryCoord1;
	Tri1 = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.Tri;
	BaryCoord1 = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord;
	float3 Constant49 = float3(1,0,0);
	MeshTriCoordinate Output12;
	Output12.Tri = Tri1;
	Output12.BaryCoord = Constant49;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Position1;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity1;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal1;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal1;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent1;
	GetSkinnedTriangleDataWS_EmitterMesh001(Output12, GetSkinnedTriangleDataWS_EmitterMesh001Output_Position1, GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity1, GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal1, GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal1, GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent1);
	float3 Constant50 = float3(0,1,0);
	MeshTriCoordinate Output13;
	Output13.Tri = Tri1;
	Output13.BaryCoord = Constant50;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Position2;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity2;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal2;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal2;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent2;
	GetSkinnedTriangleDataWS_EmitterMesh001(Output13, GetSkinnedTriangleDataWS_EmitterMesh001Output_Position2, GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity2, GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal2, GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal2, GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent2);
	float3 Result4 = GetSkinnedTriangleDataWS_EmitterMesh001Output_Position1 - GetSkinnedTriangleDataWS_EmitterMesh001Output_Position2;
	float Result5 = length(Result4);
	float3 Constant51 = float3(0,0,1);
	MeshTriCoordinate Output14;
	Output14.Tri = Tri1;
	Output14.BaryCoord = Constant51;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Position3;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity3;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal3;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal3;
	float3 GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent3;
	GetSkinnedTriangleDataWS_EmitterMesh001(Output14, GetSkinnedTriangleDataWS_EmitterMesh001Output_Position3, GetSkinnedTriangleDataWS_EmitterMesh001Output_Velocity3, GetSkinnedTriangleDataWS_EmitterMesh001Output_Normal3, GetSkinnedTriangleDataWS_EmitterMesh001Output_Binormal3, GetSkinnedTriangleDataWS_EmitterMesh001Output_Tangent3);
	float3 Result6 = GetSkinnedTriangleDataWS_EmitterMesh001Output_Position1 - GetSkinnedTriangleDataWS_EmitterMesh001Output_Position3;
	float Result7 = length(Result6);
	float3 Result8 = GetSkinnedTriangleDataWS_EmitterMesh001Output_Position2 - GetSkinnedTriangleDataWS_EmitterMesh001Output_Position3;
	float Result9 = length(Result8);
	float CalculateTriangleArea_Func_Output_Area;
	CalculateTriangleArea_Func_(Result5, Result7, Result9, CalculateTriangleArea_Func_Output_Area, Context);
	int Constant53 = 0;
	float2 GetTriUV_EmitterMesh001Output_UV1;
	GetTriUV_EmitterMesh001(Output12, Constant53, GetTriUV_EmitterMesh001Output_UV1);
	int Constant54 = 0;
	float2 GetTriUV_EmitterMesh001Output_UV2;
	GetTriUV_EmitterMesh001(Output13, Constant54, GetTriUV_EmitterMesh001Output_UV2);
	float2 Result20 = GetTriUV_EmitterMesh001Output_UV1 - GetTriUV_EmitterMesh001Output_UV2;
	float Result21 = length(Result20);
	int Constant55 = 0;
	float2 GetTriUV_EmitterMesh001Output_UV3;
	GetTriUV_EmitterMesh001(Output14, Constant55, GetTriUV_EmitterMesh001Output_UV3);
	float2 Result22 = GetTriUV_EmitterMesh001Output_UV1 - GetTriUV_EmitterMesh001Output_UV3;
	float Result23 = length(Result22);
	float2 Result24 = GetTriUV_EmitterMesh001Output_UV2 - GetTriUV_EmitterMesh001Output_UV3;
	float Result25 = length(Result24);
	float CalculateTriangleArea_Func_Output_Area1;
	CalculateTriangleArea_Func_(Result21, Result23, Result25, CalculateTriangleArea_Func_Output_Area1, Context);
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleWorldSpaceArea = CalculateTriangleArea_Func_Output_Area;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleUVArea = CalculateTriangleArea_Func_Output_Area1;
	float Result26 = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleWorldSpaceArea / Context.MapSpawn.Constants.Emitter.Initialize_MeshReproductionSprite.MaxParticleSize;
	float Constant56 = 1;
	bool Result27 = NiagaraAll(Result26 > Constant56);
	float Constant57 = 1;
	float Result28 = Constant57 / Result26;
	float Constant58 = 1;
	float float_IfResult;
	if(Result27)
	{
	float_IfResult = Result28;
	}
	else
	{
	float_IfResult = Constant58;
	}
	float Result29 = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleUVArea * float_IfResult;
	float Result30 = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleWorldSpaceArea * float_IfResult;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.UVWidth = Result29;
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.ScaleModulationValue = Result30;
	float3 Result31 = cross(Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshBinormal,Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshTangent);
	float Result32 = dot(Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshNormal,Result31);
	float Result33 = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.UVWidth / Context.MapSpawn.Local.Initialize_MeshReproductionSprite.ScaleModulationValue;
	float Result34 = sqrt(Context.MapSpawn.Local.Initialize_MeshReproductionSprite.ScaleModulationValue);
	float Result35 = Result34 * Context.MapSpawn.Constants.Emitter.Initialize_MeshReproductionSprite.ParticleScale;
	float Result36 = Result35 * Result35;
	float Result37 = Result33 * Result36;
	float Result38 = sqrt(Result37);
	float Result39 = abs(Result38);
	float Result40 = Result32 * Result39;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.UVWidth = Result40;
	Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.CalculatedSpriteSize = Result35;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.SpriteSize = Result35;
	bool Result41 = NiagaraAll(Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.CalculatedSpriteSize >= Context.MapSpawn.Constants.Emitter.Initialize_MeshReproductionSprite.KillParticlesBelowXWidth);
	bool Result42 = Result41 && Context.MapSpawn.DataInstance.Alive;
	bool bool_IfResult;
	if(Context.MapSpawn.Initialize_MeshReproductionSprite.KillParticlesBasedontheMinParticleSizeRestriction)
	{
	bool_IfResult = Result42;
	}
	else
	{
	bool_IfResult = Context.MapSpawn.DataInstance.Alive;
	}
	Context.MapSpawn.DataInstance.Alive = bool_IfResult;
	float2 SpritesizeA;
	SpritesizeA.x = Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.CalculatedSpriteSize;
	SpritesizeA.y = Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.CalculatedSpriteSize;
	float Constant59 = -1;
	float3 Result43 = Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshTangent * Constant59;
	float4 DynamicParam3;
	DynamicParam3.x = Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshUV.x;
	DynamicParam3.y = Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshUV.y;
	DynamicParam3.z = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.UVWidth;
	DynamicParam3.w = Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.UVWidth;
	float Constant60 = 0;
	float Constant61 = 1;
	int Constant62 = -1;
	int Constant63 = 0;
	bool Constant64 = false;
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant60, Constant61, Constant62, Constant63, Constant64, RandomRangeFloat_Func_Output_Result, Context);
	float3 Position_IfResult;
	float2 Spritesize_IfResult;
	float3 Velocity_IfResult;
	float3 SpriteFacing_IfResult;
	float3 SpriteAlignment_IfResult;
	float4 DynamicMaterialParameter3_IfResult;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.Initialize_MeshReproductionSprite.OverwriteIntrinsicVariables)
	{
	Position_IfResult = Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.Position;
	Spritesize_IfResult = SpritesizeA;
	Velocity_IfResult = Context.MapSpawn.Local.Initialize_MeshReproductionSprite.Velocity;
	SpriteFacing_IfResult = Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshNormal;
	SpriteAlignment_IfResult = Result43;
	DynamicMaterialParameter3_IfResult = DynamicParam3;
	MaterialRandom_IfResult = RandomRangeFloat_Func_Output_Result;
	}
	else
	{
	Position_IfResult = Context.MapSpawn.Particles.Position;
	Spritesize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	Velocity_IfResult = Context.MapSpawn.Particles.Velocity;
	SpriteFacing_IfResult = Context.MapSpawn.Particles.SpriteFacing;
	SpriteAlignment_IfResult = Context.MapSpawn.Particles.SpriteAlignment;
	DynamicMaterialParameter3_IfResult = Context.MapSpawn.Particles.DynamicMaterialParameter3;
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.Position = Position_IfResult;
	Context.MapSpawn.Particles.SpriteSize = Spritesize_IfResult;
	Context.MapSpawn.Particles.Velocity = Velocity_IfResult;
	Context.MapSpawn.Particles.SpriteFacing = SpriteFacing_IfResult;
	Context.MapSpawn.Particles.SpriteAlignment = SpriteAlignment_IfResult;
	Context.MapSpawn.Particles.DynamicMaterialParameter3 = DynamicMaterialParameter3_IfResult;
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant82 = false;
	float3 Constant83 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant82)
	{
	Vector_IfResult = Constant83;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult1 = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult1 = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult1;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult1 = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult1 = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult1;
}

void ApplyInitialForces_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant99 = 1e-06;
	float Result52 = max(Context.MapSpawn.Particles.Mass, Constant99);
	float3 Result53 = Context.MapSpawn.Transient.PhysicsForce / Result52;
	float3 Result54 = Result53 + Context.MapSpawn.Particles.Velocity;
	float3 Velocity_IfResult1;
	if(Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity)
	{
	Velocity_IfResult1 = Result54;
	}
	else
	{
	Velocity_IfResult1 = Context.MapSpawn.Particles.Velocity;
	}
	float Constant100 = 1e-06;
	float Result55 = max(Context.MapSpawn.Particles.RotationalInertia, Constant100);
	float3 Result56 = Context.MapSpawn.Transient.PhysicsRotationalForce / Result55;
	float3 Result57 = Context.MapSpawn.Particles.RotationalVelocity + Result56;
	float3 Constant101 = float3(0,0,0);
	float3 RotVelocity_IfResult;
	float3 RotationalForce_IfResult;
	if(Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity)
	{
	RotVelocity_IfResult = Result57;
	RotationalForce_IfResult = Constant101;
	}
	else
	{
	RotVelocity_IfResult = Context.MapSpawn.Particles.RotationalVelocity;
	RotationalForce_IfResult = Context.MapSpawn.Transient.PhysicsRotationalForce;
	}
	float3 Result58 = Context.MapSpawn.Transient.PhysicsForce * Context.MapSpawn.Constants.Emitter.ApplyInitialForces.PositionalForceWarmupTime;
	float3 Result59 = Context.MapSpawn.Particles.Position + Result58;
	float3 Position_IfResult1;
	if(Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition)
	{
	Position_IfResult1 = Result59;
	}
	else
	{
	Position_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	bool Result60 = Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity || Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition;
	float3 Constant102 = float3(0,0,0);
	float3 Force_IfResult;
	if(Result60)
	{
	Force_IfResult = Constant102;
	}
	else
	{
	Force_IfResult = Context.MapSpawn.Transient.PhysicsForce;
	}
	Context.MapSpawn.Particles.Velocity = Velocity_IfResult1;
	Context.MapSpawn.Particles.RotationalVelocity = RotVelocity_IfResult;
	Context.MapSpawn.Particles.Position = Position_IfResult1;
	Context.MapSpawn.Transient.PhysicsForce = Force_IfResult;
	Context.MapSpawn.Transient.PhysicsRotationalForce = RotationalForce_IfResult;
	Context.MapSpawn.OUTPUT_VAR.ApplyInitialForces.IncomingPhysicsForce = Context.MapSpawn.Transient.PhysicsForce;
	Context.MapSpawn.OUTPUT_VAR.ApplyInitialForces.IncomingPhysicsRotationalForce = Context.MapSpawn.Transient.PhysicsRotationalForce;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result61 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result61;
	float Result62 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant103 = 1e-05;
	float Result63 = max(Context.MapUpdate.ParticleState.Lifetime, Constant103);
	float Constant104 = 0.0001;
	float Result64 = Result63 - Constant104;
	bool Result65 = NiagaraAll(Result62 < Result64);
	bool Constant105 = false;
	bool bool_IfResult1;
	if(Result65)
	{
	bool_IfResult1 = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult1 = Constant105;
	}
	float Result66 = Result62 / Result63;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult1;
	Context.MapUpdate.Particles.Age = Result62;
	Context.MapUpdate.Particles.NormalizedAge = Result66;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result67 = Context.MapUpdate.Constants.Emitter.GravityForce.Gravity * Context.MapUpdate.Particles.Mass;
	float3 Result68 = Context.MapUpdate.Transient.PhysicsForce + Result67;
	Context.MapUpdate.Transient.PhysicsForce = Result68;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant115 = 0.0001;
	float Result69 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant115);
	float Result70 = Reciprocal(Result69);
	float3 Result71 = Result70 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result71;
	float3 Result72 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant116 = 0;
	float Result73 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant116);
	float Result74 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result73;
	float Constant117 = 1;
	float Result75 = Result74 + Constant117;
	float3 Result76 = Result72 / Result75;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result76;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result77 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result77;
	float3 Position_IfResult2;
	float3 Velocity_IfResult2;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult2 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult2 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult2 = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult2 = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult2;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult2;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant118 = float3(0,0,0);
	float Constant119 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant118;
	Drag_IfResult = Constant119;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void Update_MeshReproductionSprite_Emitter_Func_(inout FSimulationContext Context)
{
	float3 GetSkinnedTriangleDataWS_EmitterMeshOutput_Position;
	float3 GetSkinnedTriangleDataWS_EmitterMeshOutput_Velocity;
	float3 GetSkinnedTriangleDataWS_EmitterMeshOutput_Normal;
	float3 GetSkinnedTriangleDataWS_EmitterMeshOutput_Binormal;
	float3 GetSkinnedTriangleDataWS_EmitterMeshOutput_Tangent;
	GetSkinnedTriangleDataWS_EmitterMesh(Context.MapUpdate.Update_MeshReproductionSprite.MeshTriCoordinate, GetSkinnedTriangleDataWS_EmitterMeshOutput_Position, GetSkinnedTriangleDataWS_EmitterMeshOutput_Velocity, GetSkinnedTriangleDataWS_EmitterMeshOutput_Normal, GetSkinnedTriangleDataWS_EmitterMeshOutput_Binormal, GetSkinnedTriangleDataWS_EmitterMeshOutput_Tangent);
	float Constant126 = -1;
	float3 Result78 = GetSkinnedTriangleDataWS_EmitterMeshOutput_Tangent * Constant126;
	int Constant127 = 0;
	float2 GetTriUV_EmitterMeshOutput_UV;
	GetTriUV_EmitterMesh(Context.MapUpdate.Update_MeshReproductionSprite.MeshTriCoordinate, Constant127, GetTriUV_EmitterMeshOutput_UV);
	float4 Output16;
	Output16.x = GetTriUV_EmitterMeshOutput_UV.x;
	Output16.y = GetTriUV_EmitterMeshOutput_UV.y;
	Output16.z = Context.MapUpdate.Update_MeshReproductionSprite.UVWidth;
	Output16.w = Context.MapUpdate.Update_MeshReproductionSprite.UVWidth;
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshPosition = GetSkinnedTriangleDataWS_EmitterMeshOutput_Position;
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshTriangleVelocity = GetSkinnedTriangleDataWS_EmitterMeshOutput_Velocity;
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshSpriteFacing = GetSkinnedTriangleDataWS_EmitterMeshOutput_Normal;
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.Normals = GetSkinnedTriangleDataWS_EmitterMeshOutput_Normal;
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshSpriteAlignment = Result78;
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.DynamicMaterialParameter3 = Output16;
	float3 Position_IfResult3;
	float3 Velocity_IfResult3;
	float3 SpriteFacing_IfResult1;
	float3 SpriteAlignment_IfResult1;
	float4 DynParam3_IfResult;
	float2 spritesize_IfResult2;
	if(Context.MapUpdate.Update_MeshReproductionSprite.OverwriteIntrinsicVariables)
	{
	Position_IfResult3 = Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshPosition;
	Velocity_IfResult3 = Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshTriangleVelocity;
	SpriteFacing_IfResult1 = Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshSpriteFacing;
	SpriteAlignment_IfResult1 = Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshSpriteAlignment;
	DynParam3_IfResult = Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.DynamicMaterialParameter3;
	spritesize_IfResult2 = Context.MapUpdate.Constants.Emitter.Update_MeshReproductionSprite.SpriteSize;
	}
	else
	{
	Position_IfResult3 = Context.MapUpdate.Particles.Position;
	Velocity_IfResult3 = Context.MapUpdate.Particles.Velocity;
	SpriteFacing_IfResult1 = Context.MapUpdate.Particles.SpriteFacing;
	SpriteAlignment_IfResult1 = Context.MapUpdate.Particles.SpriteAlignment;
	DynParam3_IfResult = Context.MapUpdate.Particles.DynamicMaterialParameter3;
	spritesize_IfResult2 = Context.MapUpdate.Particles.SpriteSize;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult3;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult3;
	Context.MapUpdate.Particles.SpriteFacing = SpriteFacing_IfResult1;
	Context.MapUpdate.Particles.SpriteAlignment = SpriteAlignment_IfResult1;
	Context.MapUpdate.Particles.DynamicMaterialParameter3 = DynParam3_IfResult;
	Context.MapUpdate.Particles.SpriteSize = spritesize_IfResult2;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	MeshTriCoordinate Constant = (MeshTriCoordinate)0;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate = Constant;
	float Constant1 = (0.0);
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleWorldSpaceArea = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleUVArea = Constant2;
	float Constant3 = (0.0);
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.UVWidth = Constant3;
	float2 Constant4 = float2(0.0, 0.0);
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.SpriteSize = Constant4;
	float3 Constant5 = float3(0,0,0);
	Context.MapSpawn.Particles.Position = Constant5;
	float2 Constant6 = float2(1,1);
	Context.MapSpawn.Particles.SpriteSize = Constant6;
	float3 Constant7 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant7;
	float3 Constant8 = float3(0,0,0);
	Context.MapSpawn.Particles.SpriteFacing = Constant8;
	float3 Constant9 = float3(0,0,0);
	Context.MapSpawn.Particles.SpriteAlignment = Constant9;
	float4 Constant10 = float4(0,0,0,0);
	Context.MapSpawn.Particles.DynamicMaterialParameter3 = Constant10;
	float Constant11 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant11;
	float Constant12 = 1;
	Context.MapSpawn.Particles.Lifetime = Constant12;
	float4 Constant13 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant13;
	float Constant14 = 1;
	Context.MapSpawn.Particles.Mass = Constant14;
	float Constant15 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant15;
	float3 Constant16 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant16;
	float3 Constant17 = float3(0,0,0);
	Context.MapSpawn.Particles.RotationalVelocity = Constant17;
	float Constant18 = 1;
	Context.MapSpawn.Particles.RotationalInertia = Constant18;
	float Constant19 = 0;
	Context.MapSpawn.Particles.Age = Constant19;
	float Constant20 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant20;

	float3 Constant21 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.Position = Constant21;
	float3 Constant22 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.Velocity = Constant22;
	float3 Constant23 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshNormal = Constant23;
	float3 Constant24 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshBinormal = Constant24;
	float3 Constant25 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshTangent = Constant25;
	float2 Constant26 = float2(0.0, 0.0);
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.MeshUV = Constant26;
	float Constant27 = (0.0);
	Context.MapSpawn.Local.Initialize_MeshReproductionSprite.ScaleModulationValue = Constant27;
	float Constant28 = (0.0);
	Context.MapSpawn.OUTPUT_VAR.Initialize_MeshReproductionSprite.CalculatedSpriteSize = Constant28;
	bool Constant29 = true;
	Context.MapSpawn.Initialize_MeshReproductionSprite.KillParticlesBasedontheMinParticleSizeRestriction = Constant29;
	bool Constant30 = true;
	Context.MapSpawn.DataInstance.Alive = Constant30;
	bool Constant31 = true;
	Context.MapSpawn.Initialize_MeshReproductionSprite.OverwriteIntrinsicVariables = Constant31;
	EnterStatScope(1 );
	Initialize_MeshReproductionSprite_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant78 = true;
	bool Constant79 = true;
	bool Constant80 = false;
	bool Constant81 = false;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant78;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant79;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant80;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	bool Constant84 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant84;
	bool Constant85 = true;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant85;
	bool Constant86 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant86;
	bool Constant87 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant87;
	bool Constant88 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant88;
	float Constant89 = 0;
	float Constant90 = 1;
	int Constant91 = -1;
	int Constant92 = 0;
	bool Constant93 = false;
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Constant89, Constant90, Constant91, Constant92, Constant93, RandomRangeFloat_Func_Output_Result1, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result1;
	EnterStatScope(2 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant94 = true;
	Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity = Constant94;
	bool Constant95 = false;
	Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition = Constant95;
	bool Constant96 = true;
	Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity = Constant96;
	float3 Constant97 = float3(0,0,0);
	Context.MapSpawn.Transient.PhysicsForce = Constant97;
	float3 Constant98 = float3(0,0,0);
	Context.MapSpawn.Transient.PhysicsRotationalForce = Constant98;
	EnterStatScope(3 );
	ApplyInitialForces_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;



}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(4 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant106 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant106;
	EnterStatScope(5 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant107 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant107;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant108 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant108;
	float3 Constant109 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant109;
	float Constant110 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant110;
	float Constant111 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant111;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	bool Constant112 = false;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant113 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant113;
	bool Constant114 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant114;
	EnterStatScope(6 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant120 = true;
	Context.MapUpdate.Update_MeshReproductionSprite.OverwriteIntrinsicVariables = Constant120;
	Context.MapUpdate.Update_MeshReproductionSprite.MeshTriCoordinate = Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate;
	Context.MapUpdate.Update_MeshReproductionSprite.UVWidth = Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.UVWidth;
	float3 Constant121 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshPosition = Constant121;
	float3 Constant122 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshTriangleVelocity = Constant122;
	float3 Constant123 = float3(0,0,1);
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshSpriteFacing = Constant123;
	float3 Constant124 = float3(0,1,0);
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.MeshSpriteAlignment = Constant124;
	float4 Constant125 = float4(0.0, 0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Update_MeshReproductionSprite.DynamicMaterialParameter3 = Constant125;
	EnterStatScope(7 );
	Update_MeshReproductionSprite_Emitter_Func_(Context);
	ExitStatScope( );



}
#line 1431 "/Engine/Generated/NiagaraEmitterInstance.ush"
#line 1 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceSkeletalMesh.ush"
#line 13 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceSkeletalMesh.ush"
struct FDISkelMeshContext
{
	Buffer<uint> MeshIndexBuffer;
	Buffer<float> MeshVertexBuffer;
	Buffer<uint> MeshSkinWeightBuffer;
	Buffer<uint> MeshSkinWeightLookupBuffer;
	Buffer<float4> MeshCurrBonesBuffer;
	Buffer<float4> MeshPrevBonesBuffer;
	Buffer<float4> MeshCurrSamplingBonesBuffer;
    Buffer<float4> MeshPrevSamplingBonesBuffer;
	Buffer<float4> MeshTangentBuffer;
	Buffer<float2> MeshTexCoordBuffer;
    Buffer<float4> MeshColorBuffer;
	Buffer<float> MeshTriangleSamplerProbaBuffer;
	Buffer<uint> MeshTriangleSamplerAliasBuffer;
	uint MeshNumSamplingRegionTriangles;
	uint MeshNumSamplingRegionVertices;
	Buffer<float> MeshSamplingRegionsProbaBuffer;
	Buffer<uint> MeshSamplingRegionsAliasBuffer;
	Buffer<uint> MeshSampleRegionsTriangleIndices;
	Buffer<uint> MeshSampleRegionsVertices;
	Buffer<uint> MeshTriangleMatricesOffsetBuffer;
	uint MeshTriangleCount;
	uint MeshVertexCount;
    uint MeshWeightStride;
	uint MeshSkinWeightIndexSize;
	uint MeshNumTexCoord;
	uint MeshNumWeights;
	int NumBones;
	int NumFilteredBones;
	int NumUnfilteredBones;
	int RandomMaxBone;
	int ExcludeBoneIndex;
	Buffer<uint> FilteredAndUnfilteredBones;
	int NumFilteredSockets;
	int FilteredSocketBoneOffset;
	float4x4 InstanceTransform;
	float4x4 InstancePrevTransform;
	float4 InstanceRotation;
	float4 InstancePrevRotation;
	float InstanceInvDeltaTime;
	bool UniformTriangleSamplingEnable;
	bool UniformSamplingRegionEnabled;
	bool UnlimitedBoneInfluences;
};





float DISKelMesh_Random(uint S1, uint S2, uint S3)
{
	return S3 == 0xffffffff ? NiagaraInternalNoise(S1, S2, S3) : rand(1.0f, S1, S2, S3);
}

struct FDISkelMeshSkinnedVertex
{
	float3 Position;
	float3 PrevPosition;
	float3 TangentX;
	float3 TangentY;
	float3 TangentZ;
};

float3 DISKelMesh_RandomBarycentricCoord(uint Seed1, uint Seed2, uint Seed3)
{
	float r0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	float r1 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	float sqrt0 = sqrt(r0);
	float sqrt1 = sqrt(r1);
	return float3(1.0f - sqrt0, sqrt0 * (1.0 - r1), r1 * sqrt0);
}

float3x4 DISkelMesh_GetPrevBoneSkinningMatrix(in FDISkelMeshContext DIContext, uint Bone)
{
    return float3x4(DIContext.MeshPrevBonesBuffer[Bone * 3], DIContext.MeshPrevBonesBuffer[Bone * 3 + 1], DIContext.MeshPrevBonesBuffer[Bone * 3 + 2]);
}

float3x4 DISkelMesh_GetPrevSkinningMatrix(in FDISkelMeshContext DIContext, uint VertexIndex, int4 BlendIndices, float4 BlendWeights)
{

    uint MatrixOffset = DIContext.MeshTriangleMatricesOffsetBuffer[VertexIndex];

	float3x4 Result;
    Result = DISkelMesh_GetPrevBoneSkinningMatrix(DIContext, MatrixOffset + BlendIndices.x) * BlendWeights.x;
    Result += DISkelMesh_GetPrevBoneSkinningMatrix(DIContext, MatrixOffset + BlendIndices.y) * BlendWeights.y;
    Result += DISkelMesh_GetPrevBoneSkinningMatrix(DIContext, MatrixOffset + BlendIndices.z) * BlendWeights.z;
    Result += DISkelMesh_GetPrevBoneSkinningMatrix(DIContext, MatrixOffset + BlendIndices.w) * BlendWeights.w;
	return Result;
}

float3x4 DISkelMesh_GetCurrBoneSkinningMatrix(in FDISkelMeshContext DIContext, uint Bone)
{
	return float3x4(DIContext.MeshCurrBonesBuffer[Bone * 3], DIContext.MeshCurrBonesBuffer[Bone * 3 + 1], DIContext.MeshCurrBonesBuffer[Bone * 3 + 2]);
}

float3x4 DISkelMesh_GetCurrSkinningMatrix(in FDISkelMeshContext DIContext, uint VertexIndex, int4 BlendIndices, float4 BlendWeights)
{

	uint MatrixOffset = DIContext.MeshTriangleMatricesOffsetBuffer[VertexIndex];

	float3x4 Result;
    Result = DISkelMesh_GetCurrBoneSkinningMatrix(DIContext, MatrixOffset + BlendIndices.x) * BlendWeights.x;
    Result += DISkelMesh_GetCurrBoneSkinningMatrix(DIContext, MatrixOffset + BlendIndices.y) * BlendWeights.y;
    Result += DISkelMesh_GetCurrBoneSkinningMatrix(DIContext, MatrixOffset + BlendIndices.z) * BlendWeights.z;
    Result += DISkelMesh_GetCurrBoneSkinningMatrix(DIContext, MatrixOffset + BlendIndices.w) * BlendWeights.w;
	return Result;
}

int4 DISkelMesh_UnpackIndices4(uint Packed)
{
	return int4(Packed & 0xff, Packed >> 8 & 0xff, Packed >> 16 & 0xff, Packed >> 24 & 0xff);
}

float4 DISkelMesh_UnpackWeights4(uint Packed)
{
	return float4(Packed & 0xff, Packed >> 8 & 0xff, Packed >> 16 & 0xff, Packed >> 24 & 0xff) / 255.0f;
}

FDISkelMeshSkinnedVertex DISkelMesh_GetSkinnedVertex(in FDISkelMeshContext DIContext, uint VertexIndex)
{

	float3 CurrPosition = float3(DIContext.MeshVertexBuffer[VertexIndex * 3], DIContext.MeshVertexBuffer[VertexIndex * 3 + 1], DIContext.MeshVertexBuffer[VertexIndex * 3 + 2]);
	float3 PrevPosition = CurrPosition;

	float3 TangentX =  (DIContext.MeshTangentBuffer[VertexIndex * 2 ].xyz) ;
	float4 TangentZ =  (DIContext.MeshTangentBuffer[VertexIndex * 2 + 1].xyzw) ;

	if ( DIContext.MeshNumWeights > 0 )
	{
		float3x4 PrevBoneMatrix;
		float3x4 CurrBoneMatrix;
#line 180 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceSkeletalMesh.ush"
		{
			uint WeightOffset = DIContext.MeshNumWeights == 8 ? 2 : 1;
#line 195 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceSkeletalMesh.ush"
			int4 BlendIndices = DISkelMesh_UnpackIndices4(DIContext.MeshSkinWeightBuffer[VertexIndex * DIContext.MeshWeightStride]);
        float4 BlendWeights = DISkelMesh_UnpackWeights4(DIContext.MeshSkinWeightBuffer[VertexIndex * DIContext.MeshWeightStride + WeightOffset]);
			CurrBoneMatrix = DISkelMesh_GetCurrSkinningMatrix(DIContext, VertexIndex, BlendIndices, BlendWeights);
			PrevBoneMatrix = DISkelMesh_GetPrevSkinningMatrix(DIContext, VertexIndex, BlendIndices, BlendWeights);

		}

		CurrPosition = mul(CurrBoneMatrix, float4(CurrPosition, 1.0f)).xyz;
		PrevPosition = mul(PrevBoneMatrix, float4(PrevPosition, 1.0f)).xyz;


		TangentX.xyz = mul(CurrBoneMatrix, float4(TangentX.xyz, 0.0f)).xyz;
		TangentZ.xyz = mul(CurrBoneMatrix, float4(TangentZ.xyz, 0.0f)).xyz;
	}

	FDISkelMeshSkinnedVertex SkinnedVertex;
	SkinnedVertex.Position = CurrPosition;
	SkinnedVertex.PrevPosition = PrevPosition;
	SkinnedVertex.TangentX = TangentX;
	SkinnedVertex.TangentY = cross(TangentZ.xyz, TangentX.xyz);
	SkinnedVertex.TangentZ = TangentZ.xyz;
	return SkinnedVertex;
}

FDISkelMeshSkinnedVertex DISkelMesh_GetSkinnedPointOnTriangle(in FDISkelMeshContext DIContext, uint TriangleIndex, float3 BaryCoord)
{
	uint IndexBufferOffset = TriangleIndex * 3;
	uint VertexIndex0 = DIContext.MeshIndexBuffer[IndexBufferOffset];
	uint VertexIndex1 = DIContext.MeshIndexBuffer[IndexBufferOffset + 1];
	uint VertexIndex2 = DIContext.MeshIndexBuffer[IndexBufferOffset + 2];

	FDISkelMeshSkinnedVertex SkinnedVertex0 = DISkelMesh_GetSkinnedVertex(DIContext, VertexIndex0);
	FDISkelMeshSkinnedVertex SkinnedVertex1 = DISkelMesh_GetSkinnedVertex(DIContext, VertexIndex1);
	FDISkelMeshSkinnedVertex SkinnedVertex2 = DISkelMesh_GetSkinnedVertex(DIContext, VertexIndex2);

	FDISkelMeshSkinnedVertex FinalVertex;
	FinalVertex.Position = (SkinnedVertex0.Position * BaryCoord.x) + (SkinnedVertex1.Position * BaryCoord.y) + (SkinnedVertex2.Position * BaryCoord.z);
	FinalVertex.PrevPosition = (SkinnedVertex0.PrevPosition * BaryCoord.x) + (SkinnedVertex1.PrevPosition * BaryCoord.y) + (SkinnedVertex2.PrevPosition * BaryCoord.z);
	FinalVertex.TangentX = (SkinnedVertex0.TangentX * BaryCoord.x) + (SkinnedVertex1.TangentX * BaryCoord.y) + (SkinnedVertex2.TangentX * BaryCoord.z);
	FinalVertex.TangentY = (SkinnedVertex0.TangentY * BaryCoord.x) + (SkinnedVertex1.TangentY * BaryCoord.y) + (SkinnedVertex2.TangentY * BaryCoord.z);
	FinalVertex.TangentZ = (SkinnedVertex0.TangentZ * BaryCoord.x) + (SkinnedVertex1.TangentZ * BaryCoord.y) + (SkinnedVertex2.TangentZ * BaryCoord.z);

	return FinalVertex;
}

FDISkelMeshSkinnedVertex DISkelMesh_GetSkinnedPointOnTriangleWS(in FDISkelMeshContext DIContext, uint TriangleIndex, float3 BaryCoord)
{
	FDISkelMeshSkinnedVertex FinalVertex = DISkelMesh_GetSkinnedPointOnTriangle(DIContext, TriangleIndex, BaryCoord);
	FinalVertex.Position = mul(float4(FinalVertex.Position, 1.0f), DIContext.InstanceTransform).xyz;
	FinalVertex.PrevPosition = mul(float4(FinalVertex.PrevPosition, 1.0f), DIContext.InstancePrevTransform).xyz;
	FinalVertex.TangentX = mul(float4(FinalVertex.TangentX, 0.0f), DIContext.InstanceTransform).xyz;
	FinalVertex.TangentY = mul(float4(FinalVertex.TangentY, 0.0f), DIContext.InstanceTransform).xyz;
	FinalVertex.TangentZ = mul(float4(FinalVertex.TangentZ, 0.0f), DIContext.InstanceTransform).xyz;

	return FinalVertex;
}

void DISKelMesh_RandomTriCoord(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int OutTriangle, out float3 OutBaryCoord)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);

	[branch]
	if ( !DIContext.UniformTriangleSamplingEnable )
	{

		OutTriangle = min(uint(RandT0 * float(DIContext.MeshTriangleCount)), DIContext.MeshTriangleCount - 1);
	}
	else
	{

		uint TriangleIndex = min(uint(RandT0*float(DIContext.MeshTriangleCount)), DIContext.MeshTriangleCount - 1);
		float TriangleProbability = DIContext.MeshTriangleSamplerProbaBuffer[TriangleIndex];


		float RandT1 = DISKelMesh_Random(Seed1, Seed2, Seed3);
		if( RandT1 > TriangleProbability )
		{
			TriangleIndex = DIContext.MeshTriangleSamplerAliasBuffer[TriangleIndex];
		}
		OutTriangle = TriangleIndex;
	}

	OutBaryCoord = DISKelMesh_RandomBarycentricCoord(Seed1, Seed2, Seed3);
}

void DISKelMesh_GetSkinnedTriangleDataWS(in FDISkelMeshContext DIContext, in uint TriangleIndex, in float3 BaryCoord, out float3 OutPosition, out float3 OutVelocity, out float3 OutNormal, out float3 OutBinormal, out float3 OutTangent)
{
    FDISkelMeshSkinnedVertex SkinnedVertex = DISkelMesh_GetSkinnedPointOnTriangleWS(DIContext, TriangleIndex, BaryCoord);
	OutPosition = SkinnedVertex.Position;
	OutVelocity = (SkinnedVertex.Position - SkinnedVertex.PrevPosition) * DIContext.InstanceInvDeltaTime;
	OutNormal = normalize(SkinnedVertex.TangentZ);
	OutBinormal = normalize(SkinnedVertex.TangentY);
	OutTangent = normalize(SkinnedVertex.TangentX);
}

void DISKelMesh_GetSkinnedTriangleData(in FDISkelMeshContext DIContext, in uint TriangleIndex, in float3 BaryCoord, out float3 OutPosition, out float3 OutVelocity, out float3 OutNormal, out float3 OutBinormal, out float3 OutTangent)
{
    FDISkelMeshSkinnedVertex SkinnedVertex = DISkelMesh_GetSkinnedPointOnTriangle(DIContext, TriangleIndex, BaryCoord);
	OutPosition = SkinnedVertex.Position;
	OutVelocity = (SkinnedVertex.Position - SkinnedVertex.PrevPosition) * DIContext.InstanceInvDeltaTime;
	OutNormal = normalize(SkinnedVertex.TangentZ);
	OutBinormal = normalize(SkinnedVertex.TangentY);
	OutTangent = normalize(SkinnedVertex.TangentX);
}

void DISKelMesh_GetSkinnedTriangleDataInterpolatedWS(in FDISkelMeshContext DIContext, in uint TriangleIndex, in float3 BaryCoord, in float Interp, out float3 OutPosition, out float3 OutVelocity, out float3 OutNormal, out float3 OutBinormal, out float3 OutTangent)
{
    FDISkelMeshSkinnedVertex SkinnedVertex = DISkelMesh_GetSkinnedPointOnTriangleWS(DIContext, TriangleIndex, BaryCoord);
	OutPosition = lerp(SkinnedVertex.PrevPosition, SkinnedVertex.Position, Interp);
	OutVelocity = (SkinnedVertex.Position - SkinnedVertex.PrevPosition) * DIContext.InstanceInvDeltaTime;
	OutNormal = normalize(SkinnedVertex.TangentZ);
	OutBinormal = normalize(SkinnedVertex.TangentY);
	OutTangent = normalize(SkinnedVertex.TangentX);
}

void DISKelMesh_GetSkinnedTriangleDataInterpolated(in FDISkelMeshContext DIContext, in uint TriangleIndex, in float3 BaryCoord, in float Interp, out float3 OutPosition, out float3 OutVelocity, out float3 OutNormal, out float3 OutBinormal, out float3 OutTangent)
{
    FDISkelMeshSkinnedVertex SkinnedVertex = DISkelMesh_GetSkinnedPointOnTriangle(DIContext, TriangleIndex, BaryCoord);
	OutPosition = lerp(SkinnedVertex.PrevPosition, SkinnedVertex.Position, Interp);
	OutVelocity = (SkinnedVertex.Position - SkinnedVertex.PrevPosition) * DIContext.InstanceInvDeltaTime;
	OutNormal = normalize(SkinnedVertex.TangentZ);
	OutBinormal = normalize(SkinnedVertex.TangentY);
	OutTangent = normalize(SkinnedVertex.TangentX);
}

void DISKelMesh_GetTriUV(in FDISkelMeshContext DIContext, in uint TriangleIndex, in float3 BaryCoord, in int UVSet, out float2 OutUV)
{
    if (DIContext.MeshNumTexCoord > 0)
	{
        uint IndexBufferOffset = TriangleIndex * 3;
		uint VertexIndex0 = DIContext.MeshIndexBuffer[IndexBufferOffset ];
		uint VertexIndex1 = DIContext.MeshIndexBuffer[IndexBufferOffset+1];
		uint VertexIndex2 = DIContext.MeshIndexBuffer[IndexBufferOffset+2];

        uint Stride = DIContext.MeshNumTexCoord;
        uint SelectedUVSet = clamp((uint) UVSet, 0, DIContext.MeshNumTexCoord - 1);
		float2 UV0 = DIContext.MeshTexCoordBuffer[VertexIndex0 * Stride + SelectedUVSet];
		float2 UV1 = DIContext.MeshTexCoordBuffer[VertexIndex1 * Stride + SelectedUVSet];
		float2 UV2 = DIContext.MeshTexCoordBuffer[VertexIndex2 * Stride + SelectedUVSet];

		OutUV = UV0 * BaryCoord.x + UV1 * BaryCoord.y + UV2 * BaryCoord.z;
	}
	else
	{
		OutUV = 0.0f;
	}
}

void DISKelMesh_RandomTriangle(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int OutTriangle, out float3 OutBaryCoord)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	int TriangleIndex = min(int(RandT0 * float(DIContext.MeshTriangleCount)), (int)DIContext.MeshTriangleCount - 1);

	[branch]
	if ( DIContext.UniformTriangleSamplingEnable )
	{

		float TriangleProbability = DIContext.MeshTriangleSamplerProbaBuffer[TriangleIndex];


		float RandT1 = DISKelMesh_Random(Seed1, Seed2, Seed3);
		if( RandT1 > TriangleProbability )
		{
			TriangleIndex = (int)DIContext.MeshTriangleSamplerAliasBuffer[TriangleIndex];
		}
	}

	OutTriangle = TriangleIndex;
	OutBaryCoord = DISKelMesh_RandomBarycentricCoord(Seed1, Seed2, Seed3);
}

void DISKelMesh_GetTriangleCount(in FDISkelMeshContext DIContext, out int OutCount)
{
	OutCount = DIContext.MeshTriangleCount;
}

void DISKelMesh_RandomFilteredTriangle(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int OutTriangle, out float3 OutBaryCoord)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	uint RegionTriangle = min(uint(RandT0 * float(DIContext.MeshNumSamplingRegionTriangles)), DIContext.MeshNumSamplingRegionTriangles - 1);

	[branch]
	if ( DIContext.UniformSamplingRegionEnabled )
	{
		float TriangleProbability = DIContext.MeshSamplingRegionsProbaBuffer[RegionTriangle];
		float RandT1 = DISKelMesh_Random(Seed1, Seed2, Seed3);
		if ( RandT1 > TriangleProbability )
		{
			RegionTriangle = (int)DIContext.MeshSamplingRegionsAliasBuffer[RegionTriangle];
		}
	}
	OutTriangle = (int)DIContext.MeshSampleRegionsTriangleIndices[RegionTriangle];
	OutBaryCoord = DISKelMesh_RandomBarycentricCoord(Seed1, Seed2, Seed3);
}

void DISKelMesh_GetFilteredTriangleCount(in FDISkelMeshContext DIContext, out int OutCount)
{
	OutCount = DIContext.MeshNumSamplingRegionTriangles;
}

void DISKelMesh_GetFilteredTriangleAt(in FDISkelMeshContext DIContext, int FilteredIndex, out int OutTriangle, out float3 OutBaryCoord)
{
	if ( DIContext.MeshNumSamplingRegionTriangles > 0 )
	{
		FilteredIndex = clamp(FilteredIndex, 0, (int)DIContext.MeshNumSamplingRegionTriangles - 1);
		OutTriangle = (int)DIContext.MeshSampleRegionsTriangleIndices[FilteredIndex];
	}
	else
	{
		OutTriangle = 0;
	}
	OutBaryCoord = 1.0f / 3.0f;
}




float4 DISKelMesh_QuatSlerp(float4 Quat1, float4 Quat2, float Slerp)
{
    const float RawCosom = dot(Quat1, Quat2);
    const float Cosom = abs(RawCosom);

    float Scale0, Scale1;
    if (Cosom < 0.9999f)
    {
        const float Omega = acos(Cosom);
        const float InvSin = 1.f / sin(Omega);
        Scale0 = sin((1.f - Slerp) * Omega) * InvSin;
        Scale1 = sin(Slerp * Omega) * InvSin;
    }
    else
    {
        Scale0 = 1.0f - Slerp;
        Scale1 = Slerp;
    }


    Scale1 = RawCosom >= 0.0f ? Scale1 : -Scale1;

    return (Scale0 * Quat1) + (Scale1 * Quat2);
}

float4 DISKelMesh_QuatMul(float4 Q1, float4 Q2)
{
	float4 QOut;
	QOut.x = Q1.w*Q2.x + Q1.x*Q2.w + Q1.y*Q2.z - Q1.z*Q2.y;
	QOut.y = Q1.w*Q2.y - Q1.x*Q2.z + Q1.y*Q2.w + Q1.z*Q2.x;
	QOut.z = Q1.w*Q2.z + Q1.x*Q2.y - Q1.y*Q2.x + Q1.z*Q2.w;
	QOut.w = Q1.w*Q2.w - Q1.x*Q2.x - Q1.y*Q2.y - Q1.z*Q2.z;
	return QOut;
}

void DISkelMesh_GetSkinnedBoneCommon(in FDISkelMeshContext DIContext, in int Bone, in float Interp, in bool bWorldSpace, out float3 OutPosition, out float4 OutRotation, out float3 OutVelocity)
{
    float3 PrevPosition = DIContext.MeshPrevSamplingBonesBuffer[Bone * 2].xyz;
    float4 PrevRotation = DIContext.MeshPrevSamplingBonesBuffer[Bone * 2 + 1];
    float3 CurrPosition = DIContext.MeshCurrSamplingBonesBuffer[Bone * 2].xyz;
    float4 CurrRotation = DIContext.MeshCurrSamplingBonesBuffer[Bone * 2 + 1];

    if (bWorldSpace)
    {
        PrevPosition = mul(float4(PrevPosition, 1), DIContext.InstancePrevTransform).xyz;
        CurrPosition = mul(float4(CurrPosition, 1), DIContext.InstanceTransform).xyz;
		PrevRotation = DISKelMesh_QuatMul(DIContext.InstancePrevRotation, PrevRotation);
		CurrRotation = DISKelMesh_QuatMul(DIContext.InstanceRotation, CurrRotation);
    }
    CurrPosition = lerp(PrevPosition, CurrPosition, Interp);

    OutPosition = CurrPosition;
    OutRotation = DISKelMesh_QuatSlerp(PrevRotation, CurrRotation, Interp);
    OutVelocity = (CurrPosition - PrevPosition) * DIContext.InstanceInvDeltaTime;
}

void DISkelMesh_GetSkinnedBone(in FDISkelMeshContext DIContext, in int Bone, out float3 OutPosition, out float4 OutRotation, out float3 OutVelocity)
{
    DISkelMesh_GetSkinnedBoneCommon(DIContext, Bone, 1.0f, false, OutPosition, OutRotation, OutVelocity);
}

void DISkelMesh_GetSkinnedBoneInterpolated(in FDISkelMeshContext DIContext, in int Bone, in float Interp, out float3 OutPosition, out float4 OutRotation, out float3 OutVelocity)
{
    DISkelMesh_GetSkinnedBoneCommon(DIContext, Bone, Interp, false, OutPosition, OutRotation, OutVelocity);
}

void DISkelMesh_GetSkinnedBoneWS(in FDISkelMeshContext DIContext, in int Bone, out float3 OutPosition, out float4 OutRotation, out float3 OutVelocity)
{
    DISkelMesh_GetSkinnedBoneCommon(DIContext, Bone, 1.0f, true, OutPosition, OutRotation, OutVelocity);
}

void DISkelMesh_GetSkinnedBoneInterpolatedWS(in FDISkelMeshContext DIContext, in int Bone, in float Interp, out float3 OutPosition, out float4 OutRotation, out float3 OutVelocity)
{
    DISkelMesh_GetSkinnedBoneCommon(DIContext, Bone, Interp, true, OutPosition, OutRotation, OutVelocity);
}




void DISkelMesh_GetTriVertices(in FDISkelMeshContext DIContext, in uint TriangleIndex, out int VertexIndex0, out int VertexIndex1, out int VertexIndex2)
{
    uint IndexBufferOffset = TriangleIndex * 3;
    VertexIndex0 = DIContext.MeshIndexBuffer[IndexBufferOffset];
    VertexIndex1 = DIContext.MeshIndexBuffer[IndexBufferOffset + 1];
    VertexIndex2 = DIContext.MeshIndexBuffer[IndexBufferOffset + 2];
}

void DISkelMesh_GetTriColor(in FDISkelMeshContext DIContext, in uint TriangleIndex, in float3 BaryCoord, out float4 OutColor)
{
    uint IndexBufferOffset = TriangleIndex * 3;
    uint VertexIndex0 = DIContext.MeshIndexBuffer[IndexBufferOffset];
    uint VertexIndex1 = DIContext.MeshIndexBuffer[IndexBufferOffset + 1];
    uint VertexIndex2 = DIContext.MeshIndexBuffer[IndexBufferOffset + 2];
    OutColor = (DIContext.MeshColorBuffer[VertexIndex0] * BaryCoord.x) + (DIContext.MeshColorBuffer[VertexIndex1] * BaryCoord.y) + (DIContext.MeshColorBuffer[VertexIndex2] * BaryCoord.z);
}

void DISkelMesh_GetSkinnedVertex(in FDISkelMeshContext DIContext, in int VertexIndex, out float3 OutPosition, out float3 OutVelocity, out float3 OutNormal, out float3 OutBinormal, out float3 OutTangent)
{
    FDISkelMeshSkinnedVertex SkinnedVertex = DISkelMesh_GetSkinnedVertex(DIContext, VertexIndex);
    OutPosition = SkinnedVertex.Position;
    OutVelocity = (SkinnedVertex.Position - SkinnedVertex.PrevPosition) * DIContext.InstanceInvDeltaTime;
	OutNormal = SkinnedVertex.TangentZ;
	OutBinormal = SkinnedVertex.TangentY;
	OutTangent = SkinnedVertex.TangentX;
}

void DISkelMesh_GetSkinnedVertexWS(in FDISkelMeshContext DIContext, in int VertexIndex, out float3 OutPosition, out float3 OutVelocity, out float3 OutNormal, out float3 OutBinormal, out float3 OutTangent)
{
    FDISkelMeshSkinnedVertex SkinnedVertex = DISkelMesh_GetSkinnedVertex(DIContext, VertexIndex);
    OutPosition = mul(float4(SkinnedVertex.Position, 1.0f), DIContext.InstanceTransform).xyz;
    float3 PrevPosition = mul(float4(SkinnedVertex.PrevPosition, 1.0f), DIContext.InstancePrevTransform).xyz;
    OutVelocity = (SkinnedVertex.Position - SkinnedVertex.PrevPosition) * DIContext.InstanceInvDeltaTime;
	OutNormal = SkinnedVertex.TangentZ;
	OutBinormal = SkinnedVertex.TangentY;
	OutTangent = SkinnedVertex.TangentX;
}

void DISkelMesh_GetVertexColor(in FDISkelMeshContext DIContext, in int VertexIndex, out float4 OutColor)
{
    OutColor = DIContext.MeshColorBuffer[VertexIndex];
}

void DISkelMesh_GetVertexUV(in FDISkelMeshContext DIContext, in int VertexIndex, in int UVSet, out float2 OutUV)
{
    if (DIContext.MeshNumTexCoord > 0)
    {
        uint Stride = DIContext.MeshNumTexCoord;
        uint SelectedUVSet = clamp((uint) UVSet, 0, DIContext.MeshNumTexCoord - 1);
        OutUV = DIContext.MeshTexCoordBuffer[VertexIndex * Stride + SelectedUVSet];
    }
    else
    {
        OutUV = 0.0f;
    }
}

void DISkelMesh_IsValidVertex(in FDISkelMeshContext DIContext, int Vertex, out bool IsValid)
{
    IsValid = Vertex < (int)DIContext.MeshVertexCount;
}

void DISkelMesh_GetRandomVertex(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int OutVertex)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	OutVertex = (int)min(uint(RandT0 * float(DIContext.MeshVertexCount)), DIContext.MeshVertexCount - 1);
}

void DISkelMesh_GetVertexCount(in FDISkelMeshContext DIContext, out int VertexCount)
{
	VertexCount = (int)DIContext.MeshVertexCount;
}

void DISkelMesh_IsValidFilteredVertex(in FDISkelMeshContext DIContext, int FilteredIndex, out bool IsValid)
{
	IsValid = FilteredIndex < (int)DIContext.MeshNumSamplingRegionVertices;
}

void DISkelMesh_GetRandomFilteredVertex(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int OutVertex)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	int FilteredIndex = (int)min(uint(RandT0 * float(DIContext.MeshNumSamplingRegionVertices)), DIContext.MeshNumSamplingRegionVertices - 1);
	OutVertex = (int)DIContext.MeshSampleRegionsVertices[FilteredIndex];
}

void DISkelMesh_GetFilteredVertexCount(in FDISkelMeshContext DIContext, out int VertexCount)
{
	VertexCount = (int)DIContext.MeshNumSamplingRegionVertices;
}

void DISkelMesh_GetFilteredVertexAt(in FDISkelMeshContext DIContext, int FilteredIndex, out int VertexIndex)
{
	FilteredIndex = clamp(FilteredIndex, 0, (int)DIContext.MeshNumSamplingRegionVertices - 1);
	VertexIndex = (int)DIContext.MeshSampleRegionsVertices[FilteredIndex];
}



void DISkelMesh_IsValidBone(in FDISkelMeshContext DIContext, in int BoneIndex, out bool IsValid)
{
	IsValid = BoneIndex >= 0 && BoneIndex < DIContext.NumBones;
}

void DISkelMesh_RandomBone(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int Bone)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	Bone = min(int(RandT0 * float(DIContext.RandomMaxBone)), DIContext.RandomMaxBone);
	Bone = Bone != DIContext.ExcludeBoneIndex ? Bone : Bone + 1;
}

void DISkelMesh_GetBoneCount(in FDISkelMeshContext DIContext, out int Count)
{
	Count = DIContext.NumBones;
}

void DISkelMesh_GetFilteredBoneCount(in FDISkelMeshContext DIContext, out int Count)
{
    Count = DIContext.NumFilteredBones;
}

void DISkelMesh_GetFilteredBoneAt(in FDISkelMeshContext DIContext, in int InBoneIndex, out int Bone)
{
    int BoneIndex = min(InBoneIndex, DIContext.NumFilteredBones - 1);
    Bone = (int)DIContext.FilteredAndUnfilteredBones[BoneIndex];
}

void DISkelMesh_RandomFilteredBone(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int Bone)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
    int FilteredBone = min(int(RandT0 * float(DIContext.NumFilteredBones)), DIContext.NumFilteredBones - 1);
    Bone = (int)DIContext.FilteredAndUnfilteredBones[FilteredBone];
}

void DISkelMesh_GetUnfilteredBoneCount(in FDISkelMeshContext DIContext, out int Count)
{
    Count = DIContext.NumUnfilteredBones;
}

void DISkelMesh_GetUnfilteredBoneAt(in FDISkelMeshContext DIContext, in int InBoneIndex, out int Bone)
{
    int BoneIndex = min(InBoneIndex, DIContext.NumUnfilteredBones - 1);
    Bone = DIContext.NumFilteredBones > 0 ? (int)DIContext.FilteredAndUnfilteredBones[BoneIndex + DIContext.NumFilteredBones] : BoneIndex;
}

void DISkelMesh_RandomUnfilteredBone(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int Bone)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	if ( DIContext.NumFilteredBones == 0 )
	{
		Bone = min(int(RandT0 * float(DIContext.RandomMaxBone)), DIContext.RandomMaxBone);
		Bone = Bone != DIContext.ExcludeBoneIndex ? Bone : Bone + 1;
	}
	else
	{
		int UnfilteredBone = min(int(RandT0 * float(DIContext.NumUnfilteredBones)), DIContext.NumUnfilteredBones - 1);
		Bone = DIContext.NumFilteredBones > 0 ? (int)DIContext.FilteredAndUnfilteredBones[UnfilteredBone + DIContext.NumFilteredBones] : UnfilteredBone;
	}
}

void DISkelMesh_GetFilteredSocketCount(in FDISkelMeshContext DIContext, out int Count)
{
    Count = DIContext.NumFilteredSockets;
}

void DISkelMesh_GetFilteredSocketBoneAt(in FDISkelMeshContext DIContext, in int InSocketIndex, out int Bone)
{
    Bone = DIContext.FilteredSocketBoneOffset + clamp(InSocketIndex, 0, DIContext.NumFilteredSockets - 1);
}

void DISkelMesh_RandomFilteredSocket(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int SocketBone)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
    SocketBone = DIContext.FilteredSocketBoneOffset + min(int(RandT0 * float(DIContext.NumFilteredSockets)), DIContext.NumFilteredSockets - 1);
}

void DISkelMesh_RandomFilteredSocketOrBone(in FDISkelMeshContext DIContext, uint Seed1, uint Seed2, uint Seed3, out int Bone)
{
	float RandT0 = DISKelMesh_Random(Seed1, Seed2, Seed3);
	int NumFilteredSocketsAndBones = DIContext.NumFilteredBones + DIContext.NumFilteredSockets;
    int FilteredIndex = min(int(RandT0 * float(NumFilteredSocketsAndBones)), NumFilteredSocketsAndBones - 1);
	if ( FilteredIndex < DIContext.NumFilteredBones )
	{
		Bone = (int)DIContext.FilteredAndUnfilteredBones[FilteredIndex];
	}
	else
	{
		Bone = DIContext.FilteredSocketBoneOffset + FilteredIndex - DIContext.NumFilteredBones;
	}
}

void DISkelMesh_GetFilteredSocketOrBoneCount(in FDISkelMeshContext DIContext, out int Count)
{
	Count = DIContext.NumFilteredBones + DIContext.NumFilteredSockets;
}

void DISkelMesh_GetFilteredSocketOrBoneAt(in FDISkelMeshContext DIContext, int FilteredIndex, out int Bone)
{
	int NumFilteredSocketsAndBones = DIContext.NumFilteredBones + DIContext.NumFilteredSockets;
	FilteredIndex = clamp(FilteredIndex, 0, NumFilteredSocketsAndBones - 1);
	if ( FilteredIndex < DIContext.NumFilteredBones )
	{
		Bone = (int)DIContext.FilteredAndUnfilteredBones[FilteredIndex];
	}
	else
	{
		Bone = DIContext.FilteredSocketBoneOffset + FilteredIndex - DIContext.NumFilteredBones;
	}
}
#line 1432 "/Engine/Generated/NiagaraEmitterInstance.ush"
Buffer<uint> MeshIndexBuffer_Emitter_Mesh001 ; Buffer<float> MeshVertexBuffer_Emitter_Mesh001 ; Buffer<uint> MeshSkinWeightBuffer_Emitter_Mesh001 ; Buffer<uint> MeshSkinWeightLookupBuffer_Emitter_Mesh001 ; Buffer<float4> MeshCurrBonesBuffer_Emitter_Mesh001 ; Buffer<float4> MeshPrevBonesBuffer_Emitter_Mesh001 ; Buffer<float4> MeshCurrSamplingBonesBuffer_Emitter_Mesh001 ; Buffer<float4> MeshPrevSamplingBonesBuffer_Emitter_Mesh001 ; Buffer<float4> MeshTangentBuffer_Emitter_Mesh001 ; Buffer<float2> MeshTexCoordBuffer_Emitter_Mesh001 ; Buffer<float4> MeshColorBuffer_Emitter_Mesh001 ; Buffer<float> MeshTriangleSamplerProbaBuffer_Emitter_Mesh001 ; Buffer<uint> MeshTriangleSamplerAliasBuffer_Emitter_Mesh001 ; uint MeshNumSamplingRegionTriangles_Emitter_Mesh001 ; uint MeshNumSamplingRegionVertices_Emitter_Mesh001 ; Buffer<float> MeshSamplingRegionsProbaBuffer_Emitter_Mesh001 ; Buffer<uint> MeshSamplingRegionsAliasBuffer_Emitter_Mesh001 ; Buffer<uint> MeshSampleRegionsTriangleIndices_Emitter_Mesh001 ; Buffer<uint> MeshSampleRegionsVertices_Emitter_Mesh001 ; Buffer<uint> MeshTriangleMatricesOffsetBuffer_Emitter_Mesh001 ; uint MeshTriangleCount_Emitter_Mesh001 ; uint MeshVertexCount_Emitter_Mesh001 ; uint MeshWeightStride_Emitter_Mesh001 ; uint MeshSkinWeightIndexSize_Emitter_Mesh001 ; uint MeshNumTexCoord_Emitter_Mesh001 ; uint MeshNumWeights_Emitter_Mesh001 ; int NumBones_Emitter_Mesh001 ; int NumFilteredBones_Emitter_Mesh001 ; int NumUnfilteredBones_Emitter_Mesh001 ; int RandomMaxBone_Emitter_Mesh001 ; int ExcludeBoneIndex_Emitter_Mesh001 ; Buffer<uint> FilteredAndUnfilteredBones_Emitter_Mesh001 ; int NumFilteredSockets_Emitter_Mesh001 ; int FilteredSocketBoneOffset_Emitter_Mesh001 ; float4x4 InstanceTransform_Emitter_Mesh001 ; float4x4 InstancePrevTransform_Emitter_Mesh001 ; float4 InstanceRotation_Emitter_Mesh001 ; float4 InstancePrevRotation_Emitter_Mesh001 ; float InstanceInvDeltaTime_Emitter_Mesh001 ; uint EnabledFeatures_Emitter_Mesh001 ;
Buffer<uint> MeshIndexBuffer_Emitter_Mesh ; Buffer<float> MeshVertexBuffer_Emitter_Mesh ; Buffer<uint> MeshSkinWeightBuffer_Emitter_Mesh ; Buffer<uint> MeshSkinWeightLookupBuffer_Emitter_Mesh ; Buffer<float4> MeshCurrBonesBuffer_Emitter_Mesh ; Buffer<float4> MeshPrevBonesBuffer_Emitter_Mesh ; Buffer<float4> MeshCurrSamplingBonesBuffer_Emitter_Mesh ; Buffer<float4> MeshPrevSamplingBonesBuffer_Emitter_Mesh ; Buffer<float4> MeshTangentBuffer_Emitter_Mesh ; Buffer<float2> MeshTexCoordBuffer_Emitter_Mesh ; Buffer<float4> MeshColorBuffer_Emitter_Mesh ; Buffer<float> MeshTriangleSamplerProbaBuffer_Emitter_Mesh ; Buffer<uint> MeshTriangleSamplerAliasBuffer_Emitter_Mesh ; uint MeshNumSamplingRegionTriangles_Emitter_Mesh ; uint MeshNumSamplingRegionVertices_Emitter_Mesh ; Buffer<float> MeshSamplingRegionsProbaBuffer_Emitter_Mesh ; Buffer<uint> MeshSamplingRegionsAliasBuffer_Emitter_Mesh ; Buffer<uint> MeshSampleRegionsTriangleIndices_Emitter_Mesh ; Buffer<uint> MeshSampleRegionsVertices_Emitter_Mesh ; Buffer<uint> MeshTriangleMatricesOffsetBuffer_Emitter_Mesh ; uint MeshTriangleCount_Emitter_Mesh ; uint MeshVertexCount_Emitter_Mesh ; uint MeshWeightStride_Emitter_Mesh ; uint MeshSkinWeightIndexSize_Emitter_Mesh ; uint MeshNumTexCoord_Emitter_Mesh ; uint MeshNumWeights_Emitter_Mesh ; int NumBones_Emitter_Mesh ; int NumFilteredBones_Emitter_Mesh ; int NumUnfilteredBones_Emitter_Mesh ; int RandomMaxBone_Emitter_Mesh ; int ExcludeBoneIndex_Emitter_Mesh ; Buffer<uint> FilteredAndUnfilteredBones_Emitter_Mesh ; int NumFilteredSockets_Emitter_Mesh ; int FilteredSocketBoneOffset_Emitter_Mesh ; float4x4 InstanceTransform_Emitter_Mesh ; float4x4 InstancePrevTransform_Emitter_Mesh ; float4 InstanceRotation_Emitter_Mesh ; float4 InstancePrevRotation_Emitter_Mesh ; float InstanceInvDeltaTime_Emitter_Mesh ; uint EnabledFeatures_Emitter_Mesh ;
void RandomTriCoord_EmitterMesh001 (NiagaraRandInfo InRandomInfo, out MeshTriCoordinate OutCoord) {  FDISkelMeshContext DIContext; DIContext.MeshIndexBuffer = MeshIndexBuffer_Emitter_Mesh001 ; DIContext.MeshVertexBuffer = MeshVertexBuffer_Emitter_Mesh001 ; DIContext.MeshSkinWeightBuffer = MeshSkinWeightBuffer_Emitter_Mesh001 ; DIContext.MeshSkinWeightLookupBuffer = MeshSkinWeightLookupBuffer_Emitter_Mesh001 ; DIContext.MeshCurrBonesBuffer = MeshCurrBonesBuffer_Emitter_Mesh001 ; DIContext.MeshPrevBonesBuffer = MeshPrevBonesBuffer_Emitter_Mesh001 ; DIContext.MeshCurrSamplingBonesBuffer = MeshCurrSamplingBonesBuffer_Emitter_Mesh001 ; DIContext.MeshPrevSamplingBonesBuffer = MeshPrevSamplingBonesBuffer_Emitter_Mesh001 ; DIContext.MeshTangentBuffer = MeshTangentBuffer_Emitter_Mesh001 ; DIContext.MeshTexCoordBuffer = MeshTexCoordBuffer_Emitter_Mesh001 ; DIContext.MeshColorBuffer = MeshColorBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleSamplerProbaBuffer = MeshTriangleSamplerProbaBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleSamplerAliasBuffer = MeshTriangleSamplerAliasBuffer_Emitter_Mesh001 ; DIContext.MeshNumSamplingRegionTriangles = MeshNumSamplingRegionTriangles_Emitter_Mesh001 ; DIContext.MeshNumSamplingRegionVertices = MeshNumSamplingRegionVertices_Emitter_Mesh001 ; DIContext.MeshSamplingRegionsProbaBuffer = MeshSamplingRegionsProbaBuffer_Emitter_Mesh001 ; DIContext.MeshSamplingRegionsAliasBuffer = MeshSamplingRegionsAliasBuffer_Emitter_Mesh001 ; DIContext.MeshSampleRegionsTriangleIndices = MeshSampleRegionsTriangleIndices_Emitter_Mesh001 ; DIContext.MeshSampleRegionsVertices = MeshSampleRegionsVertices_Emitter_Mesh001 ; DIContext.MeshTriangleMatricesOffsetBuffer = MeshTriangleMatricesOffsetBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleCount = MeshTriangleCount_Emitter_Mesh001 ; DIContext.MeshVertexCount = MeshVertexCount_Emitter_Mesh001 ; DIContext.MeshNumTexCoord = MeshNumTexCoord_Emitter_Mesh001 ; DIContext.MeshNumWeights = MeshNumWeights_Emitter_Mesh001 ; DIContext.NumBones = NumBones_Emitter_Mesh001 ; DIContext.NumFilteredBones = NumFilteredBones_Emitter_Mesh001 ; DIContext.NumUnfilteredBones = NumUnfilteredBones_Emitter_Mesh001 ; DIContext.RandomMaxBone = RandomMaxBone_Emitter_Mesh001 ; DIContext.ExcludeBoneIndex = ExcludeBoneIndex_Emitter_Mesh001 ; DIContext.FilteredAndUnfilteredBones = FilteredAndUnfilteredBones_Emitter_Mesh001 ; DIContext.NumFilteredSockets = NumFilteredSockets_Emitter_Mesh001 ; DIContext.FilteredSocketBoneOffset = FilteredSocketBoneOffset_Emitter_Mesh001 ; DIContext.MeshWeightStride = MeshWeightStride_Emitter_Mesh001 ; DIContext.MeshSkinWeightIndexSize = MeshSkinWeightIndexSize_Emitter_Mesh001 ; DIContext.InstanceTransform = InstanceTransform_Emitter_Mesh001 ; DIContext.InstancePrevTransform = InstancePrevTransform_Emitter_Mesh001 ; DIContext.InstanceRotation = InstanceRotation_Emitter_Mesh001 ; DIContext.InstancePrevRotation = InstancePrevRotation_Emitter_Mesh001 ; DIContext.InstanceInvDeltaTime = InstanceInvDeltaTime_Emitter_Mesh001 ; DIContext.UniformTriangleSamplingEnable = EnabledFeatures_Emitter_Mesh001 & 0x1; DIContext.UniformSamplingRegionEnabled = EnabledFeatures_Emitter_Mesh001 & 0x2; DIContext.UnlimitedBoneInfluences = EnabledFeatures_Emitter_Mesh001 & 0x4;  DISKelMesh_RandomTriCoord(DIContext, InRandomInfo.Seed1, InRandomInfo.Seed2, InRandomInfo.Seed3, OutCoord.Tri, OutCoord.BaryCoord); }
void GetTriColor_EmitterMesh001 (in MeshTriCoordinate InCoord, out float4 OutColor) {  FDISkelMeshContext DIContext; DIContext.MeshIndexBuffer = MeshIndexBuffer_Emitter_Mesh001 ; DIContext.MeshVertexBuffer = MeshVertexBuffer_Emitter_Mesh001 ; DIContext.MeshSkinWeightBuffer = MeshSkinWeightBuffer_Emitter_Mesh001 ; DIContext.MeshSkinWeightLookupBuffer = MeshSkinWeightLookupBuffer_Emitter_Mesh001 ; DIContext.MeshCurrBonesBuffer = MeshCurrBonesBuffer_Emitter_Mesh001 ; DIContext.MeshPrevBonesBuffer = MeshPrevBonesBuffer_Emitter_Mesh001 ; DIContext.MeshCurrSamplingBonesBuffer = MeshCurrSamplingBonesBuffer_Emitter_Mesh001 ; DIContext.MeshPrevSamplingBonesBuffer = MeshPrevSamplingBonesBuffer_Emitter_Mesh001 ; DIContext.MeshTangentBuffer = MeshTangentBuffer_Emitter_Mesh001 ; DIContext.MeshTexCoordBuffer = MeshTexCoordBuffer_Emitter_Mesh001 ; DIContext.MeshColorBuffer = MeshColorBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleSamplerProbaBuffer = MeshTriangleSamplerProbaBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleSamplerAliasBuffer = MeshTriangleSamplerAliasBuffer_Emitter_Mesh001 ; DIContext.MeshNumSamplingRegionTriangles = MeshNumSamplingRegionTriangles_Emitter_Mesh001 ; DIContext.MeshNumSamplingRegionVertices = MeshNumSamplingRegionVertices_Emitter_Mesh001 ; DIContext.MeshSamplingRegionsProbaBuffer = MeshSamplingRegionsProbaBuffer_Emitter_Mesh001 ; DIContext.MeshSamplingRegionsAliasBuffer = MeshSamplingRegionsAliasBuffer_Emitter_Mesh001 ; DIContext.MeshSampleRegionsTriangleIndices = MeshSampleRegionsTriangleIndices_Emitter_Mesh001 ; DIContext.MeshSampleRegionsVertices = MeshSampleRegionsVertices_Emitter_Mesh001 ; DIContext.MeshTriangleMatricesOffsetBuffer = MeshTriangleMatricesOffsetBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleCount = MeshTriangleCount_Emitter_Mesh001 ; DIContext.MeshVertexCount = MeshVertexCount_Emitter_Mesh001 ; DIContext.MeshNumTexCoord = MeshNumTexCoord_Emitter_Mesh001 ; DIContext.MeshNumWeights = MeshNumWeights_Emitter_Mesh001 ; DIContext.NumBones = NumBones_Emitter_Mesh001 ; DIContext.NumFilteredBones = NumFilteredBones_Emitter_Mesh001 ; DIContext.NumUnfilteredBones = NumUnfilteredBones_Emitter_Mesh001 ; DIContext.RandomMaxBone = RandomMaxBone_Emitter_Mesh001 ; DIContext.ExcludeBoneIndex = ExcludeBoneIndex_Emitter_Mesh001 ; DIContext.FilteredAndUnfilteredBones = FilteredAndUnfilteredBones_Emitter_Mesh001 ; DIContext.NumFilteredSockets = NumFilteredSockets_Emitter_Mesh001 ; DIContext.FilteredSocketBoneOffset = FilteredSocketBoneOffset_Emitter_Mesh001 ; DIContext.MeshWeightStride = MeshWeightStride_Emitter_Mesh001 ; DIContext.MeshSkinWeightIndexSize = MeshSkinWeightIndexSize_Emitter_Mesh001 ; DIContext.InstanceTransform = InstanceTransform_Emitter_Mesh001 ; DIContext.InstancePrevTransform = InstancePrevTransform_Emitter_Mesh001 ; DIContext.InstanceRotation = InstanceRotation_Emitter_Mesh001 ; DIContext.InstancePrevRotation = InstancePrevRotation_Emitter_Mesh001 ; DIContext.InstanceInvDeltaTime = InstanceInvDeltaTime_Emitter_Mesh001 ; DIContext.UniformTriangleSamplingEnable = EnabledFeatures_Emitter_Mesh001 & 0x1; DIContext.UniformSamplingRegionEnabled = EnabledFeatures_Emitter_Mesh001 & 0x2; DIContext.UnlimitedBoneInfluences = EnabledFeatures_Emitter_Mesh001 & 0x4;  DISkelMesh_GetTriColor(DIContext, InCoord.Tri, InCoord.BaryCoord, OutColor); }
void GetSkinnedTriangleDataWS_EmitterMesh001 (in MeshTriCoordinate InCoord, out float3 OutPosition, out float3 OutVelocity, out float3 OutNormal, out float3 OutBinormal, out float3 OutTangent) {  FDISkelMeshContext DIContext; DIContext.MeshIndexBuffer = MeshIndexBuffer_Emitter_Mesh001 ; DIContext.MeshVertexBuffer = MeshVertexBuffer_Emitter_Mesh001 ; DIContext.MeshSkinWeightBuffer = MeshSkinWeightBuffer_Emitter_Mesh001 ; DIContext.MeshSkinWeightLookupBuffer = MeshSkinWeightLookupBuffer_Emitter_Mesh001 ; DIContext.MeshCurrBonesBuffer = MeshCurrBonesBuffer_Emitter_Mesh001 ; DIContext.MeshPrevBonesBuffer = MeshPrevBonesBuffer_Emitter_Mesh001 ; DIContext.MeshCurrSamplingBonesBuffer = MeshCurrSamplingBonesBuffer_Emitter_Mesh001 ; DIContext.MeshPrevSamplingBonesBuffer = MeshPrevSamplingBonesBuffer_Emitter_Mesh001 ; DIContext.MeshTangentBuffer = MeshTangentBuffer_Emitter_Mesh001 ; DIContext.MeshTexCoordBuffer = MeshTexCoordBuffer_Emitter_Mesh001 ; DIContext.MeshColorBuffer = MeshColorBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleSamplerProbaBuffer = MeshTriangleSamplerProbaBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleSamplerAliasBuffer = MeshTriangleSamplerAliasBuffer_Emitter_Mesh001 ; DIContext.MeshNumSamplingRegionTriangles = MeshNumSamplingRegionTriangles_Emitter_Mesh001 ; DIContext.MeshNumSamplingRegionVertices = MeshNumSamplingRegionVertices_Emitter_Mesh001 ; DIContext.MeshSamplingRegionsProbaBuffer = MeshSamplingRegionsProbaBuffer_Emitter_Mesh001 ; DIContext.MeshSamplingRegionsAliasBuffer = MeshSamplingRegionsAliasBuffer_Emitter_Mesh001 ; DIContext.MeshSampleRegionsTriangleIndices = MeshSampleRegionsTriangleIndices_Emitter_Mesh001 ; DIContext.MeshSampleRegionsVertices = MeshSampleRegionsVertices_Emitter_Mesh001 ; DIContext.MeshTriangleMatricesOffsetBuffer = MeshTriangleMatricesOffsetBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleCount = MeshTriangleCount_Emitter_Mesh001 ; DIContext.MeshVertexCount = MeshVertexCount_Emitter_Mesh001 ; DIContext.MeshNumTexCoord = MeshNumTexCoord_Emitter_Mesh001 ; DIContext.MeshNumWeights = MeshNumWeights_Emitter_Mesh001 ; DIContext.NumBones = NumBones_Emitter_Mesh001 ; DIContext.NumFilteredBones = NumFilteredBones_Emitter_Mesh001 ; DIContext.NumUnfilteredBones = NumUnfilteredBones_Emitter_Mesh001 ; DIContext.RandomMaxBone = RandomMaxBone_Emitter_Mesh001 ; DIContext.ExcludeBoneIndex = ExcludeBoneIndex_Emitter_Mesh001 ; DIContext.FilteredAndUnfilteredBones = FilteredAndUnfilteredBones_Emitter_Mesh001 ; DIContext.NumFilteredSockets = NumFilteredSockets_Emitter_Mesh001 ; DIContext.FilteredSocketBoneOffset = FilteredSocketBoneOffset_Emitter_Mesh001 ; DIContext.MeshWeightStride = MeshWeightStride_Emitter_Mesh001 ; DIContext.MeshSkinWeightIndexSize = MeshSkinWeightIndexSize_Emitter_Mesh001 ; DIContext.InstanceTransform = InstanceTransform_Emitter_Mesh001 ; DIContext.InstancePrevTransform = InstancePrevTransform_Emitter_Mesh001 ; DIContext.InstanceRotation = InstanceRotation_Emitter_Mesh001 ; DIContext.InstancePrevRotation = InstancePrevRotation_Emitter_Mesh001 ; DIContext.InstanceInvDeltaTime = InstanceInvDeltaTime_Emitter_Mesh001 ; DIContext.UniformTriangleSamplingEnable = EnabledFeatures_Emitter_Mesh001 & 0x1; DIContext.UniformSamplingRegionEnabled = EnabledFeatures_Emitter_Mesh001 & 0x2; DIContext.UnlimitedBoneInfluences = EnabledFeatures_Emitter_Mesh001 & 0x4;  DISKelMesh_GetSkinnedTriangleDataWS(DIContext, InCoord.Tri, InCoord.BaryCoord, OutPosition, OutVelocity, OutNormal, OutBinormal, OutTangent); }
void GetTriUV_EmitterMesh001 (in MeshTriCoordinate InCoord, in int InUVSet, out float2 OutUV) {  FDISkelMeshContext DIContext; DIContext.MeshIndexBuffer = MeshIndexBuffer_Emitter_Mesh001 ; DIContext.MeshVertexBuffer = MeshVertexBuffer_Emitter_Mesh001 ; DIContext.MeshSkinWeightBuffer = MeshSkinWeightBuffer_Emitter_Mesh001 ; DIContext.MeshSkinWeightLookupBuffer = MeshSkinWeightLookupBuffer_Emitter_Mesh001 ; DIContext.MeshCurrBonesBuffer = MeshCurrBonesBuffer_Emitter_Mesh001 ; DIContext.MeshPrevBonesBuffer = MeshPrevBonesBuffer_Emitter_Mesh001 ; DIContext.MeshCurrSamplingBonesBuffer = MeshCurrSamplingBonesBuffer_Emitter_Mesh001 ; DIContext.MeshPrevSamplingBonesBuffer = MeshPrevSamplingBonesBuffer_Emitter_Mesh001 ; DIContext.MeshTangentBuffer = MeshTangentBuffer_Emitter_Mesh001 ; DIContext.MeshTexCoordBuffer = MeshTexCoordBuffer_Emitter_Mesh001 ; DIContext.MeshColorBuffer = MeshColorBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleSamplerProbaBuffer = MeshTriangleSamplerProbaBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleSamplerAliasBuffer = MeshTriangleSamplerAliasBuffer_Emitter_Mesh001 ; DIContext.MeshNumSamplingRegionTriangles = MeshNumSamplingRegionTriangles_Emitter_Mesh001 ; DIContext.MeshNumSamplingRegionVertices = MeshNumSamplingRegionVertices_Emitter_Mesh001 ; DIContext.MeshSamplingRegionsProbaBuffer = MeshSamplingRegionsProbaBuffer_Emitter_Mesh001 ; DIContext.MeshSamplingRegionsAliasBuffer = MeshSamplingRegionsAliasBuffer_Emitter_Mesh001 ; DIContext.MeshSampleRegionsTriangleIndices = MeshSampleRegionsTriangleIndices_Emitter_Mesh001 ; DIContext.MeshSampleRegionsVertices = MeshSampleRegionsVertices_Emitter_Mesh001 ; DIContext.MeshTriangleMatricesOffsetBuffer = MeshTriangleMatricesOffsetBuffer_Emitter_Mesh001 ; DIContext.MeshTriangleCount = MeshTriangleCount_Emitter_Mesh001 ; DIContext.MeshVertexCount = MeshVertexCount_Emitter_Mesh001 ; DIContext.MeshNumTexCoord = MeshNumTexCoord_Emitter_Mesh001 ; DIContext.MeshNumWeights = MeshNumWeights_Emitter_Mesh001 ; DIContext.NumBones = NumBones_Emitter_Mesh001 ; DIContext.NumFilteredBones = NumFilteredBones_Emitter_Mesh001 ; DIContext.NumUnfilteredBones = NumUnfilteredBones_Emitter_Mesh001 ; DIContext.RandomMaxBone = RandomMaxBone_Emitter_Mesh001 ; DIContext.ExcludeBoneIndex = ExcludeBoneIndex_Emitter_Mesh001 ; DIContext.FilteredAndUnfilteredBones = FilteredAndUnfilteredBones_Emitter_Mesh001 ; DIContext.NumFilteredSockets = NumFilteredSockets_Emitter_Mesh001 ; DIContext.FilteredSocketBoneOffset = FilteredSocketBoneOffset_Emitter_Mesh001 ; DIContext.MeshWeightStride = MeshWeightStride_Emitter_Mesh001 ; DIContext.MeshSkinWeightIndexSize = MeshSkinWeightIndexSize_Emitter_Mesh001 ; DIContext.InstanceTransform = InstanceTransform_Emitter_Mesh001 ; DIContext.InstancePrevTransform = InstancePrevTransform_Emitter_Mesh001 ; DIContext.InstanceRotation = InstanceRotation_Emitter_Mesh001 ; DIContext.InstancePrevRotation = InstancePrevRotation_Emitter_Mesh001 ; DIContext.InstanceInvDeltaTime = InstanceInvDeltaTime_Emitter_Mesh001 ; DIContext.UniformTriangleSamplingEnable = EnabledFeatures_Emitter_Mesh001 & 0x1; DIContext.UniformSamplingRegionEnabled = EnabledFeatures_Emitter_Mesh001 & 0x2; DIContext.UnlimitedBoneInfluences = EnabledFeatures_Emitter_Mesh001 & 0x4;  DISKelMesh_GetTriUV(DIContext, InCoord.Tri, InCoord.BaryCoord, InUVSet, OutUV); }
void GetSkinnedTriangleDataWS_EmitterMesh (in MeshTriCoordinate InCoord, out float3 OutPosition, out float3 OutVelocity, out float3 OutNormal, out float3 OutBinormal, out float3 OutTangent) {  FDISkelMeshContext DIContext; DIContext.MeshIndexBuffer = MeshIndexBuffer_Emitter_Mesh ; DIContext.MeshVertexBuffer = MeshVertexBuffer_Emitter_Mesh ; DIContext.MeshSkinWeightBuffer = MeshSkinWeightBuffer_Emitter_Mesh ; DIContext.MeshSkinWeightLookupBuffer = MeshSkinWeightLookupBuffer_Emitter_Mesh ; DIContext.MeshCurrBonesBuffer = MeshCurrBonesBuffer_Emitter_Mesh ; DIContext.MeshPrevBonesBuffer = MeshPrevBonesBuffer_Emitter_Mesh ; DIContext.MeshCurrSamplingBonesBuffer = MeshCurrSamplingBonesBuffer_Emitter_Mesh ; DIContext.MeshPrevSamplingBonesBuffer = MeshPrevSamplingBonesBuffer_Emitter_Mesh ; DIContext.MeshTangentBuffer = MeshTangentBuffer_Emitter_Mesh ; DIContext.MeshTexCoordBuffer = MeshTexCoordBuffer_Emitter_Mesh ; DIContext.MeshColorBuffer = MeshColorBuffer_Emitter_Mesh ; DIContext.MeshTriangleSamplerProbaBuffer = MeshTriangleSamplerProbaBuffer_Emitter_Mesh ; DIContext.MeshTriangleSamplerAliasBuffer = MeshTriangleSamplerAliasBuffer_Emitter_Mesh ; DIContext.MeshNumSamplingRegionTriangles = MeshNumSamplingRegionTriangles_Emitter_Mesh ; DIContext.MeshNumSamplingRegionVertices = MeshNumSamplingRegionVertices_Emitter_Mesh ; DIContext.MeshSamplingRegionsProbaBuffer = MeshSamplingRegionsProbaBuffer_Emitter_Mesh ; DIContext.MeshSamplingRegionsAliasBuffer = MeshSamplingRegionsAliasBuffer_Emitter_Mesh ; DIContext.MeshSampleRegionsTriangleIndices = MeshSampleRegionsTriangleIndices_Emitter_Mesh ; DIContext.MeshSampleRegionsVertices = MeshSampleRegionsVertices_Emitter_Mesh ; DIContext.MeshTriangleMatricesOffsetBuffer = MeshTriangleMatricesOffsetBuffer_Emitter_Mesh ; DIContext.MeshTriangleCount = MeshTriangleCount_Emitter_Mesh ; DIContext.MeshVertexCount = MeshVertexCount_Emitter_Mesh ; DIContext.MeshNumTexCoord = MeshNumTexCoord_Emitter_Mesh ; DIContext.MeshNumWeights = MeshNumWeights_Emitter_Mesh ; DIContext.NumBones = NumBones_Emitter_Mesh ; DIContext.NumFilteredBones = NumFilteredBones_Emitter_Mesh ; DIContext.NumUnfilteredBones = NumUnfilteredBones_Emitter_Mesh ; DIContext.RandomMaxBone = RandomMaxBone_Emitter_Mesh ; DIContext.ExcludeBoneIndex = ExcludeBoneIndex_Emitter_Mesh ; DIContext.FilteredAndUnfilteredBones = FilteredAndUnfilteredBones_Emitter_Mesh ; DIContext.NumFilteredSockets = NumFilteredSockets_Emitter_Mesh ; DIContext.FilteredSocketBoneOffset = FilteredSocketBoneOffset_Emitter_Mesh ; DIContext.MeshWeightStride = MeshWeightStride_Emitter_Mesh ; DIContext.MeshSkinWeightIndexSize = MeshSkinWeightIndexSize_Emitter_Mesh ; DIContext.InstanceTransform = InstanceTransform_Emitter_Mesh ; DIContext.InstancePrevTransform = InstancePrevTransform_Emitter_Mesh ; DIContext.InstanceRotation = InstanceRotation_Emitter_Mesh ; DIContext.InstancePrevRotation = InstancePrevRotation_Emitter_Mesh ; DIContext.InstanceInvDeltaTime = InstanceInvDeltaTime_Emitter_Mesh ; DIContext.UniformTriangleSamplingEnable = EnabledFeatures_Emitter_Mesh & 0x1; DIContext.UniformSamplingRegionEnabled = EnabledFeatures_Emitter_Mesh & 0x2; DIContext.UnlimitedBoneInfluences = EnabledFeatures_Emitter_Mesh & 0x4;  DISKelMesh_GetSkinnedTriangleDataWS(DIContext, InCoord.Tri, InCoord.BaryCoord, OutPosition, OutVelocity, OutNormal, OutBinormal, OutTangent); }
void GetTriUV_EmitterMesh (in MeshTriCoordinate InCoord, in int InUVSet, out float2 OutUV) {  FDISkelMeshContext DIContext; DIContext.MeshIndexBuffer = MeshIndexBuffer_Emitter_Mesh ; DIContext.MeshVertexBuffer = MeshVertexBuffer_Emitter_Mesh ; DIContext.MeshSkinWeightBuffer = MeshSkinWeightBuffer_Emitter_Mesh ; DIContext.MeshSkinWeightLookupBuffer = MeshSkinWeightLookupBuffer_Emitter_Mesh ; DIContext.MeshCurrBonesBuffer = MeshCurrBonesBuffer_Emitter_Mesh ; DIContext.MeshPrevBonesBuffer = MeshPrevBonesBuffer_Emitter_Mesh ; DIContext.MeshCurrSamplingBonesBuffer = MeshCurrSamplingBonesBuffer_Emitter_Mesh ; DIContext.MeshPrevSamplingBonesBuffer = MeshPrevSamplingBonesBuffer_Emitter_Mesh ; DIContext.MeshTangentBuffer = MeshTangentBuffer_Emitter_Mesh ; DIContext.MeshTexCoordBuffer = MeshTexCoordBuffer_Emitter_Mesh ; DIContext.MeshColorBuffer = MeshColorBuffer_Emitter_Mesh ; DIContext.MeshTriangleSamplerProbaBuffer = MeshTriangleSamplerProbaBuffer_Emitter_Mesh ; DIContext.MeshTriangleSamplerAliasBuffer = MeshTriangleSamplerAliasBuffer_Emitter_Mesh ; DIContext.MeshNumSamplingRegionTriangles = MeshNumSamplingRegionTriangles_Emitter_Mesh ; DIContext.MeshNumSamplingRegionVertices = MeshNumSamplingRegionVertices_Emitter_Mesh ; DIContext.MeshSamplingRegionsProbaBuffer = MeshSamplingRegionsProbaBuffer_Emitter_Mesh ; DIContext.MeshSamplingRegionsAliasBuffer = MeshSamplingRegionsAliasBuffer_Emitter_Mesh ; DIContext.MeshSampleRegionsTriangleIndices = MeshSampleRegionsTriangleIndices_Emitter_Mesh ; DIContext.MeshSampleRegionsVertices = MeshSampleRegionsVertices_Emitter_Mesh ; DIContext.MeshTriangleMatricesOffsetBuffer = MeshTriangleMatricesOffsetBuffer_Emitter_Mesh ; DIContext.MeshTriangleCount = MeshTriangleCount_Emitter_Mesh ; DIContext.MeshVertexCount = MeshVertexCount_Emitter_Mesh ; DIContext.MeshNumTexCoord = MeshNumTexCoord_Emitter_Mesh ; DIContext.MeshNumWeights = MeshNumWeights_Emitter_Mesh ; DIContext.NumBones = NumBones_Emitter_Mesh ; DIContext.NumFilteredBones = NumFilteredBones_Emitter_Mesh ; DIContext.NumUnfilteredBones = NumUnfilteredBones_Emitter_Mesh ; DIContext.RandomMaxBone = RandomMaxBone_Emitter_Mesh ; DIContext.ExcludeBoneIndex = ExcludeBoneIndex_Emitter_Mesh ; DIContext.FilteredAndUnfilteredBones = FilteredAndUnfilteredBones_Emitter_Mesh ; DIContext.NumFilteredSockets = NumFilteredSockets_Emitter_Mesh ; DIContext.FilteredSocketBoneOffset = FilteredSocketBoneOffset_Emitter_Mesh ; DIContext.MeshWeightStride = MeshWeightStride_Emitter_Mesh ; DIContext.MeshSkinWeightIndexSize = MeshSkinWeightIndexSize_Emitter_Mesh ; DIContext.InstanceTransform = InstanceTransform_Emitter_Mesh ; DIContext.InstancePrevTransform = InstancePrevTransform_Emitter_Mesh ; DIContext.InstanceRotation = InstanceRotation_Emitter_Mesh ; DIContext.InstancePrevRotation = InstancePrevRotation_Emitter_Mesh ; DIContext.InstanceInvDeltaTime = InstanceInvDeltaTime_Emitter_Mesh ; DIContext.UniformTriangleSamplingEnable = EnabledFeatures_Emitter_Mesh & 0x1; DIContext.UniformSamplingRegionEnabled = EnabledFeatures_Emitter_Mesh & 0x2; DIContext.UnlimitedBoneInfluences = EnabledFeatures_Emitter_Mesh & 0x4;  DISKelMesh_GetTriUV(DIContext, InCoord.Tri, InCoord.BaryCoord, InUVSet, OutUV); }
void InitConstants(inout FSimulationContext Context)
{
	Context.MapSpawn.Constants.Emitter.Initialize_MeshReproductionSprite.MaxParticleSize = Constants_Emitter_Initialize_MeshReproductionSprite_MaxParticleSize;
	Context.MapSpawn.Constants.Emitter.Initialize_MeshReproductionSprite.ParticleScale = Constants_Emitter_Initialize_MeshReproductionSprite_ParticleScale;
	Context.MapSpawn.Constants.Emitter.Initialize_MeshReproductionSprite.KillParticlesBelowXWidth = Constants_Emitter_Initialize_MeshReproductionSprite_KillParticlesBelowXWidth;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime = Constants_Emitter_InitializeParticle_Lifetime;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize.xy;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale.xyz;
	Context.MapSpawn.Constants.Emitter.ApplyInitialForces.PositionalForceWarmupTime = Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.GravityForce.Gravity = Constants_Emitter_GravityForce_Gravity.xyz;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Constants.Emitter.Update_MeshReproductionSprite.SpriteSize = Constants_Emitter_Update_MeshReproductionSprite_SpriteSize.xy;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
}

void InitSpawnVariables(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter3.x = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter3.y = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter3.z = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter3.w = 0.0f;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.Tri = 0;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.x = 0.0f;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.y = 0.0f;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.z = 0.0f;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleUVArea = 0.0f;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.TriangleWorldSpaceArea = 0.0f;
	Context.MapSpawn.Particles.Initialize_MeshReproductionSprite.UVWidth = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.RotationalInertia = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.x = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.y = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteAlignment.x = 0.0f;
	Context.MapSpawn.Particles.SpriteAlignment.y = 0.0f;
	Context.MapSpawn.Particles.SpriteAlignment.z = 0.0f;
	Context.MapSpawn.Particles.SpriteFacing.x = 0.0f;
	Context.MapSpawn.Particles.SpriteFacing.y = 0.0f;
	Context.MapSpawn.Particles.SpriteFacing.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;

	Context.MapSpawn.DataInstance.Alive=true;
}

void LoadUpdateVariables(inout FSimulationContext Context, int InstanceIdx)
{
		Context.MapUpdate.Particles.Age = InputDataFloat(0, 0, InstanceIdx);
		Context.MapUpdate.Particles.Color.r = InputDataFloat(0, 1, InstanceIdx);
		Context.MapUpdate.Particles.Color.g = InputDataFloat(0, 2, InstanceIdx);
		Context.MapUpdate.Particles.Color.b = InputDataFloat(0, 3, InstanceIdx);
		Context.MapUpdate.Particles.Color.a = InputDataFloat(0, 4, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter3.x = InputDataFloat(0, 5, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter3.y = InputDataFloat(0, 6, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter3.z = InputDataFloat(0, 7, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter3.w = InputDataFloat(0, 8, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.Tri = InputDataInt(0, 0, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.x = InputDataFloat(0, 9, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.y = InputDataFloat(0, 10, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.z = InputDataFloat(0, 11, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.SpriteSize.x = InputDataFloat(0, 12, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.SpriteSize.y = InputDataFloat(0, 13, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.TriangleUVArea = InputDataFloat(0, 14, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.TriangleWorldSpaceArea = InputDataFloat(0, 15, InstanceIdx);
		Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.UVWidth = InputDataFloat(0, 16, InstanceIdx);
		Context.MapUpdate.Particles.Lifetime = InputDataFloat(0, 17, InstanceIdx);
		Context.MapUpdate.Particles.Mass = InputDataFloat(0, 18, InstanceIdx);
		Context.MapUpdate.Particles.MaterialRandom = InputDataFloat(0, 19, InstanceIdx);
		Context.MapUpdate.Particles.NormalizedAge = InputDataFloat(0, 20, InstanceIdx);
		Context.MapUpdate.Particles.Position.x = InputDataFloat(0, 21, InstanceIdx);
		Context.MapUpdate.Particles.Position.y = InputDataFloat(0, 22, InstanceIdx);
		Context.MapUpdate.Particles.Position.z = InputDataFloat(0, 23, InstanceIdx);
		Context.MapUpdate.Particles.PreviousVelocity.x = InputDataFloat(0, 24, InstanceIdx);
		Context.MapUpdate.Particles.PreviousVelocity.y = InputDataFloat(0, 25, InstanceIdx);
		Context.MapUpdate.Particles.PreviousVelocity.z = InputDataFloat(0, 26, InstanceIdx);
		Context.MapUpdate.Particles.RotationalInertia = InputDataFloat(0, 27, InstanceIdx);
		Context.MapUpdate.Particles.RotationalVelocity.x = InputDataFloat(0, 28, InstanceIdx);
		Context.MapUpdate.Particles.RotationalVelocity.y = InputDataFloat(0, 29, InstanceIdx);
		Context.MapUpdate.Particles.RotationalVelocity.z = InputDataFloat(0, 30, InstanceIdx);
		Context.MapUpdate.Particles.Scale.x = InputDataFloat(0, 31, InstanceIdx);
		Context.MapUpdate.Particles.Scale.y = InputDataFloat(0, 32, InstanceIdx);
		Context.MapUpdate.Particles.Scale.z = InputDataFloat(0, 33, InstanceIdx);
		Context.MapUpdate.Particles.SpriteAlignment.x = InputDataFloat(0, 34, InstanceIdx);
		Context.MapUpdate.Particles.SpriteAlignment.y = InputDataFloat(0, 35, InstanceIdx);
		Context.MapUpdate.Particles.SpriteAlignment.z = InputDataFloat(0, 36, InstanceIdx);
		Context.MapUpdate.Particles.SpriteFacing.x = InputDataFloat(0, 37, InstanceIdx);
		Context.MapUpdate.Particles.SpriteFacing.y = InputDataFloat(0, 38, InstanceIdx);
		Context.MapUpdate.Particles.SpriteFacing.z = InputDataFloat(0, 39, InstanceIdx);
		Context.MapUpdate.Particles.SpriteRotation = InputDataFloat(0, 40, InstanceIdx);
		Context.MapUpdate.Particles.SpriteSize.x = InputDataFloat(0, 41, InstanceIdx);
		Context.MapUpdate.Particles.SpriteSize.y = InputDataFloat(0, 42, InstanceIdx);
		Context.MapUpdate.Particles.UniqueID = InputDataInt(0, 1, InstanceIdx);
		Context.MapUpdate.Particles.Velocity.x = InputDataFloat(0, 43, InstanceIdx);
		Context.MapUpdate.Particles.Velocity.y = InputDataFloat(0, 44, InstanceIdx);
		Context.MapUpdate.Particles.Velocity.z = InputDataFloat(0, 45, InstanceIdx);
		Context.MapUpdate.DataInstance.Alive=true;
}

void ConditionalInterpolateParameters(inout FSimulationContext Context)
{
	InterpolateParameters(Context);
}

void TransferAttributes(inout FSimulationContext Context)
{
		Context.MapUpdate.Particles = Context.MapSpawn.Particles;
		Context.MapUpdate.DataInstance = Context.MapSpawn.DataInstance;
}

void StoreUpdateVariables(in FSimulationContext Context)
{
		GStageWritesAlive = true;
		const bool bValid = Context.MapUpdate.DataInstance.Alive;
		const int WriteIndex = OutputIndex(0, true, bValid);
		if (bValid)
		{
			OutputDataFloat(0, 0, WriteIndex, Context.MapUpdate.Particles.Age);
			OutputDataFloat(0, 1, WriteIndex, Context.MapUpdate.Particles.Color.r);
			OutputDataFloat(0, 2, WriteIndex, Context.MapUpdate.Particles.Color.g);
			OutputDataFloat(0, 3, WriteIndex, Context.MapUpdate.Particles.Color.b);
			OutputDataFloat(0, 4, WriteIndex, Context.MapUpdate.Particles.Color.a);
			OutputDataFloat(0, 5, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter3.x);
			OutputDataFloat(0, 6, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter3.y);
			OutputDataFloat(0, 7, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter3.z);
			OutputDataFloat(0, 8, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter3.w);
			OutputDataInt(0, 0, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.Tri);
			OutputDataFloat(0, 9, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.x);
			OutputDataFloat(0, 10, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.y);
			OutputDataFloat(0, 11, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.MeshTriCoordinate.BaryCoord.z);
			OutputDataFloat(0, 12, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.SpriteSize.x);
			OutputDataFloat(0, 13, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.SpriteSize.y);
			OutputDataFloat(0, 14, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.TriangleUVArea);
			OutputDataFloat(0, 15, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.TriangleWorldSpaceArea);
			OutputDataFloat(0, 16, WriteIndex, Context.MapUpdate.Particles.Initialize_MeshReproductionSprite.UVWidth);
			OutputDataFloat(0, 17, WriteIndex, Context.MapUpdate.Particles.Lifetime);
			OutputDataFloat(0, 18, WriteIndex, Context.MapUpdate.Particles.Mass);
			OutputDataFloat(0, 19, WriteIndex, Context.MapUpdate.Particles.MaterialRandom);
			OutputDataFloat(0, 20, WriteIndex, Context.MapUpdate.Particles.NormalizedAge);
			OutputDataFloat(0, 21, WriteIndex, Context.MapUpdate.Particles.Position.x);
			OutputDataFloat(0, 22, WriteIndex, Context.MapUpdate.Particles.Position.y);
			OutputDataFloat(0, 23, WriteIndex, Context.MapUpdate.Particles.Position.z);
			OutputDataFloat(0, 24, WriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
			OutputDataFloat(0, 25, WriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
			OutputDataFloat(0, 26, WriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
			OutputDataFloat(0, 27, WriteIndex, Context.MapUpdate.Particles.RotationalInertia);
			OutputDataFloat(0, 28, WriteIndex, Context.MapUpdate.Particles.RotationalVelocity.x);
			OutputDataFloat(0, 29, WriteIndex, Context.MapUpdate.Particles.RotationalVelocity.y);
			OutputDataFloat(0, 30, WriteIndex, Context.MapUpdate.Particles.RotationalVelocity.z);
			OutputDataFloat(0, 31, WriteIndex, Context.MapUpdate.Particles.Scale.x);
			OutputDataFloat(0, 32, WriteIndex, Context.MapUpdate.Particles.Scale.y);
			OutputDataFloat(0, 33, WriteIndex, Context.MapUpdate.Particles.Scale.z);
			OutputDataFloat(0, 34, WriteIndex, Context.MapUpdate.Particles.SpriteAlignment.x);
			OutputDataFloat(0, 35, WriteIndex, Context.MapUpdate.Particles.SpriteAlignment.y);
			OutputDataFloat(0, 36, WriteIndex, Context.MapUpdate.Particles.SpriteAlignment.z);
			OutputDataFloat(0, 37, WriteIndex, Context.MapUpdate.Particles.SpriteFacing.x);
			OutputDataFloat(0, 38, WriteIndex, Context.MapUpdate.Particles.SpriteFacing.y);
			OutputDataFloat(0, 39, WriteIndex, Context.MapUpdate.Particles.SpriteFacing.z);
			OutputDataFloat(0, 40, WriteIndex, Context.MapUpdate.Particles.SpriteRotation);
			OutputDataFloat(0, 41, WriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
			OutputDataFloat(0, 42, WriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
			OutputDataInt(0, 1, WriteIndex, Context.MapUpdate.Particles.UniqueID);
			OutputDataFloat(0, 43, WriteIndex, Context.MapUpdate.Particles.Velocity.x);
			OutputDataFloat(0, 44, WriteIndex, Context.MapUpdate.Particles.Velocity.y);
			OutputDataFloat(0, 45, WriteIndex, Context.MapUpdate.Particles.Velocity.z);
		}

}

void CopyInstance(in int InstanceIdx)
{

}
#line 1656 "/Engine/Generated/NiagaraEmitterInstance.ush"
[numthreads( 32 , 1, 1)]
void SimulateMainComputeCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	GDispatchThreadId = DispatchThreadId;
	GGroupThreadId = GroupThreadId;
	GCurrentPhase = -1;
	GEmitterTickCounter = EmitterTickCounter;
	GSimStart = SimStart;
	GRandomSeedOffset = 0;
#line 1677 "/Engine/Generated/NiagaraEmitterInstance.ush"
	const uint InstanceID = UpdateStartInstance + DispatchThreadId.x;
	if (ReadInstanceCountOffset == 0xFFFFFFFF)
	{
		GSpawnStartInstance = 0;
	}
	else
	{
		GSpawnStartInstance = RWInstanceCounts[ReadInstanceCountOffset];
	}
	bool bRunUpdateLogic, bRunSpawnLogic;
#line 1695 "/Engine/Generated/NiagaraEmitterInstance.ush"
	{
	    const int MaxInstances = GSpawnStartInstance + SpawnedInstances;
		bRunUpdateLogic = InstanceID < GSpawnStartInstance && InstanceID < UpdateStartInstance + MaxInstances;
		bRunSpawnLogic = InstanceID >= GSpawnStartInstance && InstanceID < UpdateStartInstance + MaxInstances;
	}

	const float RandomSeedInitialisation = NiagaraInternalNoise(InstanceID * 16384, 0 * 8196, (bRunUpdateLogic ? 4096 : 0) + EmitterTickCounter);

	FSimulationContext Context = (FSimulationContext)0;

	[branch]
	if (bRunUpdateLogic)
	{
		GCurrentPhase = GUpdatePhase;
		SetupExecIndexForGPU();
		InitConstants(Context);
		LoadUpdateVariables(Context, InstanceID);
		ReadDataSets(Context);
		SimulateMapUpdate(Context);


		WriteDataSets(Context);
	}
	else if (bRunSpawnLogic)
	{
		GCurrentPhase = GSpawnPhase;
#line 1729 "/Engine/Generated/NiagaraEmitterInstance.ush"
		{
			SetupExecIndexAndSpawnInfoForGPU();
		}
		InitConstants(Context);
		InitSpawnVariables(Context);
		ReadDataSets(Context);

		Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
		ConditionalInterpolateParameters(Context);
		SimulateMapSpawn(Context);

		GCurrentPhase = GUpdatePhase;

		TransferAttributes(Context);



		SimulateMapUpdate(Context);
		WriteDataSets(Context);
	}

	StoreUpdateVariables(Context);

}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 130419238
DrawRectangleParameters, 3145983
InstancedView, 232784127
MobileSceneTextures, 90703865
SceneTexturesStruct, 120063476
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldTexture0, View, 5, 21
View_GlobalDistanceFieldSampler0, View, 8, 22
View_GlobalDistanceFieldTexture1, View, 5, 23
View_GlobalDistanceFieldSampler1, View, 8, 24
View_GlobalDistanceFieldTexture2, View, 5, 25
View_GlobalDistanceFieldSampler2, View, 8, 26
View_GlobalDistanceFieldTexture3, View, 5, 27
View_GlobalDistanceFieldSampler3, View, 8, 28
View_AtmosphereTransmittanceTexture, View, 5, 29
View_AtmosphereTransmittanceTextureSampler, View, 8, 30
View_AtmosphereIrradianceTexture, View, 5, 31
View_AtmosphereIrradianceTextureSampler, View, 8, 32
View_AtmosphereInscatterTexture, View, 5, 33
View_AtmosphereInscatterTextureSampler, View, 8, 34
View_PerlinNoiseGradientTexture, View, 5, 35
View_PerlinNoiseGradientTextureSampler, View, 8, 36
View_PerlinNoise3DTexture, View, 5, 37
View_PerlinNoise3DTextureSampler, View, 8, 38
View_SobolSamplingTexture, View, 5, 39
View_SharedPointWrappedSampler, View, 8, 40
View_SharedPointClampedSampler, View, 8, 41
View_SharedBilinearWrappedSampler, View, 8, 42
View_SharedBilinearClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_PrimitiveSceneData, View, 6, 48
View_PrimitiveSceneDataTexture, View, 5, 49
View_LightmapSceneData, View, 6, 50
View_TransmittanceLutTexture, View, 5, 51
View_TransmittanceLutTextureSampler, View, 8, 52
View_SkyViewLutTexture, View, 5, 53
View_SkyViewLutTextureSampler, View, 8, 54
View_DistantSkyLightLutTexture, View, 5, 55
View_DistantSkyLightLutTextureSampler, View, 8, 56
View_CameraAerialPerspectiveVolume, View, 5, 57
View_CameraAerialPerspectiveVolumeSampler, View, 8, 58
View_VTFeedbackBuffer, View, 7, 59
View_QuadOverdraw, View, 7, 60
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 5, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 5, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_SceneAlphaCopyTexture, MobileSceneTextures, 5, 4
MobileSceneTextures_SceneAlphaCopyTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 5, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_MobileCustomStencilTexture, MobileSceneTextures, 5, 8
MobileSceneTextures_MobileCustomStencilTextureSampler, MobileSceneTextures, 8, 9
MobileSceneTextures_VirtualTextureFeedbackUAV, MobileSceneTextures, 7, 10
MobileSceneTextures_EyeAdaptationBuffer, MobileSceneTextures, 6, 11
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 5, 0
SceneTexturesStruct_SceneColorTextureSampler, SceneTexturesStruct, 8, 1
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 5, 2
SceneTexturesStruct_SceneDepthTextureSampler, SceneTexturesStruct, 8, 3
SceneTexturesStruct_SceneDepthTextureNonMS, SceneTexturesStruct, 5, 4
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 5, 5
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 5, 6
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 5, 7
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 5, 8
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 5, 9
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 5, 10
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 5, 11
SceneTexturesStruct_GBufferATextureNonMS, SceneTexturesStruct, 5, 12
SceneTexturesStruct_GBufferBTextureNonMS, SceneTexturesStruct, 5, 13
SceneTexturesStruct_GBufferCTextureNonMS, SceneTexturesStruct, 5, 14
SceneTexturesStruct_GBufferDTextureNonMS, SceneTexturesStruct, 5, 15
SceneTexturesStruct_GBufferETextureNonMS, SceneTexturesStruct, 5, 16
SceneTexturesStruct_GBufferFTextureNonMS, SceneTexturesStruct, 5, 17
SceneTexturesStruct_GBufferVelocityTextureNonMS, SceneTexturesStruct, 5, 18
SceneTexturesStruct_GBufferATextureSampler, SceneTexturesStruct, 8, 19
SceneTexturesStruct_GBufferBTextureSampler, SceneTexturesStruct, 8, 20
SceneTexturesStruct_GBufferCTextureSampler, SceneTexturesStruct, 8, 21
SceneTexturesStruct_GBufferDTextureSampler, SceneTexturesStruct, 8, 22
SceneTexturesStruct_GBufferETextureSampler, SceneTexturesStruct, 8, 23
SceneTexturesStruct_GBufferFTextureSampler, SceneTexturesStruct, 8, 24
SceneTexturesStruct_GBufferVelocityTextureSampler, SceneTexturesStruct, 8, 25
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 5, 26
SceneTexturesStruct_ScreenSpaceAOTextureSampler, SceneTexturesStruct, 8, 27
SceneTexturesStruct_CustomDepthTextureNonMS, SceneTexturesStruct, 5, 28
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 5, 29
SceneTexturesStruct_CustomDepthTextureSampler, SceneTexturesStruct, 8, 30
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 6, 31
SceneTexturesStruct_SceneStencilTexture, SceneTexturesStruct, 6, 32
SceneTexturesStruct_EyeAdaptation, SceneTexturesStruct, 5, 33
SceneTexturesStruct_SceneColorCopyTexture, SceneTexturesStruct, 5, 34
SceneTexturesStruct_SceneColorCopyTextureSampler, SceneTexturesStruct, 8, 35
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM5 -entry=SimulateMainComputeCS -cs D:/Epic Games/Unreal Engine 4/Unreal Project/CreateLogo/Saved/ShaderDebugInfo/PCD3D_SM5/LogoVFX/Empty/ParticleGPUComputeScript/FNiagaraShader/0/NiagaraEmitterInstanceShader.usf -cflags=4096 -nocrashreports
#endif /*DIRECT COMPILE*/
//

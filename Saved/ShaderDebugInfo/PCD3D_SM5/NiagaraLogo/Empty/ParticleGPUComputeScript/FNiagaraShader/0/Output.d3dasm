//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float MaxGlobalDistance;           // Offset:    0 Size:     4 [unused]
//   float4 GlobalVolumeCenterAndExtent[4];// Offset:   16 Size:    64 [unused]
//   float4 GlobalVolumeWorldToUVAddAndMul[4];// Offset:   80 Size:    64 [unused]
//   float GlobalVolumeDimension;       // Offset:  144 Size:     4 [unused]
//   float GlobalVolumeTexelSize;       // Offset:  148 Size:     4 [unused]
//   uint EmitterTickCounter;           // Offset:  152 Size:     4
//   int4 EmitterSpawnInfoOffsets[2];   // Offset:  160 Size:    32
//   float4 EmitterSpawnInfoParams[8];  // Offset:  192 Size:   128
//   uint SpawnedInstances;             // Offset:  320 Size:     4
//   uint UpdateStartInstance;          // Offset:  324 Size:     4
//   int DefaultSimulationStageIndex;   // Offset:  328 Size:     4 [unused]
//   int SimulationStageIndex;          // Offset:  332 Size:     4 [unused]
//   int IterationInterfaceCount;       // Offset:  336 Size:     4 [unused]
//   uint ComponentBufferSizeRead;      // Offset:  340 Size:     4
//   uint ComponentBufferSizeWrite;     // Offset:  344 Size:     4
//   int NumEventsPerParticle;          // Offset:  348 Size:     4 [unused]
//   int NumParticlesPerEvent;          // Offset:  352 Size:     4 [unused]
//   uint CopyInstancesBeforeStart;     // Offset:  356 Size:     4 [unused]
//   uint SimStart;                     // Offset:  360 Size:     4 [unused]
//   uint ReadInstanceCountOffset;      // Offset:  364 Size:     4
//   uint WriteInstanceCountOffset;     // Offset:  368 Size:     4
//   uint UseColorBuffer_User_StaticMesh;// Offset:  372 Size:     4 [unused]
//   uint SectionCount_User_StaticMesh; // Offset:  376 Size:     4
//   row_major float4x4 InstanceTransform_User_StaticMesh;// Offset:  384 Size:    64
//   row_major float4x4 InstanceTransformInverseTransposed_User_StaticMesh;// Offset:  448 Size:    64
//   row_major float4x4 InstancePrevTransform_User_StaticMesh;// Offset:  512 Size:    64 [unused]
//   float InstanceInvDeltaTime_User_StaticMesh;// Offset:  576 Size:     4 [unused]
//   float4 InstanceWorldVelocity_User_StaticMesh;// Offset:  592 Size:    16 [unused]
//   uint AreaWeightedSamplingName_User_StaticMesh;// Offset:  608 Size:     4
//   uint NumTexCoordName_User_StaticMesh;// Offset:  612 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraGlobalParameters
// {
//
//   float Engine_DeltaTime;            // Offset:    0 Size:     4
//   float Engine_InverseDeltaTime;     // Offset:    4 Size:     4 [unused]
//   float Engine_Time;                 // Offset:    8 Size:     4 [unused]
//   float Engine_RealTime;             // Offset:   12 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraEmitterParameters
// {
//
//   int Engine_Emitter_NumParticles;   // Offset:    0 Size:     4 [unused]
//   int Engine_Emitter_TotalSpawnedParticles;// Offset:    4 Size:     4
//   float Engine_Emitter_SpawnCountScale;// Offset:    8 Size:     4 [unused]
//   float Emitter_Age;                 // Offset:   12 Size:     4 [unused]
//   int Emitter_RandomSeed;            // Offset:   16 Size:     4 [unused]
//   int Engine_Emitter_PaddingInt32_0; // Offset:   20 Size:     4 [unused]
//   int Engine_Emitter_PaddingInt32_1; // Offset:   24 Size:     4 [unused]
//   int Engine_Emitter_PaddingInt32_2; // Offset:   28 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraExternalParameters
// {
//
//   float Constants_Emitter_InitializeParticle_Lifetime;// Offset:    0 Size:     4
//   float4 Constants_Emitter_InitializeParticle_Color;// Offset:   16 Size:    16
//   float Constants_Emitter_InitializeParticle_Mass;// Offset:   32 Size:     4
//   float4 Constants_Emitter_InitializeParticle_SpriteSize;// Offset:   48 Size:    16
//   float Constants_Emitter_InitializeParticle_SpriteRotation;// Offset:   64 Size:     4 [unused]
//   float4 Constants_Emitter_InitializeParticle_MeshScale;// Offset:   80 Size:    16 [unused]
//   float Constants_Emitter_UniformRangedFloat_Minimum;// Offset:   96 Size:     4
//   float Constants_Emitter_UniformRangedFloat_Maximum;// Offset:  100 Size:     4
//   int Constants_Emitter_UniformRangedFloat_RandomSeed;// Offset:  104 Size:     4 [unused]
//   float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;// Offset:  108 Size:     4 [unused]
//   float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;// Offset:  112 Size:     4 [unused]
//   float Emitter_SpawnRate;           // Offset:  116 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// InputFloat                        texture   float         buf             t0      1 
// InputInt                          texture    sint         buf             t1      1 
// IndexBuffer_User_StaticMesh       texture    uint         buf             t2      1 
// VertexBuffer_User_StaticMesh      texture   float         buf             t3      1 
// TangentBuffer_User_StaticMesh     texture  float4         buf             t4      1 
// SectionBuffer_User_StaticMesh     texture   uint4         buf             t5      1 
// TriangleBuffer_User_StaticMesh    texture   uint4         buf             t6      1 
// RWOutputInt                           UAV    sint         buf             u0      1 
// RWOutputFloat                         UAV   float         buf             u1      1 
// RWInstanceCounts                      UAV    uint         buf             u2      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// FNiagaraGlobalParameters          cbuffer      NA          NA            cb1      1 
// FNiagaraEmitterParameters         cbuffer      NA          NA            cb2      1 
// FNiagaraExternalParameters        cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[39], dynamicIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB3[7], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (sint,sint,sint,sint) t1
dcl_resource_buffer (uint,uint,uint,uint) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (float,float,float,float) t4
dcl_resource_buffer (uint,uint,uint,uint) t5
dcl_resource_buffer (uint,uint,uint,uint) t6
dcl_uav_typed_buffer (sint,sint,sint,sint) u0
dcl_uav_typed_buffer (float,float,float,float) u1
dcl_uav_typed_buffer (uint,uint,uint,uint) u2
dcl_input vThreadIDInGroup.x
dcl_input vThreadID.x
dcl_temps 13
dcl_tgsm_structured g0, 4, 32
dcl_tgsm_structured g1, 4, 8
dcl_tgsm_structured g2, 4, 2
dcl_tgsm_raw g3, 4
dcl_thread_group 32, 1, 1
iadd r0.x, vThreadID.x, cb0[20].y
ieq r0.y, cb0[22].w, l(-1)
ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r0.z, cb0[22].wwww, u2.yzxw
movc r0.y, r0.y, l(0), r0.z
iadd r0.z, r0.y, cb0[20].x
iadd r0.z, r0.z, cb0[20].y
ult r0.zw, r0.xxxx, r0.zzzy
and r0.w, r0.z, r0.w
if_nz r0.w
  ld_indexable(buffer)(float,float,float,float) r0.w, r0.xxxx, t0.yzwx
  iadd r1.x, r0.x, cb0[21].y
  ld_indexable(buffer)(float,float,float,float) r1.x, r1.xxxx, t0.xyzw
  ishl r1.yzw, cb0[21].yyyy, l(0, 1, 2, 4)
  iadd r1.yzw, r0.xxxx, r1.yyzw
  ld_indexable(buffer)(float,float,float,float) r1.y, r1.yyyy, t0.yxzw
  imad r2.xyzw, l(3, 5, 6, 7), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r2.x, r2.xxxx, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r1.z, r1.zzzz, t0.yzxw
  ld_indexable(buffer)(float,float,float,float) r2.y, r2.yyyy, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r2.z, r2.zzzz, t0.yzxw
  ld_indexable(buffer)(float,float,float,float) r2.w, r2.wwww, t0.yzwx
  imad r3.xyzw, l(9, 10, 11, 15), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r4.x, r3.xxxx, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r4.y, r3.yyyy, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r4.z, r3.zzzz, t0.yzxw
  ld_indexable(buffer)(float,float,float,float) r3.x, r3.wwww, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r1.w, r1.wwww, t0.yzwx
  imad r5.xyzw, l(17, 18, 19, 20), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r3.y, r5.xxxx, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r3.z, r5.yyyy, t0.yzxw
  ld_indexable(buffer)(float,float,float,float) r3.w, r5.zzzz, t0.yzwx
  ld_indexable(buffer)(float,float,float,float) r4.w, r5.wwww, t0.yzwx
  ld_indexable(buffer)(sint,sint,sint,sint) r5.x, r0.xxxx, t1.xyzw
  imad r5.yzw, l(0, 21, 22, 23), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r6.x, r5.yyyy, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r6.y, r5.zzzz, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r6.z, r5.wwww, t0.yzxw
  add r0.w, r0.w, cb1[0].x
  max r5.y, r2.y, l(0.000010)
  add r5.z, r5.y, l(-0.000100)
  lt r5.z, r0.w, r5.z
  div r5.y, r0.w, r5.y
  mad r4.xyz, r6.xyzx, cb1[0].xxxx, r4.xyzx
  mov r5.w, r6.x
  mov r7.x, r6.z
  mov r6.xw, r6.xxxy
else 
  uge r7.y, r0.x, r0.y
  and r0.z, r0.z, r7.y
  if_nz r0.z
    iadd r0.y, -r0.y, r0.x
    ige r8.xyzw, r0.yyyy, cb0[10].xyzw
    and r8.xyzw, r8.xyzw, l(1, 1, 1, 1)
    iadd r0.z, r8.y, r8.x
    iadd r0.z, r8.z, r0.z
    iadd r0.z, r8.w, r0.z
    ige r8.xyzw, r0.yyyy, cb0[11].xyzw
    and r8.xyzw, r8.xyzw, l(1, 1, 1, 1)
    iadd r7.y, r8.y, r8.x
    iadd r7.y, r8.z, r7.y
    iadd r7.y, r8.w, r7.y
    iadd r0.z, r0.z, r7.y
    iadd r0.y, r0.y, -cb0[r0.z + 12].w
    iadd r5.x, r0.y, cb2[0].y
    itof r0.y, r0.y
    mad r0.y, cb0[r0.z + 12].x, r0.y, cb0[r0.z + 12].y
    add r0.w, -r0.y, cb1[0].x
    mov r8.x, vThreadID.x
    mov r8.y, cb0[9].z
    imad r0.yz, r8.xxyx, l(0, 0x0019660d, 0x0019660d, 0), l(0, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r7.yz, r0.yyyy, r0.yyyy, l(0, 0x3c3c2745, 0x3c22c138, 0)
    imad r8.xy, r0.zzzz, r7.yzyy, r0.yyyy
    imad r8.zw, r7.yyyz, r8.xxxy, r0.zzzz
    imad r0.yz, r8.xxyx, r8.zzwz, r0.yyyy
    imad r0.yz, r8.xxyx, r0.yyzy, r7.yyzy
    ishr r0.yz, r0.yyzy, l(0, 8, 8, 0)
    and r0.yz, r0.yyzy, l(0, 0x00ffffff, 0x00ffffff, 0)
    utof r0.yz, r0.yyzy
    mul r2.w, r0.y, l(0.000000)
    add r0.y, -cb3[6].x, cb3[6].y
    mul r0.y, r0.y, r0.z
    mad r0.y, r0.y, l(0.000000), cb3[6].x
    ieq r0.z, cb0[23].z, l(0)
    if_z cb0[23].z
      mov r7.yzw, l(0,-1,0,0)
      mov r8.x, l(0)
    endif 
    if_z r0.z
      imad r0.x, r0.x, l(0x59834000), cb0[9].z
      iadd r8.y, r0.x, l(0x00196612)
      iadd r0.x, r0.x, r8.y
      imad r8.y, r8.y, l(0x0019660d), l(0x3c6ef35f)
      ushr r8.z, r8.y, l(16)
      bfi r8.y, l(16), l(16), r8.y, r8.z
      imad r8.z, l(0xbf793ca1), r8.y, l(0x596c3c88)
      imad r8.w, r8.y, r8.z, l(0xbf793ca1)
      imad r8.y, r8.z, r8.w, r8.y
      imad r8.y, r8.w, r8.y, r8.z
      utof r8.y, r8.y
      mul r8.y, r8.y, l(0.000000)
      utof r8.z, cb0[23].z
      mul r8.y, r8.z, r8.y
      ftou r8.y, r8.y
      iadd r8.z, cb0[23].z, l(-1)
      umin r8.y, r8.z, r8.y
      ld_indexable(buffer)(uint,uint,uint,uint) r9.xyzw, r8.yyyy, t5.xyzw
      iadd r8.y, r0.x, l(0x00196612)
      iadd r0.x, r0.x, r8.y
      imad r8.y, r8.y, l(0x0019660d), l(0x3c6ef35f)
      ushr r8.z, r8.y, l(16)
      bfi r8.y, l(16), l(16), r8.y, r8.z
      imad r8.z, l(0xbf793ca1), r8.y, l(0x596c3c88)
      imad r8.w, r8.y, r8.z, l(0xbf793ca1)
      imad r8.y, r8.z, r8.w, r8.y
      imad r8.y, r8.w, r8.y, r8.z
      utof r8.y, r8.y
      mul r8.y, r8.y, l(0.000000)
      lt r8.y, r9.z, r8.y
      if_nz r8.y
        ld_indexable(buffer)(uint,uint,uint,uint) r9.xy, r9.wwww, t5.xyzw
      endif 
      iadd r8.y, r0.x, l(0x00196612)
      iadd r0.x, r0.x, r8.y
      imad r8.y, r8.y, l(0x0019660d), l(0x3c6ef35f)
      ushr r8.z, r8.y, l(16)
      bfi r8.y, l(16), l(16), r8.y, r8.z
      imad r8.z, l(0xbf793ca1), r8.y, l(0x596c3c88)
      imad r8.w, r8.y, r8.z, l(0xbf793ca1)
      imad r8.y, r8.z, r8.w, r8.y
      imad r8.y, r8.w, r8.y, r8.z
      utof r8.y, r8.y
      mul r8.y, r8.y, l(0.000000)
      if_z cb0[38].x
        utof r8.z, r9.y
        mul r8.z, r8.z, r8.y
        ftou r8.z, r8.z
        iadd r8.w, r9.y, l(-1)
        umin r8.z, r8.w, r8.z
        iadd r7.y, r8.z, r9.x
      else 
        utof r8.z, r9.y
        mul r8.y, r8.z, r8.y
        ftou r8.y, r8.y
        iadd r8.z, r9.y, l(-1)
        umin r8.y, r8.z, r8.y
        iadd r8.z, r8.y, r9.x
        ld_indexable(buffer)(uint,uint,uint,uint) r8.zw, r8.zzzz, t6.zwxy
        iadd r9.y, r0.x, l(0x00196612)
        iadd r0.x, r0.x, r9.y
        imad r9.y, r9.y, l(0x0019660d), l(0x3c6ef35f)
        ushr r9.z, r9.y, l(16)
        bfi r9.y, l(16), l(16), r9.y, r9.z
        imad r9.z, l(0xbf793ca1), r9.y, l(0x596c3c88)
        imad r9.w, r9.y, r9.z, l(0xbf793ca1)
        imad r9.y, r9.z, r9.w, r9.y
        imad r9.y, r9.w, r9.y, r9.z
        utof r9.y, r9.y
        mul r9.y, r9.y, l(0.000000)
        lt r8.z, r8.z, r9.y
        movc r8.y, r8.z, r8.w, r8.y
        iadd r7.y, r8.y, r9.x
      endif 
      iadd r8.y, r0.x, l(0x00196612)
      iadd r0.x, r0.x, r8.y
      imad r8.y, r8.y, l(0x0019660d), l(0x3c6ef35f)
      ushr r8.z, r8.y, l(16)
      bfi r8.y, l(16), l(16), r8.y, r8.z
      imad r8.z, l(0xbf793ca1), r8.y, l(0x596c3c88)
      imad r8.w, r8.y, r8.z, l(0xbf793ca1)
      imad r8.y, r8.z, r8.w, r8.y
      imad r8.y, r8.w, r8.y, r8.z
      utof r8.y, r8.y
      mul r8.y, r8.y, l(0.000000)
      imad r0.x, r0.x, l(0x0019660d), l(0x54264e49)
      ushr r8.z, r0.x, l(16)
      bfi r0.x, l(16), l(16), r0.x, r8.z
      imad r8.z, l(0xbf793ca1), r0.x, l(0x596c3c88)
      imad r8.w, r0.x, r8.z, l(0xbf793ca1)
      imad r0.x, r8.z, r8.w, r0.x
      imad r0.x, r8.w, r0.x, r8.z
      utof r0.x, r0.x
      mul r8.z, r0.x, l(0.000000)
      sqrt r8.y, r8.y
      add r7.z, -r8.y, l(1.000000)
      mad r0.x, -r0.x, l(0.000000), l(1.000000)
      mul r7.w, r0.x, r8.y
      mul r8.x, r8.y, r8.z
    endif 
    if_z cb0[23].z
      mov r8.yzw, cb0[27].xxyz
    endif 
    if_z r0.z
      imul null, r0.x, r7.y, l(3)
      ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t2.xyzw
      imul null, r9.x, r0.x, l(3)
      imad r9.yz, r7.yyyy, l(0, 3, 3, 0), l(0, 1, 2, 0)
      ld_indexable(buffer)(uint,uint,uint,uint) r9.y, r9.yyyy, t2.yxzw
      imul null, r9.w, r9.y, l(3)
      ld_indexable(buffer)(uint,uint,uint,uint) r9.z, r9.zzzz, t2.yzxw
      imul null, r10.x, r9.z, l(3)
      ld_indexable(buffer)(float,float,float,float) r10.y, r9.xxxx, t3.wxyz
      imad r11.xy, r0.xxxx, l(3, 3, 0, 0), l(1, 2, 0, 0)
      ld_indexable(buffer)(float,float,float,float) r10.z, r11.xxxx, t3.wyxz
      ld_indexable(buffer)(float,float,float,float) r10.w, r11.yyyy, t3.wyzx
      ld_indexable(buffer)(float,float,float,float) r11.x, r9.wwww, t3.xyzw
      imad r9.xy, r9.yyyy, l(3, 3, 0, 0), l(1, 2, 0, 0)
      ld_indexable(buffer)(float,float,float,float) r11.y, r9.xxxx, t3.yxzw
      ld_indexable(buffer)(float,float,float,float) r11.z, r9.yyyy, t3.yzxw
      ld_indexable(buffer)(float,float,float,float) r9.x, r10.xxxx, t3.xywz
      imad r12.xy, r9.zzzz, l(3, 3, 0, 0), l(1, 2, 0, 0)
      ld_indexable(buffer)(float,float,float,float) r9.y, r12.xxxx, t3.yxwz
      ld_indexable(buffer)(float,float,float,float) r9.w, r12.yyyy, t3.yzwx
      mul r11.xyz, r7.wwww, r11.xyzx
      mad r10.xyz, r10.yzwy, r7.zzzz, r11.xyzx
      mad r9.xyz, r9.xywx, r8.xxxx, r10.xyzx
      mul r10.xyz, r9.yyyy, cb0[25].xyzx
      mad r9.xyw, r9.xxxx, cb0[24].xyxz, r10.xyxz
      mad r9.xyz, r9.zzzz, cb0[26].xyzx, r9.xywx
      add r8.yzw, r9.xxyz, cb0[27].xxyz
    endif 
    if_z cb0[23].z
      mov r9.xyz, l(0,0,1.000000,0)
    endif 
    if_z r0.z
      imul null, r0.x, r7.y, l(3)
      ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t2.xyzw
      imad r10.xy, r7.yyyy, l(3, 3, 0, 0), l(1, 2, 0, 0)
      ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r10.xxxx, t2.yzxw
      ld_indexable(buffer)(uint,uint,uint,uint) r7.y, r10.yyyy, t2.yxzw
      bfi r0.x, l(31), l(1), r0.x, l(1)
      ld_indexable(buffer)(float,float,float,float) r10.xyz, r0.xxxx, t4.xyzw
      bfi r0.x, l(31), l(1), r0.z, l(1)
      ld_indexable(buffer)(float,float,float,float) r11.xyz, r0.xxxx, t4.xyzw
      bfi r0.x, l(31), l(1), r7.y, l(1)
      ld_indexable(buffer)(float,float,float,float) r12.xyz, r0.xxxx, t4.xyzw
      mul r11.xyz, r7.wwww, r11.xyzx
      mad r7.yzw, r10.xxyz, r7.zzzz, r11.xxyz
      mad r7.yzw, r12.xxyz, r8.xxxx, r7.yyzw
      mul r10.xyz, r7.zzzz, cb0[29].xyzx
      mad r10.xyz, r7.yyyy, cb0[28].xyzx, r10.xyzx
      mad r7.yzw, r7.wwww, cb0[30].xxyz, r10.xxyz
      dp3 r0.x, r7.yzwy, r7.yzwy
      rsq r0.x, r0.x
      mul r9.xyz, r0.xxxx, r7.yzwy
    endif 
    mul r6.xyz, r0.yyyy, r9.xyzx
    max r0.x, cb3[0].x, l(0.000010)
    add r0.y, r0.x, l(-0.000100)
    lt r5.z, r0.w, r0.y
    div r5.y, r0.w, r0.x
    mad r4.xyz, r6.xyzx, r0.wwww, r8.yzwy
    mov r2.x, cb3[1].z
    mov r1.xyz, cb3[1].xywx
    mov r2.y, cb3[0].x
    mov r2.z, cb3[2].x
    mov r5.w, r6.x
    mov r7.x, r6.z
    mov r1.w, l(1.000000)
    mov r3.xy, l(1.000000,1.000000,0,0)
    mov r3.w, cb3[3].x
    mov r4.w, cb3[3].y
    mov r6.xw, r6.xxxy
  else 
    mov r0.w, l(0)
    mov r2.xyzw, l(0,0,0,0)
    mov r7.x, l(0)
    mov r1.xyzw, l(0,0,0,0)
    mov r3.xyw, l(0,0,0,0)
    mov r4.xyzw, l(0,0,0,0)
    mov r5.xyzw, l(0,0,0,0)
    mov r6.xyzw, l(0,0,0,0)
  endif 
  mov r3.z, l(0)
endif 
and r0.x, r5.z, l(1)
store_structured g0.x, vThreadIDInGroup.x, l(0), r0.x
sync_g_t
and r0.yz, vThreadIDInGroup.xxxx, l(0, 3, 15, 0)
if_z r0.y
  iadd r7.yzw, vThreadIDInGroup.xxxx, l(0, 1, 2, 3)
  ld_structured r0.y, r7.y, l(0), g0.xxxx
  iadd r0.y, r0.y, r0.x
  ld_structured r8.x, r7.z, l(0), g0.xxxx
  iadd r8.x, r0.y, r8.x
  ld_structured r8.y, r7.w, l(0), g0.xxxx
  iadd r8.y, r8.y, r8.x
  store_structured g0.x, vThreadIDInGroup.x, l(0), l(0)
  store_structured g0.x, r7.y, l(0), r0.x
  store_structured g0.x, r7.z, l(0), r0.y
  store_structured g0.x, r7.w, l(0), r8.x
  ushr r0.x, vThreadIDInGroup.x, l(2)
  store_structured g1.x, r0.x, l(0), r8.y
endif 
sync_g_t
if_z r0.z
  ushr r0.x, vThreadIDInGroup.x, l(2)
  ld_structured r0.y, r0.x, l(0), g1.xxxx
  iadd r7.yzw, r0.xxxx, l(0, 1, 2, 3)
  ld_structured r0.z, r7.y, l(0), g1.xxxx
  iadd r0.z, r0.z, r0.y
  ld_structured r8.x, r7.z, l(0), g1.xxxx
  iadd r8.x, r0.z, r8.x
  ld_structured r8.y, r7.w, l(0), g1.xxxx
  iadd r8.y, r8.y, r8.x
  store_structured g1.x, r0.x, l(0), l(0)
  store_structured g1.x, r7.y, l(0), r0.y
  store_structured g1.x, r7.z, l(0), r0.z
  store_structured g1.x, r7.w, l(0), r8.x
  ushr r0.x, r0.x, l(2)
  store_structured g2.x, r0.x, l(0), r8.y
endif 
sync_g_t
if_z vThreadIDInGroup.x
  ld_structured r0.x, l(0), l(0), g2.xxxx
  ld_structured r0.y, l(1), l(0), g2.xxxx
  iadd r0.y, r0.y, r0.x
  store_structured g2.x, l(0), l(0), l(0)
  store_structured g2.x, l(1), l(0), r0.x
  imm_atomic_iadd r8.x, u2, cb0[23].x, r0.y
  store_raw g3.x, l(0), r8.x
endif 
sync_g_t
if_nz r5.z
  ld_raw r0.x, l(0), g3.xxxx
  ushr r0.yz, vThreadIDInGroup.xxxx, l(0, 4, 2, 0)
  ld_structured r0.y, r0.y, l(0), g2.xxxx
  iadd r0.x, r0.y, r0.x
  ld_structured r0.y, r0.z, l(0), g1.xxxx
  iadd r0.x, r0.y, r0.x
  ld_structured r0.y, vThreadIDInGroup.x, l(0), g0.xxxx
  iadd r0.x, r0.y, r0.x
  iadd r0.y, r0.x, cb0[20].y
  store_uav_typed u1.xyzw, r0.yyyy, r0.wwww
  iadd r0.z, r0.x, cb0[21].z
  iadd r0.z, r0.z, cb0[20].y
  store_uav_typed u1.xyzw, r0.zzzz, r1.xxxx
  ishl r8.xyzw, cb0[21].zzzz, l(1, 2, 3, 4)
  iadd r8.xyzw, r0.xxxx, r8.xyzw
  iadd r8.xyzw, r8.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r8.xxxx, r1.yyyy
  imad r9.xyzw, l(3, 5, 6, 7), cb0[21].zzzz, r0.xxxx
  iadd r9.xyzw, r9.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r9.xxxx, r2.xxxx
  store_uav_typed u1.xyzw, r8.yyyy, r1.zzzz
  store_uav_typed u1.xyzw, r9.yyyy, r2.yyyy
  store_uav_typed u1.xyzw, r9.zzzz, r2.zzzz
  store_uav_typed u1.xyzw, r9.wwww, r2.wwww
  store_uav_typed u1.xyzw, r8.zzzz, r5.yyyy
  imad r2.xyzw, l(9, 10, 11, 12), cb0[21].zzzz, r0.xxxx
  iadd r2.xyzw, r2.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r2.xxxx, r4.xxxx
  store_uav_typed u1.xyzw, r2.yyyy, r4.yyyy
  store_uav_typed u1.xyzw, r2.zzzz, r4.zzzz
  store_uav_typed u1.xyzw, r2.wwww, r5.wwww
  imad r2.xyzw, l(13, 14, 15, 17), cb0[21].zzzz, r0.xxxx
  iadd r2.xyzw, r2.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r2.xxxx, r6.wwww
  store_uav_typed u1.xyzw, r2.yyyy, r7.xxxx
  store_uav_typed u1.xyzw, r2.zzzz, r3.xxxx
  store_uav_typed u1.xyzw, r8.wwww, r1.wwww
  store_uav_typed u1.xyzw, r2.wwww, r3.yyyy
  imad r1.xyzw, l(18, 19, 20, 21), cb0[21].zzzz, r0.xxxx
  iadd r1.xyzw, r1.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r1.xxxx, r3.zzzz
  store_uav_typed u1.xyzw, r1.yyyy, r3.wwww
  store_uav_typed u1.xyzw, r1.zzzz, r4.wwww
  store_uav_typed u0.xyzw, r0.yyyy, r5.xxxx
  store_uav_typed u1.xyzw, r1.wwww, r6.xxxx
  imad r0.xy, l(22, 23, 0, 0), cb0[21].zzzz, r0.xxxx
  iadd r0.xy, r0.xyxx, cb0[20].yyyy
  store_uav_typed u1.xyzw, r0.xxxx, r6.yyyy
  store_uav_typed u1.xyzw, r0.yyyy, r6.zzzz
endif 
ret 
// Approximately 374 instruction slots used

#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

struct MeshTriCoordinate
{
	int Tri;
	float3 BaryCoord;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_UniformRangedFloat001_Minimum;
	float Constants_Emitter_UniformRangedFloat001_Maximum;
	int Constants_Emitter_UniformRangedFloat001_RandomSeed;
	int Constants_Emitter_CurlNoiseForce_RandomSeed;
	float Constants_Emitter_CurlNoiseForce_NoiseFrequency;
	float3 Constants_Emitter_CurlNoiseForce_PanNoiseField;
	float Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskAngle;
	float Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskFalloffAngle;
	float3 Constants_Emitter_GravityForce_Gravity;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
}

struct FParamMap0_UniformRangedFloat001
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_SampleStaticMesh
{
	float4 MeshColor;
	float3 MeshNormal;
	float3 MeshPosition;
	MeshTriCoordinate MeshSampleCoord;
	float3 MeshTangent;
	float2 MeshUV;
	float3 MeshVelocity;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float4 DynamicMaterialParameter;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	FParamMap0_Particles_SampleStaticMesh SampleStaticMesh;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	MeshTriCoordinate Tricoord;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_CurlNoiseForce
{
	float AgeAdvancement;
	float DeterministicOffset;
	float Falloff;
	float3 SampledNoise;
	float3 SamplePosition;
};

struct FParamMap0_Local
{
	FParamMap0_Local_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	bool LocalSpace;
	int RandomSeed;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float3 CurlNoiseConeMaskAxis;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float NoiseStrength;
	float3 PanNoiseField;
	int RandomSeed;
	float3 SamplePosition;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat001
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float3 PanNoiseField;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Constants_Emitter_GravityForce GravityForce;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_UniformRangedFloat001 UniformRangedFloat001;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0
{
	FParamMap0_Constants Constants;
	FParamMap0_CurlNoiseForce CurlNoiseForce;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat001 UniformRangedFloat001;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat001_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void SampleField_EmitterVectorField32(float3 In_SamplePoint, out float3 Out_SampledValue);
void CurlNoiseForce_Emitter_Func_(int In_Emitter_RandomSeed, inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result = NiagaraAll(Context.Map.Particles.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.OUTPUT_VAR.ParticleState.FirstFrame = Result;
	float Result1 = Context.Map.Particles.Age + Context.Map.ParticleState.DeltaTime;
	float Constant1 = 1e-05;
	float Result2 = max(Context.Map.ParticleState.Lifetime, Constant1);
	float Constant2 = 0.0001;
	float Result3 = Result2 - Constant2;
	bool Result4 = NiagaraAll(Result1 < Result3);
	bool Constant3 = false;
	bool bool_IfResult;
	if(Result4)
	{
	bool_IfResult = Context.Map.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant3;
	}
	float Result5 = Result1 / Result2;
	Context.Map.DataInstance.Alive = bool_IfResult;
	Context.Map.Particles.Age = Result1;
	Context.Map.Particles.NormalizedAge = Result5;
}

void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant14 = false;
	int Constant15 = 0;
	bool Result6 = NiagaraAll(In_RandomnessMode == Constant15);
	bool Result7 = Constant14 && Result6;
	int Constant16 = 1;
	bool Result8 = NiagaraAll(In_RandomnessMode == Constant16);
	bool Result9 = Result7 || Result8;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.Emitter.RandomSeed;
	}
	int Constant17 = 0;
	int Constant18 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant17;
	Seed3_IfResult = Constant18;
	}
	else
	{
	Seed1_IfResult = Context.Map.Particles.UniqueID;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant19 = -1;
	int Constant20 = -1;
	int Constant21 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result9)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant19;
	Seed2_IfResult1 = Constant20;
	Seed3_IfResult1 = Constant21;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result9;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant10 = (0);
	bool Constant11 = false;
	int Constant12 = 0;
	int Constant13 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant10, In_OverrideSeed, Constant12, Constant13, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms, Context);
	float Result10 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed3;
	float Result11 = rand_float(Result10, Seed1, Seed2, Seed3);
	float Result12 = rand_float(Result10);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result11;
	}
	else
	{
	Random_IfResult = Result12;
	}
	float Result13 = In_Min + Random_IfResult;
	Out_Result = Result13;
}

void UniformRangedFloat001_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant8 = 0;
	bool Constant9 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.Map.UniformRangedFloat001.OverrideRandomness)
	{
	Mode_IfResult = Context.Map.UniformRangedFloat001.RandomnessMode;
	Override_IfResult = Context.Map.UniformRangedFloat001.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant8;
	Override_IfResult = Constant9;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.Map.Constants.Emitter.UniformRangedFloat001.Minimum, Context.Map.Constants.Emitter.UniformRangedFloat001.Maximum, Context.Map.Constants.Emitter.UniformRangedFloat001.RandomSeed, Mode_IfResult, Override_IfResult, Context.Map.UniformRangedFloat001.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result;
}

void CurlNoiseForce_Emitter_Func_(int In_Emitter_RandomSeed, inout FSimulationContext Context)
{
	bool Constant31 = false;
	float AgeAdvancement_IfResult;
	if(Constant31)
	{
	AgeAdvancement_IfResult = Context.Map.Emitter.Age;
	}
	else
	{
	AgeAdvancement_IfResult = Context.Map.Engine.Time;
	}
	float Constant32 = 4096;
	int Constant33 = 0;
	float Result14 = rand_float(Constant32, Context.Map.Constants.Emitter.CurlNoiseForce.RandomSeed, Context.Map.Emitter.RandomSeed, Constant33);
	Context.Map.Local.CurlNoiseForce.AgeAdvancement = AgeAdvancement_IfResult;
	Context.Map.Local.CurlNoiseForce.DeterministicOffset = Result14;
	Context.Map.Local.CurlNoiseForce.SamplePosition = Context.Map.CurlNoiseForce.SamplePosition;
	float3 Result15 = Context.Map.Local.CurlNoiseForce.DeterministicOffset + Context.Map.Local.CurlNoiseForce.SamplePosition;
	float3 Result16 = Result15 * Context.Map.Constants.Emitter.CurlNoiseForce.NoiseFrequency;
	float3 Result17 = Context.Map.Constants.Emitter.CurlNoiseForce.PanNoiseField * Context.Map.Local.CurlNoiseForce.AgeAdvancement;
	float3 Result18 = Result16 - Result17;
	float Constant34 = 125;
	float3 Result19 = Result18 * Constant34;
	float3 SampleField_EmitterVectorField32Output_SampledValue;
	SampleField_EmitterVectorField32(Result19, SampleField_EmitterVectorField32Output_SampledValue);
	Context.Map.Local.CurlNoiseForce.SampledNoise = SampleField_EmitterVectorField32Output_SampledValue;
	float Constant35 = 1;
	Context.Map.Local.CurlNoiseForce.Falloff = Constant35;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAngle = Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskAngle;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle = Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis = Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis;
	float3 Result20 = Context.Map.Local.CurlNoiseForce.SampledNoise * Context.Map.CurlNoiseForce.NoiseStrength;
	float3 Result21 = Context.Map.Transient.PhysicsForce + Result20;
	Context.Map.Transient.PhysicsForce = Result21;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result22 = Context.Map.Constants.Emitter.GravityForce.Gravity * Context.Map.Particles.Mass;
	float3 Result23 = Context.Map.Transient.PhysicsForce + Result22;
	Context.Map.Transient.PhysicsForce = Result23;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Context.Map.SolveForcesAndVelocity.DeltaTime;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.SolveForcesAndVelocity.Velocity;
	Context.Map.Local.SolveForcesAndVelocity.Mass = Context.Map.SolveForcesAndVelocity.Mass;
	float Constant43 = 0.0001;
	float Result24 = max(Context.Map.Local.SolveForcesAndVelocity.Mass, Constant43);
	float Result25 = Reciprocal(Result24);
	float3 Result26 = Result25 * Context.Map.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Result26;
	float3 Result27 = Context.Map.Local.SolveForcesAndVelocity.PhysicsForce * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant44 = 0;
	float Result28 = max(Context.Map.Transient.PhysicsDrag, Constant44);
	float Result29 = Context.Map.Local.SolveForcesAndVelocity.DeltaTime * Result28;
	float Constant45 = 1;
	float Result30 = Result29 + Constant45;
	float3 Result31 = Result27 / Result30;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result31;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.Map.Transient.PhysicsDrag;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result32 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.SolveForcesAndVelocity.Position;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result32;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.Map.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.Map.Particles.Position = Position_IfResult;
	Context.Map.Particles.Velocity = Velocity_IfResult;
	Context.Map.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant46 = float3(0,0,0);
	float Constant47 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant46;
	Drag_IfResult = Constant47;
	}
	else
	{
	ForceVector_IfResult = Context.Map.Transient.PhysicsForce;
	Drag_IfResult = Context.Map.Transient.PhysicsDrag;
	}
	Context.Map.Transient.PhysicsForce = ForceVector_IfResult;
	Context.Map.Transient.PhysicsDrag = Drag_IfResult;
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = true;
	Context.Map.DataInstance.Alive = Constant;
	Context.Map.ParticleState.DeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.ParticleState.Lifetime = Context.Map.Particles.Lifetime;
	EnterStatScope(1 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant4 = false;
	Context.Map.UniformRangedFloat001.OverrideRandomness = Constant4;
	int Constant5 = 0;
	Context.Map.UniformRangedFloat001.RandomnessMode = Constant5;
	bool Constant6 = false;
	Context.Map.UniformRangedFloat001.OverrideSeed = Constant6;
	bool Constant7 = false;
	Context.Map.UniformRangedFloat001.FixedRandomSeed = Constant7;
	float UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat001_Emitter_Func_(UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.Map.CurlNoiseForce.NoiseStrength = UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat;
	bool Constant22 = false;
	int Constant23 = (0);
	float Constant24 = (0.0);
	Context.Map.Local.CurlNoiseForce.AgeAdvancement = Constant24;
	float Constant25 = (0.0);
	Context.Map.Local.CurlNoiseForce.DeterministicOffset = Constant25;
	bool Constant26 = false;
	Context.Map.CurlNoiseForce.SamplePosition = Context.Map.Particles.Position;
	float3 Constant27 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.CurlNoiseForce.SamplePosition = Constant27;
	float3 Constant28 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.CurlNoiseForce.SampledNoise = Constant28;
	float Constant29 = 1;
	Context.Map.Local.CurlNoiseForce.Falloff = Constant29;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis = Context.Map.Particles.Velocity;
	float3 Constant30 = float3(0,0,0);
	Context.Map.Transient.PhysicsForce = Constant30;
	EnterStatScope(2 );
	CurlNoiseForce_Emitter_Func_(Constant23, Context);
	ExitStatScope( );
	EnterStatScope(3 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.Transient.PhysicsDeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.SolveForcesAndVelocity.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float Constant36 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Constant36;
	Context.Map.SolveForcesAndVelocity.Force = Context.Map.Transient.PhysicsForce;
	Context.Map.SolveForcesAndVelocity.Velocity = Context.Map.Particles.Velocity;
	Context.Map.SolveForcesAndVelocity.Mass = Context.Map.Particles.Mass;
	float3 Constant37 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Constant37;
	float3 Constant38 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant38;
	float Constant39 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.Mass = Constant39;
	float Constant40 = 0;
	Context.Map.Transient.PhysicsDrag = Constant40;
	Context.Map.SolveForcesAndVelocity.PreviousVelocity = Context.Map.Particles.PreviousVelocity;
	Context.Map.SolveForcesAndVelocity.Position = Context.Map.Particles.Position;
	float3 Constant41 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant41;
	bool Constant42 = true;
	Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant42;
	EnterStatScope(4 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(5 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Particles.Age = InputDataFloat(0, 0);
	Context.Map.Particles.Color.r = InputDataFloat(0, 1);
	Context.Map.Particles.Color.g = InputDataFloat(0, 2);
	Context.Map.Particles.Color.b = InputDataFloat(0, 3);
	Context.Map.Particles.Color.a = InputDataFloat(0, 4);
	Context.Map.Particles.DynamicMaterialParameter.x = InputDataFloat(0, 5);
	Context.Map.Particles.DynamicMaterialParameter.y = InputDataFloat(0, 6);
	Context.Map.Particles.DynamicMaterialParameter.z = InputDataFloat(0, 7);
	Context.Map.Particles.DynamicMaterialParameter.w = InputDataFloat(0, 8);
	Context.Map.Particles.Lifetime = InputDataFloat(0, 9);
	Context.Map.Particles.Mass = InputDataFloat(0, 10);
	Context.Map.Particles.MaterialRandom = InputDataFloat(0, 11);
	Context.Map.Particles.NormalizedAge = InputDataFloat(0, 12);
	Context.Map.Particles.Position.x = InputDataFloat(0, 13);
	Context.Map.Particles.Position.y = InputDataFloat(0, 14);
	Context.Map.Particles.Position.z = InputDataFloat(0, 15);
	Context.Map.Particles.PreviousVelocity.x = InputDataFloat(0, 16);
	Context.Map.Particles.PreviousVelocity.y = InputDataFloat(0, 17);
	Context.Map.Particles.PreviousVelocity.z = InputDataFloat(0, 18);
	Context.Map.Particles.SampleStaticMesh.MeshColor.r = InputDataFloat(0, 19);
	Context.Map.Particles.SampleStaticMesh.MeshColor.g = InputDataFloat(0, 20);
	Context.Map.Particles.SampleStaticMesh.MeshColor.b = InputDataFloat(0, 21);
	Context.Map.Particles.SampleStaticMesh.MeshColor.a = InputDataFloat(0, 22);
	Context.Map.Particles.SampleStaticMesh.MeshNormal.x = InputDataFloat(0, 23);
	Context.Map.Particles.SampleStaticMesh.MeshNormal.y = InputDataFloat(0, 24);
	Context.Map.Particles.SampleStaticMesh.MeshNormal.z = InputDataFloat(0, 25);
	Context.Map.Particles.SampleStaticMesh.MeshPosition.x = InputDataFloat(0, 26);
	Context.Map.Particles.SampleStaticMesh.MeshPosition.y = InputDataFloat(0, 27);
	Context.Map.Particles.SampleStaticMesh.MeshPosition.z = InputDataFloat(0, 28);
	Context.Map.Particles.SampleStaticMesh.MeshSampleCoord.Tri = InputDataInt(0, 29);
	Context.Map.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.x = InputDataFloat(0, 30);
	Context.Map.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.y = InputDataFloat(0, 31);
	Context.Map.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.z = InputDataFloat(0, 32);
	Context.Map.Particles.SampleStaticMesh.MeshTangent.x = InputDataFloat(0, 33);
	Context.Map.Particles.SampleStaticMesh.MeshTangent.y = InputDataFloat(0, 34);
	Context.Map.Particles.SampleStaticMesh.MeshTangent.z = InputDataFloat(0, 35);
	Context.Map.Particles.SampleStaticMesh.MeshUV.x = InputDataFloat(0, 36);
	Context.Map.Particles.SampleStaticMesh.MeshUV.y = InputDataFloat(0, 37);
	Context.Map.Particles.SampleStaticMesh.MeshVelocity.x = InputDataFloat(0, 38);
	Context.Map.Particles.SampleStaticMesh.MeshVelocity.y = InputDataFloat(0, 39);
	Context.Map.Particles.SampleStaticMesh.MeshVelocity.z = InputDataFloat(0, 40);
	Context.Map.Particles.Scale.x = InputDataFloat(0, 41);
	Context.Map.Particles.Scale.y = InputDataFloat(0, 42);
	Context.Map.Particles.Scale.z = InputDataFloat(0, 43);
	Context.Map.Particles.SpriteRotation = InputDataFloat(0, 44);
	Context.Map.Particles.SpriteSize.x = InputDataFloat(0, 45);
	Context.Map.Particles.SpriteSize.y = InputDataFloat(0, 46);
	Context.Map.Particles.Tricoord.Tri = InputDataInt(0, 47);
	Context.Map.Particles.Tricoord.BaryCoord.x = InputDataFloat(0, 48);
	Context.Map.Particles.Tricoord.BaryCoord.y = InputDataFloat(0, 49);
	Context.Map.Particles.Tricoord.BaryCoord.z = InputDataFloat(0, 50);
	Context.Map.Particles.UniqueID = InputDataInt(0, 51);
	Context.Map.Particles.Velocity.x = InputDataFloat(0, 52);
	Context.Map.Particles.Velocity.y = InputDataFloat(0, 53);
	Context.Map.Particles.Velocity.z = InputDataFloat(0, 54);
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Emitter.UniformRangedFloat001.Minimum = Constants_Emitter_UniformRangedFloat001_Minimum;
	Context.Map.Constants.Emitter.UniformRangedFloat001.Maximum = Constants_Emitter_UniformRangedFloat001_Maximum;
	Context.Map.Constants.Emitter.UniformRangedFloat001.RandomSeed = Constants_Emitter_UniformRangedFloat001_RandomSeed;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.Map.Engine.System.TickCount = Engine_System_TickCount;
	Context.Map.Emitter.Age = Emitter_Age;
	Context.Map.Engine.Time = Engine_Time;
	Context.Map.Constants.Emitter.CurlNoiseForce.RandomSeed = Constants_Emitter_CurlNoiseForce_RandomSeed;
	Context.Map.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.Map.Constants.Emitter.CurlNoiseForce.NoiseFrequency = Constants_Emitter_CurlNoiseForce_NoiseFrequency;
	Context.Map.Constants.Emitter.CurlNoiseForce.PanNoiseField = Constants_Emitter_CurlNoiseForce_PanNoiseField;
	Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskAngle = Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskAngle;
	Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle = Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskFalloffAngle;
	Context.Map.Constants.Emitter.GravityForce.Gravity = Constants_Emitter_GravityForce_Gravity;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.Map.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.z);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.w);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Particles.Lifetime);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Particles.Mass);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Particles.MaterialRandom);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Particles.NormalizedAge);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Particles.Position.x);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Particles.Position.y);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Particles.Position.z);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshColor.r);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshColor.g);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshColor.b);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshColor.a);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshNormal.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshNormal.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshNormal.z);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshPosition.x);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshPosition.y);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshPosition.z);
	OutputDataInt(0, 29, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshSampleCoord.Tri);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.y);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.z);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshTangent.x);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshTangent.y);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshTangent.z);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshUV.x);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshUV.y);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshVelocity.x);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshVelocity.y);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.Map.Particles.SampleStaticMesh.MeshVelocity.z);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.Map.Particles.Scale.x);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.Particles.Scale.y);
	OutputDataFloat(0, 43, TmpWriteIndex, Context.Map.Particles.Scale.z);
	OutputDataFloat(0, 44, TmpWriteIndex, Context.Map.Particles.SpriteRotation);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.Map.Particles.SpriteSize.x);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.Map.Particles.SpriteSize.y);
	OutputDataInt(0, 47, TmpWriteIndex, Context.Map.Particles.Tricoord.Tri);
	OutputDataFloat(0, 48, TmpWriteIndex, Context.Map.Particles.Tricoord.BaryCoord.x);
	OutputDataFloat(0, 49, TmpWriteIndex, Context.Map.Particles.Tricoord.BaryCoord.y);
	OutputDataFloat(0, 50, TmpWriteIndex, Context.Map.Particles.Tricoord.BaryCoord.z);
	OutputDataInt(0, 51, TmpWriteIndex, Context.Map.Particles.UniqueID);
	OutputDataFloat(0, 52, TmpWriteIndex, Context.Map.Particles.Velocity.x);
	OutputDataFloat(0, 53, TmpWriteIndex, Context.Map.Particles.Velocity.y);
	OutputDataFloat(0, 54, TmpWriteIndex, Context.Map.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
